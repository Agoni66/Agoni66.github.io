<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小黄鸭的窝窝✨</title>
  
  
  <link href="https://agoni66.github.io/atom.xml" rel="self"/>
  
  <link href="https://agoni66.github.io/"/>
  <updated>2025-04-12T07:07:35.876Z</updated>
  <id>https://agoni66.github.io/</id>
  
  <author>
    <name>小黄鸭的窝窝✨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础--数据可视化之下载数据</title>
    <link href="https://agoni66.github.io/posts/1000158.html"/>
    <id>https://agoni66.github.io/posts/1000158.html</id>
    <published>2025-02-15T03:30:00.000Z</published>
    <updated>2025-04-12T07:07:35.876Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a> ⇦ 当前位置🚀</p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h3 id="CSV文件格式">CSV文件格式</h3><h4 id="分析CSV文件头">分析CSV文件头</h4><p>csv模块包含在Python标准库中，可用于分析CSV文件中的数据行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_07-2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="built_in">print</span>(reader)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(heaeder_row)</span><br></pre></td></tr></table></figure><pre><code>&lt;_csv.reader object at 0x00000233AD31CEE0&gt;['AKDT', 'Max TemperatureF', 'Mean TemperatureF', 'Min TemperatureF', 'Max Dew PointF', 'MeanDew PointF', 'Min DewpointF', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressureIn', ' Mean Sea Level PressureIn', ' Min Sea Level PressureIn', ' Max VisibilityMiles', ' Mean VisibilityMiles', ' Min VisibilityMiles', ' Max Wind SpeedMPH', ' Mean Wind SpeedMPH', ' Max Gust SpeedMPH', 'PrecipitationIn', ' CloudCover', ' Events', ' WindDirDegrees']</code></pre><ul><li><code>csv.reader()</code> 创建一个阅读器对象</li><li><code>next()</code> 返回文件中的下一行</li></ul><h4 id="打印文件头及其位置">打印文件头及其位置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_07-2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, column_header <span class="keyword">in</span> <span class="built_in">enumerate</span>(heaeder_row):</span><br><span class="line">        <span class="built_in">print</span>(index, column_header)</span><br></pre></td></tr></table></figure><pre><code>0 AKDT1 Max TemperatureF2 Mean TemperatureF3 Min TemperatureF4 Max Dew PointF5 MeanDew PointF6 Min DewpointF7 Max Humidity8  Mean Humidity9  Min Humidity10  Max Sea Level PressureIn11  Mean Sea Level PressureIn12  Min Sea Level PressureIn13  Max VisibilityMiles14  Mean VisibilityMiles15  Min VisibilityMiles16  Max Wind SpeedMPH17  Mean Wind SpeedMPH18  Max Gust SpeedMPH19 PrecipitationIn20  CloudCover21  Events22  WindDirDegrees</code></pre><h4 id="提取并读取数据">提取并读取数据</h4><p>读取每天的最高气温，也就是“Max TemperatureF“”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_07-2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    highs = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(highs)</span><br></pre></td></tr></table></figure><pre><code>[64, 71, 64, 59, 69, 62, 61, 55, 57, 61, 57, 59, 57, 61, 64, 61, 59, 63, 60, 57, 69, 63, 62, 59, 57, 57, 61, 59, 61, 61, 66]</code></pre><p>我们创建了一个名为highs的空列表，再遍历文件中余下的各行。由于我们已经读取了文件头行，这个循环将从第二行实际数据开始</p><h4 id="绘制气温图表">绘制气温图表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_07-2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    highs = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(highs, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题和标签等</span></span><br><span class="line">plt.title(<span class="string">&quot;Daily high temperatures, July 2014&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/51.png" alt="png"></p><h4 id="模块datetime">模块datetime</h4><p>在图表中添加日期</p><ul><li><code>datetime.strptime(date_string, format_string)</code> 将字符串解析为 datetime 对象</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/52.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_07-2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    dates, highs = [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:        </span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>], <span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line">        dates.append(current_date) </span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Daily high temperatures, July 2014&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动调整图形的 x 轴刻度文本的方向，通常在绘制日期或时间序列数据时使用，以确保日期标签不会相互重叠</span></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/53.png" alt="png"></p><h4 id="涵盖更长的时间">涵盖更长的时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中获取日期和最高气温 </span></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    dates, highs = [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:        </span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>], <span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line">        dates.append(current_date) </span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Daily high temperatures, 2014&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/54.png" alt="png"></p><h4 id="添加最低气温数据">添加最低气温数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中获取日期、最高气温和最低气温</span></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    dates, highs, lows = [], [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:        </span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>], <span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line">        dates.append(current_date) </span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line">        low = <span class="built_in">int</span>(row[<span class="number">3</span>])</span><br><span class="line">        lows.append(low)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;the hottest temperature&#x27;</span>)</span><br><span class="line">plt.plot(dates, lows, c=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;the coldest tempurature&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Daily high and low temperatures - 2014&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line"><span class="comment"># 显示最高最低气温图例</span></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/55.png" alt="png"></p><h4 id="给图表区域着色">给图表区域着色</h4><p><code>plt.fill_between(x, y1, y2, where=None, **kwargs)</code> 在两个数据序列之间填充颜色</p><ul><li><code>y1</code>：y 轴的下界数据点。</li><li><code>y2</code>：y 轴的上界数据点。</li><li><code>where</code>：一个布尔数组，指定在哪些位置填充颜色</li><li><code>facecolor</code>: 设置填充区域的颜色</li><li><code>alpha</code>: 设置透明度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中获取日期、最高气温和最低气温</span></span><br><span class="line">file_name = <span class="string">&#x27;sitka_weather_2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    dates, highs, lows = [], [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:        </span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>], <span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line">        dates.append(current_date) </span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line">        low = <span class="built_in">int</span>(row[<span class="number">3</span>])</span><br><span class="line">        lows.append(low)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;the hottest temperature&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.plot(dates, lows, c=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;the coldest tempurature&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 给图表区域着色</span></span><br><span class="line">plt.fill_between(dates, lows, highs, facecolor=<span class="string">&#x27;green&#x27;</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Daily high and low temperatures - 2014&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/56.png" alt="png"></p><h4 id="错误检查">错误检查</h4><p>我们应该能够使用有关任何地方的天气数据来运行highs_lows.py中的代码，但有些气象站会偶尔出现故障，未能收集部分或全部其应该收集的数据。缺失数据可能会引发异常，如果不妥善地处理，还可能导致程序崩溃。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中获取日期、最高气温和最低气温</span></span><br><span class="line">file_name = <span class="string">&#x27;death_valley_2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    dates, highs, lows = [], [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:        </span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>], <span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line">        dates.append(current_date) </span><br><span class="line">        high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">        highs.append(high)</span><br><span class="line">        low = <span class="built_in">int</span>(row[<span class="number">3</span>])</span><br><span class="line">        lows.append(low)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;the hottest temperature&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.plot(dates, lows, c=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;the coldest tempurature&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 给图表区域着色</span></span><br><span class="line">plt.fill_between(dates, lows, highs, facecolor=<span class="string">&#x27;green&#x27;</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Daily high and low temperatures - 2014&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)Cell In[42], line 15     13 current_date = datetime.strptime(row[0], &quot;%Y-%m-%d&quot;)      14 dates.append(current_date) ---&gt; 15 high = int(row[1])     16 highs.append(high)     17 low = int(row[3])ValueError: invalid literal for int() with base 10: ''</code></pre><p>该traceback指出，Python无法处理其中一天的最高气温，因为它无法将空字符串（’ '）转换为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中获取日期、最高气温和最低气温</span></span><br><span class="line">file_name = <span class="string">&#x27;death_valley_2014.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    heaeder_row = <span class="built_in">next</span>(reader)</span><br><span class="line"></span><br><span class="line">    dates, highs, lows = [], [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_date = datetime.strptime(row[<span class="number">0</span>], <span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line">            high = <span class="built_in">int</span>(row[<span class="number">1</span>])</span><br><span class="line">            low = <span class="built_in">int</span>(row[<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(current_date, <span class="string">&#x27;missing data&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            highs.append(high)</span><br><span class="line">            dates.append(current_date)</span><br><span class="line">            lows.append(low)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.plot(dates, highs, c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;the hottest temperature&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.plot(dates, lows, c=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;the coldest tempurature&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 给图表区域着色</span></span><br><span class="line">plt.fill_between(dates, lows, highs, facecolor=<span class="string">&#x27;green&#x27;</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">title = <span class="string">&quot;Daily high and low temperatures - 2014\nDeath Valley, CA&quot;</span> </span><br><span class="line">plt.title(title, fontsize=<span class="number">20</span>) </span><br><span class="line">plt.xlabel(<span class="string">&#x27;&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature (F)&quot;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>2014-02-16 00:00:00 missing data</code></pre><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/56.png" alt="png"></p><h3 id="制作世界人口地图：JSON格式">制作世界人口地图：JSON格式</h3><h4 id="提取相关的数据">提取相关的数据</h4><p><code>json.load()</code> 用于从文件中读取 JSON 数据，并将其解析为 Python 对象（通常是字典或列表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据加载到一个列表中</span></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每个国家2010年的人口数量</span></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = pop_dict[<span class="string">&#x27;Value&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(country_name + <span class="string">&quot;: &quot;</span> + population)</span><br></pre></td></tr></table></figure><pre><code>Arab World: 357868000Caribbean small states: 6880000East Asia &amp; Pacific (all income levels): 2201536674-- __snip__ --Yemen, Rep.: 24053000Zambia: 12927000Zimbabwe: 12571000</code></pre><h4 id="将字符串转换为数字值">将字符串转换为数字值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据加载到一个列表中</span></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每个国家2010年的人口数量</span></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        <span class="comment"># 函数float()将字符串转换为小数，而函数int()丢弃小数部分，返回一个整数</span></span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        <span class="built_in">print</span>(country_name + <span class="string">&quot;: &quot;</span> + <span class="built_in">str</span>(population))</span><br></pre></td></tr></table></figure><pre><code>Arab World: 357868000Caribbean small states: 6880000East Asia &amp; Pacific (all income levels): 2201536674-- __snip__ --Yemen, Rep.: 24053000Zambia: 12927000Zimbabwe: 12571000</code></pre><h4 id="获取两个字母的国别码">获取两个字母的国别码</h4><p>浅浅的使用COUNTRIES来识别国别码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygal_maps_world.i18n <span class="keyword">import</span> COUNTRIES</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> country_code <span class="keyword">in</span> <span class="built_in">sorted</span>(COUNTRIES.keys()): </span><br><span class="line">    <span class="built_in">print</span>(country_code, COUNTRIES[country_code]) </span><br></pre></td></tr></table></figure><pre><code>ad Andorraae United Arab Emiratesaf Afghanistan-- __snip__ --zm Zambiazw Zimbabwe</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygal_maps_world.i18n <span class="keyword">import</span> COUNTRIES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_country_code</span>(<span class="params">country_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据指定的国家，返回Pygal使用的两个字母的国别码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> code, name <span class="keyword">in</span> COUNTRIES.items():</span><br><span class="line">        <span class="keyword">if</span> name == country_name:</span><br><span class="line">            <span class="keyword">return</span> code</span><br><span class="line">    <span class="comment"># 如果没有找到指定的国家，就返回None</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(get_country_code(<span class="string">&#x27;Andorra&#x27;</span>)) </span><br><span class="line"><span class="built_in">print</span>(get_country_code(<span class="string">&#x27;United Arab Emirates&#x27;</span>)) </span><br><span class="line"><span class="built_in">print</span>(get_country_code(<span class="string">&#x27;Afghanistan&#x27;</span>)) </span><br></pre></td></tr></table></figure><pre><code>adaeaf</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据加载到一个列表中</span></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每个国家2010年的人口数量</span></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            <span class="built_in">print</span>(code + <span class="string">&quot;: &quot;</span> + <span class="built_in">str</span>(population))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ERROR - &#x27;</span> + country_name) </span><br></pre></td></tr></table></figure><pre><code>ERROR - Arab WorldERROR - Caribbean small states-- __snip__ --ERROR - Yemen, Rep.zm: 12927000zw: 12571000</code></pre><h4 id="制作世界地图">制作世界地图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">wm = pygal_maps_world.maps.World()</span><br><span class="line">wm.title = <span class="string">&#x27;North, Central, and South America&#x27;</span></span><br><span class="line"></span><br><span class="line">wm.add(<span class="string">&#x27;North America&#x27;</span>, [<span class="string">&#x27;ca&#x27;</span>, <span class="string">&#x27;mx&#x27;</span>, <span class="string">&#x27;us&#x27;</span>])</span><br><span class="line">wm.add(<span class="string">&#x27;Central America&#x27;</span>, [<span class="string">&#x27;bz&#x27;</span>, <span class="string">&#x27;cr&#x27;</span>, <span class="string">&#x27;gt&#x27;</span>, <span class="string">&#x27;hn&#x27;</span>, <span class="string">&#x27;ni&#x27;</span>, <span class="string">&#x27;pa&#x27;</span>, <span class="string">&#x27;sv&#x27;</span>])</span><br><span class="line">wm.add(<span class="string">&#x27;South America&#x27;</span>, [<span class="string">&#x27;ar&#x27;</span>, <span class="string">&#x27;bo&#x27;</span>, <span class="string">&#x27;br&#x27;</span>, <span class="string">&#x27;cl&#x27;</span>, <span class="string">&#x27;co&#x27;</span>, <span class="string">&#x27;ec&#x27;</span>, <span class="string">&#x27;gf&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;gy&#x27;</span>, <span class="string">&#x27;pe&#x27;</span>, <span class="string">&#x27;py&#x27;</span>, <span class="string">&#x27;sr&#x27;</span>, <span class="string">&#x27;uy&#x27;</span>, <span class="string">&#x27;ve&#x27;</span>])</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">&#x27;americas.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;americas.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/57.svg" alt="svg"></p><h4 id="在世界地图上呈现数字数据">在世界地图上呈现数字数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">wm = pygal_maps_world.maps.World() </span><br><span class="line">wm.title = <span class="string">&#x27;Populations of Countries in North America&#x27;</span></span><br><span class="line">wm.add(<span class="string">&#x27;North America&#x27;</span>, &#123;<span class="string">&#x27;ca&#x27;</span>: <span class="number">34126000</span>, <span class="string">&#x27;us&#x27;</span>: <span class="number">309349000</span>, <span class="string">&#x27;mx&#x27;</span>: <span class="number">113423000</span>&#125;) </span><br><span class="line">wm.render_to_file(<span class="string">&#x27;na_populations.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;na_populations.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/58.svg" alt="svg"></p><h4 id="绘制完整的世界人口地图">绘制完整的世界人口地图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line">cc_populations = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            cc_populations[code] = population</span><br><span class="line"></span><br><span class="line">wm = pygal_maps_world.maps.World()</span><br><span class="line">wm.title = <span class="string">&#x27;World Population in 2010, by Country&#x27;</span></span><br><span class="line">wm.add(<span class="string">&#x27;2010&#x27;</span>, cc_populations)</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/59.svg" alt="svg"></p><h4 id="根据人口数量将国家分组">根据人口数量将国家分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line">cc_populations = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            cc_populations[code] = population</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据人口数量将所有的国家分成三组</span></span><br><span class="line">cc_pops_1, cc_pops_2, cc_pops_3 = &#123;&#125;, &#123;&#125;, &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> cc, pop <span class="keyword">in</span> cc_populations.items():</span><br><span class="line">    <span class="keyword">if</span> pop &lt; <span class="number">10000000</span>:</span><br><span class="line">        cc_pops_1[cc] = pop</span><br><span class="line">    <span class="keyword">elif</span> pop &lt; <span class="number">100000000</span>:</span><br><span class="line">        cc_pops_2[cc] = pop</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cc_pops_3[cc] = pop</span><br><span class="line"></span><br><span class="line">wm = pygal_maps_world.maps.World()</span><br><span class="line">wm.title = <span class="string">&#x27;World Population in 2010, by Country&#x27;</span></span><br><span class="line">wm.add(<span class="string">&#x27;0-10m&#x27;</span>, cc_pops_1)</span><br><span class="line">wm.add(<span class="string">&#x27;10m-1bn&#x27;</span>, cc_pops_2)</span><br><span class="line">wm.add(<span class="string">&#x27;&gt;1bn&#x27;</span>, cc_pops_3)</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/60.svg" alt="svg"></p><h4 id="使用Pygal设置世界地图的样式">使用Pygal设置世界地图的样式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> RotateStyle</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line">cc_populations = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            cc_populations[code] = population</span><br><span class="line"></span><br><span class="line">cc_pops_1, cc_pops_2, cc_pops_3 = &#123;&#125;, &#123;&#125;, &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> cc, pop <span class="keyword">in</span> cc_populations.items():</span><br><span class="line">    <span class="keyword">if</span> pop &lt; <span class="number">10000000</span>:</span><br><span class="line">        cc_pops_1[cc] = pop</span><br><span class="line">    <span class="keyword">elif</span> pop &lt; <span class="number">100000000</span>:</span><br><span class="line">        cc_pops_2[cc] = pop</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cc_pops_3[cc] = pop</span><br><span class="line"></span><br><span class="line">wm_style = RotateStyle(<span class="string">&#x27;#336699&#x27;</span>)</span><br><span class="line">wm = pygal_maps_world.maps.World(style = wm_style)</span><br><span class="line">wm.title = <span class="string">&#x27;World Population in 2010, by Country&#x27;</span></span><br><span class="line">wm.add(<span class="string">&#x27;0-10m&#x27;</span>, cc_pops_1)</span><br><span class="line">wm.add(<span class="string">&#x27;10m-1bn&#x27;</span>, cc_pops_2)</span><br><span class="line">wm.add(<span class="string">&#x27;&gt;1bn&#x27;</span>, cc_pops_3)</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/61.svg" alt="svg"></p><h4 id="加亮颜色主题">加亮颜色主题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line">cc_populations = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            cc_populations[code] = population</span><br><span class="line"></span><br><span class="line">cc_pops_1, cc_pops_2, cc_pops_3 = &#123;&#125;, &#123;&#125;, &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> cc, pop <span class="keyword">in</span> cc_populations.items():</span><br><span class="line">    <span class="keyword">if</span> pop &lt; <span class="number">10000000</span>:</span><br><span class="line">        cc_pops_1[cc] = pop</span><br><span class="line">    <span class="keyword">elif</span> pop &lt; <span class="number">100000000</span>:</span><br><span class="line">        cc_pops_2[cc] = pop</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cc_pops_3[cc] = pop</span><br><span class="line"></span><br><span class="line">wm = pygal_maps_world.maps.World(style = LightColorizedStyle)</span><br><span class="line">wm.title = <span class="string">&#x27;World Population in 2010, by Country&#x27;</span></span><br><span class="line">wm.add(<span class="string">&#x27;0-10m&#x27;</span>, cc_pops_1)</span><br><span class="line">wm.add(<span class="string">&#x27;10m-1bn&#x27;</span>, cc_pops_2)</span><br><span class="line">wm.add(<span class="string">&#x27;&gt;1bn&#x27;</span>, cc_pops_3)</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/61.svg" alt="svg"></p><h4 id="改变颜色和加亮颜色主题结合">改变颜色和加亮颜色主题结合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pygal_maps_world.maps</span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle, RotateStyle</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;population_data.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line">cc_populations = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">&#x27;Year&#x27;</span>] == <span class="string">&#x27;2010&#x27;</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">&#x27;Country Name&#x27;</span>]</span><br><span class="line">        population = <span class="built_in">int</span>(<span class="built_in">float</span>(pop_dict[<span class="string">&#x27;Value&#x27;</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            cc_populations[code] = population</span><br><span class="line"></span><br><span class="line">cc_pops_1, cc_pops_2, cc_pops_3 = &#123;&#125;, &#123;&#125;, &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> cc, pop <span class="keyword">in</span> cc_populations.items():</span><br><span class="line">    <span class="keyword">if</span> pop &lt; <span class="number">10000000</span>:</span><br><span class="line">        cc_pops_1[cc] = pop</span><br><span class="line">    <span class="keyword">elif</span> pop &lt; <span class="number">100000000</span>:</span><br><span class="line">        cc_pops_2[cc] = pop</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cc_pops_3[cc] = pop</span><br><span class="line"></span><br><span class="line">wm_style = RotateStyle(<span class="string">&#x27;#336699&#x27;</span>, base_style=LightColorizedStyle)</span><br><span class="line">wm = pygal_maps_world.maps.World(style = wm_style)</span><br><span class="line">wm.title = <span class="string">&#x27;World Population in 2010, by Country&#x27;</span></span><br><span class="line">wm.add(<span class="string">&#x27;0-10m&#x27;</span>, cc_pops_1)</span><br><span class="line">wm.add(<span class="string">&#x27;10m-1bn&#x27;</span>, cc_pops_2)</span><br><span class="line">wm.add(<span class="string">&#x27;&gt;1bn&#x27;</span>, cc_pops_3)</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br><span class="line">SVG(<span class="string">&#x27;world_population.svg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/62.svg" alt="svg"></p><p>在本章中，你学习了：如何使用网上的数据集；如何处理CSV和JSON文件，以及如何提取你感兴趣的数据；如何使用matplotlib来处理以往的天气数据，包括如何使用模块datetime，以及如何在同一个图表中绘制多个数据系列；如何使用Pygal绘制呈现各国数据的世界地图，以及如何设置Pygal地图和图表的样式。<br>有了使用CSV和JSON文件的经验后，你将能够处理几乎任何要分析的数据。大多数在线数据集都可以以这两种格式中的一种或两种下载。学习使用这两种格式为学习使用其他格式的数据做好了准备。</p>]]></content>
    
    
    <summary type="html">基础九</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--数据可视化之生成数据</title>
    <link href="https://agoni66.github.io/posts/1000157.html"/>
    <id>https://agoni66.github.io/posts/1000157.html</id>
    <published>2025-02-10T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:24.512Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a> ⇦ 当前位置🚀</p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h3 id="折线图">折线图</h3><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/47.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">input_value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">plt.plot(input_value, squares, linewidth=<span class="number">5</span>) <span class="comment"># 修改线条粗细</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Square Numbers&quot;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Value&quot;</span>, fontsize=<span class="number">14</span>) </span><br><span class="line">plt.ylabel(<span class="string">&quot;Square of Value&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, labelsize=<span class="number">14</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><code>plt.plot(input_value, squares, linewidth=5)</code> 绘制折线图<ul><li><code>input_value</code> x轴数据</li><li><code>squares</code> y轴数据</li><li><code>linestyle</code> 线条种类</li><li><code>linewidth</code> 线条粗细</li><li><code>color</code> 线条颜色</li></ul></li><li><code>plt.title()</code> 设置标题<ul><li><code>fontsize</code> 字体大小</li><li><code>fontstyle</code> 字体样式<ul><li>normal 默认</li><li>italic 斜体</li><li>oblique 倾斜</li></ul></li><li><code>fontweight</code> 字体粗细<ul><li>normal 默认</li><li>light 细</li><li>bold 粗</li></ul></li><li><code>color</code> 字体颜色</li><li><code>fontfamily</code> 字体家族<ul><li>serif 有衬线体（像宋体）</li><li>sans-serif 无衬线体（像黑体）</li><li>cursive 花体字（新奇美观一点）</li></ul></li></ul></li><li><code>plt.xlabel()</code> 设置横坐标标签</li><li><code>plt.ylabel()</code> 设置纵坐标标签</li><li><code>plt.tick_params(axis= ,labelsize=)</code> 设置横纵坐标刻度大小<ul><li><code>axis</code> 指定轴<ul><li>‘x’</li><li>‘y’</li><li>‘both’ 默认</li></ul></li><li><code>which</code> 刻度类型<ul><li>major 主刻度 默认</li><li>minor 次刻度</li><li>both 全部</li></ul></li><li><code>direction</code> 刻度方向 in out inout</li><li><code>width</code> 刻度宽度</li><li><code>length</code> 刻度长度</li></ul></li><li><code>plt.grid(True)</code> 添加网线格</li></ul><hr><h3 id="散点图">散点图</h3><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/48.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"></span><br><span class="line">x_values = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1001</span>))</span><br><span class="line">y_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line"></span><br><span class="line">plt.scatter(x_values, y_values, c = y_values, cmap=plt.cm.Blues, edgecolor=<span class="string">&#x27;none&#x27;</span>, s=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Square Numbers&quot;</span>, fontsize=<span class="number">24</span>, fontfamily=<span class="string">&#x27;cursive&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Value&quot;</span>, fontsize=<span class="number">14</span>) </span><br><span class="line">plt.ylabel(<span class="string">&quot;Square of Value&quot;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;both&#x27;</span>,labelsize=<span class="number">14</span>, direction=<span class="string">&#x27;inout&#x27;</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">1100</span>, <span class="number">0</span>, <span class="number">1100000</span>]) </span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><code>plt.scatter</code><ul><li><code>c</code> 指定散点颜色（如果设置颜色映射可以设为 y 值）</li><li><code>s</code> 指定散点大小</li><li><code>cmap</code> 颜色映射 <code>cmap=plt.cm.Blues</code> 蓝色渐变</li></ul><ol><li><strong>Sequential</strong>: 渐变色映射，通常用于表示有序数据，颜色从浅到深或从深到浅。<ul><li><code>'viridis'</code>, <code>'plasma'</code>, <code>'inferno'</code>, <code>'magma'</code>, <code>'cividis'</code></li><li><code>'Greys'</code>, <code>'Purples'</code>, <code>'Blues'</code>, <code>'Greens'</code>, <code>'Oranges'</code>, <code>'Reds'</code></li><li><code>'YlOrBr'</code>, <code>'YlOrRd'</code>, <code>'OrRd'</code>, <code>'PuRd'</code>, <code>'RdPu'</code>, <code>'BuPu'</code></li><li><code>'GnBu'</code>, <code>'PuBu'</code>, <code>'YlGnBu'</code>, <code>'PuBuGn'</code>, <code>'BuGn'</code>, <code>'YlGn'</code></li></ul></li><li><strong>Diverging</strong>: 发散色映射，通常用于表示具有明显中间值（如零）的数据，颜色从中间向两端发散。<ul><li><code>'PiYG'</code>, <code>'PRGn'</code>, <code>'BrBG'</code>, <code>'PuOr'</code>, <code>'RdGy'</code>, <code>'RdBu'</code></li><li><code>'RdYlBu'</code>, <code>'RdYlGn'</code>, <code>'Spectral'</code>, <code>'coolwarm'</code>, <code>'bwr'</code>, <code>'seismic'</code></li></ul></li><li><strong>Cyclic</strong>: 循环色映射，通常用于表示周期性数据，颜色在两端循环。<ul><li><code>'twilight'</code>, <code>'twilight_shifted'</code>, <code>'hsv'</code></li></ul></li><li><strong>Qualitative</strong>: 定性色映射，通常用于表示分类数据，颜色之间没有顺序关系。<ul><li><code>'Pastel1'</code>, <code>'Pastel2'</code>, <code>'Paired'</code>, <code>'Accent'</code></li><li><code>'Dark2'</code>, <code>'Set1'</code>, <code>'Set2'</code>, <code>'Set3'</code></li><li><code>'tab10'</code>, <code>'tab20'</code>, <code>'tab20b'</code>, <code>'tab20c'</code></li></ul></li><li><strong>Miscellaneous</strong>: 其他类型的色映射。<ul><li><code>'flag'</code>, <code>'prism'</code>, <code>'ocean'</code>, <code>'gist_earth'</code>, <code>'terrain'</code>, <code>'gist_stern'</code></li><li><code>'gnuplot'</code>, <code>'gnuplot2'</code>, <code>'CMRmap'</code>, <code>'cubehelix'</code>, <code>'brg'</code>, <code>'gist_rainbow'</code></li><li><code>'rainbow'</code>, <code>'jet'</code>, <code>'nipy_spectral'</code>, <code>'gist_ncar'</code></li></ul></li></ol></li><li><code>plt.axis([0, 1100, 0, 1100000])</code> 指定坐标轴范围，接收列表参数</li><li><code>plt.savefig('squares_plot.png', bbox_inches='tight')</code> 保存为图片<ul><li>前一个指定图片名称</li><li>后一个指定将图表多余的空白区域裁剪掉<ul><li>tight 自动调整边界框，确保内容完整</li><li>standard 使用默认的边界框，可能会导致部分内容被裁剪</li><li>None 使用当前的边界框设置</li></ul></li></ul></li></ul><hr><h3 id="随机漫步">随机漫步</h3><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/49.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomWalk</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化随机漫步的属性&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_points=<span class="number">5000</span></span>):</span><br><span class="line">        self.num_points = num_points</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 所有随机漫步都始于（0,0）</span></span><br><span class="line">        self.x_values = [<span class="number">0</span>]</span><br><span class="line">        self.y_values = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_walk</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算随机漫步包含的所有点&quot;&quot;&quot;</span> </span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 不断漫步，直到列表达到指定的长度</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(self.x_values) &lt; self.num_points: </span><br><span class="line">            <span class="comment"># 决定前进方向以及沿这个方向前进的距离</span></span><br><span class="line">            x_direction = choice([<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line">            x_distance = choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">            x_step = x_direction * x_distance</span><br><span class="line">            </span><br><span class="line">            y_direction = choice([<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line">            y_distance = choice([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">            y_step = y_direction * y_distance</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 拒绝原地踏步</span></span><br><span class="line">            <span class="keyword">if</span> x_step == <span class="number">0</span> <span class="keyword">and</span> y_step == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算下一个点的x和y值，始终提取最新的位置</span></span><br><span class="line">            next_x = self.x_values[-<span class="number">1</span>] + x_step</span><br><span class="line">            next_y = self.y_values[-<span class="number">1</span>] + y_step</span><br><span class="line">            </span><br><span class="line">            self.x_values.append(next_x)</span><br><span class="line">            self.y_values.append(next_y)</span><br><span class="line"></span><br><span class="line">rw = RandomWalk(<span class="number">50000</span>)</span><br><span class="line">rw.fill_walk()</span><br><span class="line">point_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(rw.num_points))</span><br><span class="line">plt.scatter(rw.x_values, rw.y_values, s = <span class="number">1</span>, c = point_numbers, cmap=<span class="string">&quot;Blues&quot;</span>, edgecolors=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="number">0</span>, <span class="number">0</span>, c=<span class="string">&#x27;green&#x27;</span>, edgecolors=<span class="string">&#x27;none&#x27;</span>, s=<span class="number">100</span>)</span><br><span class="line">plt.scatter(rw.x_values[-<span class="number">1</span>], rw.y_values[-<span class="number">1</span>], c=<span class="string">&#x27;red&#x27;</span>, edgecolors=<span class="string">&#x27;none&#x27;</span>, s=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.figure(dpi=<span class="number">2000</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><code>plt.figure(dpi=, figsize=)</code><ul><li><code>dpi</code> 分辨率</li><li><code>figsize</code> 窗口尺寸</li></ul></li><li><code>plt.axis(&quot;off&quot;)</code> 隐藏所有的坐标轴</li></ul><hr><h3 id="直方图">直方图</h3><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/50.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> SVG</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Die</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;表示一个骰子的类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_sides=<span class="number">6</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;骰子默认为6面&quot;&quot;&quot;</span></span><br><span class="line">        self.num_sides = num_sides</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回一个位于1和骰子面数之间的随机值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> randint(<span class="number">1</span>, self.num_sides)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个D6骰子</span></span><br><span class="line">die_1 = Die()</span><br><span class="line">die_2 = Die()</span><br><span class="line">die_3 = Die()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 掷骰子多次，并将结果存储到一个列表中</span></span><br><span class="line">results = [die_1.roll() + die_2.roll() + die_3.roll() <span class="keyword">for</span> roll_num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析结果</span></span><br><span class="line">max_result = die_1.num_sides + die_2.num_sides + die_3.num_sides</span><br><span class="line">frequencies = [results.count(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, max_result+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">hist = pygal.Bar()</span><br><span class="line"></span><br><span class="line">hist.title = <span class="string">&quot;Results of rolling three D6 1000 times.&quot;</span></span><br><span class="line">hist.x_labels = [<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">19</span>)]</span><br><span class="line">hist.x_title = <span class="string">&quot;Result&quot;</span></span><br><span class="line">hist.y_title = <span class="string">&quot;Frequency of Result&quot;</span></span><br><span class="line"></span><br><span class="line">hist.add(<span class="string">&#x27;D6+D6+D6&#x27;</span>, frequencies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图表为 SVG 文件</span></span><br><span class="line">hist.render_to_file(<span class="string">&quot;die_visual.svg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Jupyter Notebook 中显示 SVG 文件</span></span><br><span class="line">SVG(<span class="string">&quot;die_visual.svg&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>pygal.Bar()</code> 生成条形图<ul><li>title 设置标题</li><li>x_labels 设置x轴刻度</li><li>x_title 设置x轴标题</li><li>y_title 设置y轴标题</li></ul></li><li><code>.add(title, values)</code><ul><li>title 图例数据的名称</li><li>values 数据的值（通常是列表）</li></ul></li><li><code>IPython.display.SVG()</code> IPython（Jupyter Notebook）中用于在笔记本中直接显示 SVG 图像的工具</li></ul>]]></content>
    
    
    <summary type="html">基础八</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--外星人入侵小游戏</title>
    <link href="https://agoni66.github.io/posts/1000156.html"/>
    <id>https://agoni66.github.io/posts/1000156.html</id>
    <published>2025-02-01T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:43.495Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a> ⇦ 当前位置🚀</p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h2 id="代码解释">代码解释</h2><ul><li><code>pygame.init()</code> 初始化背景设置</li><li><code>pygame.display.set_mode()</code> 创建显示窗口</li><li><code>pygame.display.set_caption(str)</code> 创建显示标题</li><li><code>pygame.event.get()</code> 访问Pygame检测到的事件（鼠标、键盘）</li><li><code>pygame.display.flip()</code> 更新整个屏幕显示</li><li><code>pygame.image.load(file_path)</code> 加载图像文件</li><li><code>get_rect()</code> 获取矩形对象属性<ul><li><code>x</code> 和 <code>y</code>：矩形左上角的坐标</li><li><code>width</code> 和 <code>height</code>：矩形的宽度和高度</li><li><code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>：矩形的边界坐标</li><li><code>center</code>、<code>centerx</code>、<code>centery</code>：矩形的中心坐标</li></ul></li><li><code>pygame.Rect(0, 0, width, height)</code> 在(0,0)处创建矩阵</li><li><code>destination_surface.blit(source_surface, position)</code> 将一个图像绘制到屏幕上<ul><li><code>destination_surface</code> 目标显示</li><li><code>source_surface</code> 要绘制的图像</li><li><code>position</code> 位置</li></ul></li><li><code>pygame.key.stop_text_input()</code> 字母键无法使用时，关闭输入法输入文本</li><li><code>pygame.mixer.music.load('path/to/your/music/file.mp3')</code> 加载音乐文件</li><li><code>pygame.mixer.music.play()</code> 播放音乐</li><li><code>pygame.mixer.music.pause()</code> 暂停音乐</li><li><code>pygame.mixer.music.unpause()</code> 继续播放音乐</li><li><code>pygame.mixer.music.stop()</code> 停止音乐</li><li><code>pygame.mixer.music.set_volume(0.5)</code> 设置音量</li><li><code>pygame.event.get()</code> 获取所有键盘和鼠标事件</li><li><code>pygame.KEYDOWN</code> Pygame 检测到按下键盘事件</li><li><code>pygame.KEYDOWN</code> Pygame 检测到抬起键盘事件</li><li><code>pygame.K_RIGHT</code> Pygame 检测到右箭头事件</li><li><code>pygame.K_LEFT</code> Pygame 检测到左箭头事件</li><li><code>Group.add()</code> 向组中添加个例</li><li><code>Group.delete()</code> 向组中删除个例</li></ul><hr><h2 id="代码展示">代码展示</h2><h3 id="alien-invasion-py-主体程序"><strong>alien_invasion.py</strong> 主体程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:alien_invasion.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"><span class="keyword">from</span> button <span class="keyword">import</span> Button</span><br><span class="line"><span class="keyword">from</span> game_stats <span class="keyword">import</span> GameStats</span><br><span class="line"><span class="keyword">from</span> scoreboard <span class="keyword">import</span> Scoreboard</span><br><span class="line"><span class="keyword">import</span> game_function <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_game</span>():</span><br><span class="line">    <span class="comment"># 初始化pygame、设置和屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    ai_settings = Settings()</span><br><span class="line">    screen = pygame.display.set_mode((ai_settings.screen_width, ai_settings.screen_height))</span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;Alien Invasion&quot;</span>)</span><br><span class="line">    pygame.mixer.music.load(<span class="string">&#x27;KNOW ABOUT ME.mp3&#x27;</span>)  <span class="comment"># 替换为你的音乐文件路径</span></span><br><span class="line">    pygame.mixer.music.play()</span><br><span class="line">    pygame.mixer.music.set_volume(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Play按钮</span></span><br><span class="line">    play_button = Button(ai_settings, screen, <span class="string">&quot;Play&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建存储游戏统计信息的实例，并创建记分牌</span></span><br><span class="line">    stats = GameStats(ai_settings)</span><br><span class="line">    sb = Scoreboard(ai_settings, screen, stats)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一艘飞船</span></span><br><span class="line">    ship = Ship(ai_settings, screen)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个用于存储子弹的编组</span></span><br><span class="line">    bullets = Group()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个外星人编组</span></span><br><span class="line">    aliens = Group()</span><br><span class="line">    gf.create_fleet(ai_settings, screen, ship, aliens)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 停止输入法输入</span></span><br><span class="line">    pygame.key.stop_text_input()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(ai_settings, screen, stats, sb, play_button, ship, aliens, bullets)</span><br><span class="line">        <span class="keyword">if</span> stats.game_active:</span><br><span class="line">            ship.update()</span><br><span class="line">            gf.update_bullets(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line">            gf.update_aliens(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line">        gf.update_screen(ai_settings, screen, stats, sb, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><h3 id="game-function-py-游戏功能"><strong>game_function.py</strong> 游戏功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:game_function.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> alien <span class="keyword">import</span> Alien</span><br><span class="line"><span class="keyword">from</span> bullet <span class="keyword">import</span> Bullet</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keydown_events</span>(<span class="params">event, ai_settings, screen, ship, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应键盘按键&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">        ship.moving_up = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">        ship.moving_down = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        fire_bullet(ai_settings, screen, ship, bullets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keyup_events</span>(<span class="params">event, ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应键盘松开&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">        ship.moving_up = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">        ship.moving_down = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_events</span>(<span class="params">ai_settings, screen, stats, sb, play_button, ship, aliens, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键和鼠标事件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="built_in">print</span>(event.key)</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_ESCAPE <span class="keyword">or</span> event.key == pygame.K_q:</span><br><span class="line">                <span class="built_in">print</span>(event.key)</span><br><span class="line">                sys.exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                check_keydown_events(event, ai_settings, screen, ship, bullets)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYUP:</span><br><span class="line">            check_keyup_events(event, ship)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_x, mouse_y = pygame.mouse.get_pos()</span><br><span class="line">            check_play_button(ai_settings, screen, stats, sb, play_button, ship, aliens, bullets, mouse_x, mouse_y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_play_button</span>(<span class="params">ai_settings, screen, stats, sb, play_button, ship, aliens, bullets, mouse_x, mouse_y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在玩家单击Play按钮时开始新游戏&quot;&quot;&quot;</span></span><br><span class="line">    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)</span><br><span class="line">    <span class="keyword">if</span> button_clicked <span class="keyword">and</span> <span class="keyword">not</span> stats.game_active:</span><br><span class="line">        <span class="comment"># 重置游戏设置</span></span><br><span class="line">        ai_settings.initialize_dynamic_settings()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 隐藏光标</span></span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重置游戏统计信息</span></span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.game_active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重置记分牌图像</span></span><br><span class="line">        sb.prep_score()</span><br><span class="line">        sb.prep_high_score()</span><br><span class="line">        sb.prep_level()</span><br><span class="line">        sb.prep_ships()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清空外星人列表和子弹列表</span></span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一群新的外星人，并让飞船居中</span></span><br><span class="line">        create_fleet(ai_settings, screen, ship, aliens)</span><br><span class="line">        ship.center_ship()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_screen</span>(<span class="params">ai_settings, screen, stats, sb, ship, aliens, bullets, play_button</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;更新屏幕上的图像，并切换到新屏幕&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每次循环时都重绘屏幕</span></span><br><span class="line">    screen.fill(ai_settings.bg_color)</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.sprites():</span><br><span class="line">        bullet.draw_bullet()</span><br><span class="line">    ship.blitme()</span><br><span class="line">    aliens.draw(screen)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示得分</span></span><br><span class="line">    sb.show_score()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果游戏处于非活动状态，就绘制Play按钮</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stats.game_active:</span><br><span class="line">        play_button.draw_button()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fire_bullet</span>(<span class="params">ai_settings, screen, ship, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建一颗子弹，并将其加入到编组bullets中</span></span><br><span class="line"><span class="string">    如果还没有到达限制，就发射一颗子弹</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bullets) &lt; ai_settings.bullets_allowed:</span><br><span class="line">        new_bullet = Bullet(ai_settings, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)  <span class="comment"># bullets = Group()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_number_aliens_x</span>(<span class="params">ai_settings, alien_width</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算每行可容纳多少个外星人&quot;&quot;&quot;</span></span><br><span class="line">    available_space_x = ai_settings.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = <span class="built_in">int</span>(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line">    <span class="keyword">return</span> number_aliens_x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_number_rows</span>(<span class="params">ai_settings, ship_height, alien_height</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算屏幕可容纳多少行外星人&quot;&quot;&quot;</span></span><br><span class="line">    available_space_y = (ai_settings.screen_height - (<span class="number">3</span> * alien_height) - ship_height)</span><br><span class="line">    number_rows = <span class="built_in">int</span>(available_space_y / (<span class="number">2</span> * alien_height))</span><br><span class="line">    <span class="keyword">return</span> number_rows</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_alien</span>(<span class="params">ai_settings, screen, aliens, alien_number, row_number</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个外星人并将其放在当前行&quot;&quot;&quot;</span></span><br><span class="line">    alien = Alien(ai_settings, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    alien.rect.y = alien.rect.height + <span class="number">2</span> * alien.rect.height * row_number</span><br><span class="line">    aliens.add(alien)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_fleet</span>(<span class="params">ai_settings, screen, ship, aliens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建外星人群&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少个外星人</span></span><br><span class="line">    <span class="comment"># 外星人间距为外星人宽度</span></span><br><span class="line">    alien = Alien(ai_settings, screen)</span><br><span class="line">    number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width)</span><br><span class="line">    number_rows = get_number_rows(ai_settings, ship.rect.height, alien.rect.height)</span><br><span class="line">    <span class="comment"># print(number_rows)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建外星人群</span></span><br><span class="line">    <span class="keyword">for</span> row_number <span class="keyword">in</span> <span class="built_in">range</span>(number_rows):</span><br><span class="line">        <span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(number_aliens_x):</span><br><span class="line">            <span class="comment"># 创建一个外星人并将其加入当前行</span></span><br><span class="line">            create_alien(ai_settings, screen, aliens, alien_number, row_number)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_fleet_edges</span>(<span class="params">ai_settings, aliens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有外星人到达边缘时采取相应的措施&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.check_edges():</span><br><span class="line">            change_fleet_direction(ai_settings, aliens)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_fleet_direction</span>(<span class="params">ai_settings, aliens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将整群外星人下移，并改变它们的方向&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        alien.rect.y += ai_settings.fleet_drop_speed</span><br><span class="line">    ai_settings.fleet_direction *= -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_aliens</span>(<span class="params">ai_settings, screen, stats, sb, ship, aliens, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查是否有外星人位于屏幕边缘，并更新整群外星人的位置</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    check_fleet_edges(ai_settings, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测外星人和飞船之间的碰撞</span></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens):</span><br><span class="line">        ship_hit(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ship hit!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    check_aliens_bottom(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_bullets</span>(<span class="params">ai_settings, screen, stats, sb, ship, aliens, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;更新子弹的位置，并删除已消失的子弹&quot;&quot;&quot;</span></span><br><span class="line">    check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line">    <span class="comment"># 更新子弹的位置</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="comment"># 删除已消失的子弹</span></span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">    check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_bullet_alien_collisions</span>(<span class="params">ai_settings, screen, stats, sb, ship, aliens, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应子弹和外星人的碰撞&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 删除发生碰撞的子弹和外星人</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">        <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.values():</span><br><span class="line">            stats.score += ai_settings.alien_points * <span class="built_in">len</span>(aliens)</span><br><span class="line">            sb.prep_score()</span><br><span class="line">        check_high_score(stats, sb)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(aliens) == <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 删除现有的所有子弹，并创建一个新的外星人群</span></span><br><span class="line">        bullets.empty()</span><br><span class="line">        ai_settings.increase_speed()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提高等级</span></span><br><span class="line">        stats.level += <span class="number">1</span></span><br><span class="line">        sb.prep_level()</span><br><span class="line"></span><br><span class="line">        create_fleet(ai_settings, screen, ship, aliens)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ship_hit</span>(<span class="params">ai_settings, screen, stats, sb, ship, aliens, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应被外星人撞到的飞船&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> stats.ships_left &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 将ships_left减1</span></span><br><span class="line">        stats.ships_left -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新记分牌</span></span><br><span class="line">        sb.prep_ships()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清空外星人列表和子弹列表</span></span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一群新的外星人，并将飞船放到屏幕底端中央</span></span><br><span class="line">        create_fleet(ai_settings, screen, ship, aliens)</span><br><span class="line">        ship.center_ship()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 暂停</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        stats.game_active = <span class="literal">False</span></span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_aliens_bottom</span>(<span class="params">ai_settings, screen, stats, sb, ship, aliens, bullets</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查是否有外星人到达了屏幕底端&quot;&quot;&quot;</span></span><br><span class="line">    screen_rect = screen.get_rect()</span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:</span><br><span class="line">            <span class="comment"># 像飞船被撞到一样进行处理</span></span><br><span class="line">            ship_hit(ai_settings, screen, stats, sb, ship, aliens, bullets)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_high_score</span>(<span class="params">stats, sb</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查是否诞生了新的最高得分&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">        stats.high_score = stats.score</span><br><span class="line">        sb.prep_high_score()</span><br></pre></td></tr></table></figure><h3 id="settings-py-游戏设置"><strong><a href="http://settings.py">settings.py</a></strong> 游戏设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:settings.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Settings</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;存储《外星人入侵》的所有设置的类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">600</span></span><br><span class="line">        self.screen_height = <span class="number">800</span></span><br><span class="line">        self.bg_color = (<span class="number">98</span>,<span class="number">159</span>,<span class="number">190</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 飞船设置</span></span><br><span class="line">        self.ship_speed_factor = <span class="number">1</span></span><br><span class="line">        self.ship_limit = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_speed_factor = <span class="number">0.3</span></span><br><span class="line">        self.bullet_width = <span class="number">5</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = <span class="number">60</span>,<span class="number">60</span>,<span class="number">60</span></span><br><span class="line">        self.bullets_allowed = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 外星人设置</span></span><br><span class="line">        self.alien_speed_factor = <span class="number">0.3</span></span><br><span class="line">        self.fleet_drop_speed = <span class="number">10</span></span><br><span class="line">        <span class="comment"># fleet_direction为1表示向右移，为-1表示向左移</span></span><br><span class="line">        self.fleet_direction = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 以什么样的速度加快游戏节奏</span></span><br><span class="line">        self.speedup_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 外星人点数的提高速度</span></span><br><span class="line">        self.score_scale = <span class="number">1.5</span></span><br><span class="line">        self.initialize_dynamic_settings()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize_dynamic_settings</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化随游戏进行而变化的设置&quot;&quot;&quot;</span></span><br><span class="line">        self.ship_speed_factor = <span class="number">1</span></span><br><span class="line">        self.bullet_speed_factor = <span class="number">0.3</span></span><br><span class="line">        self.alien_speed_factor = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># fleet_direction为1表示向右；为-1表示向左</span></span><br><span class="line">        self.fleet_direction = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记分</span></span><br><span class="line">        self.alien_points = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increase_speed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;提高速度设置和外星人点数&quot;&quot;&quot;</span></span><br><span class="line">        self.ship_speed_factor *= self.speedup_scale</span><br><span class="line">        self.bullet_speed_factor *= self.speedup_scale</span><br><span class="line">        self.alien_speed_factor *= self.speedup_scale</span><br><span class="line">        self.alien_points = <span class="built_in">int</span>(self.alien_points * self.score_scale)</span><br><span class="line">        <span class="built_in">print</span>(self.alien_points)</span><br></pre></td></tr></table></figure><h3 id="game-stats-py-统计信息类"><strong>game_stats.py</strong> 统计信息类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:game_stats.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameStats</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;跟踪游戏的统计信息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化统计信息&quot;&quot;&quot;</span></span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        <span class="comment"># 游戏刚启动时处于非活动状态</span></span><br><span class="line">        self.game_active = <span class="literal">False</span></span><br><span class="line">        self.high_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset_stats</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化在游戏运行期间可能变化的统计信息&quot;&quot;&quot;</span></span><br><span class="line">        self.ships_left = self.ai_settings.ship_limit</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.level = <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="scoreboard-py-计分板类"><strong><a href="http://scoreboard.py">scoreboard.py</a></strong> 计分板类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:scoreboard.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scoreboard</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示得分信息的类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen, stats</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化显示得分涉及的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line">        self.stats = stats</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示得分信息时使用的字体设置</span></span><br><span class="line">        self.text_color = (<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 准备初始得分图像</span></span><br><span class="line">        self.prep_score()</span><br><span class="line">        self.prep_high_score()</span><br><span class="line">        self.prep_level()</span><br><span class="line">        self.prep_ships()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prep_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将得分转换为一幅渲染的图像&quot;&quot;&quot;</span></span><br><span class="line">        rounded_score = <span class="built_in">int</span>(<span class="built_in">round</span>(self.stats.score, -<span class="number">1</span>))</span><br><span class="line">        score_str = <span class="string">&quot;&#123;:,&#125;&quot;</span>.<span class="built_in">format</span>(rounded_score)</span><br><span class="line">        score_str = <span class="built_in">str</span>(self.stats.score)</span><br><span class="line">        self.score_image = self.font.render(score_str, <span class="literal">True</span>, self.text_color, self.ai_settings.bg_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将得分放在屏幕右上角</span></span><br><span class="line">        self.score_rect = self.score_image.get_rect()</span><br><span class="line">        self.score_rect.right = self.screen_rect.right - <span class="number">20</span></span><br><span class="line">        self.score_rect.top = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在屏幕上显示飞船和得分&quot;&quot;&quot;</span></span><br><span class="line">        self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">        self.screen.blit(self.high_score_image, self.high_score_rect)</span><br><span class="line">        self.screen.blit(self.level_image, self.level_rect)</span><br><span class="line">        <span class="comment"># 绘制飞船</span></span><br><span class="line">        self.ships.draw(self.screen)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prep_high_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将最高得分转换为渲染的图像&quot;&quot;&quot;</span></span><br><span class="line">        high_score = <span class="built_in">int</span>(<span class="built_in">round</span>(self.stats.high_score, -<span class="number">1</span>))</span><br><span class="line">        high_score_str = <span class="string">&quot;&#123;:,&#125;&quot;</span>.<span class="built_in">format</span>(high_score)</span><br><span class="line">        self.high_score_image = self.font.render(high_score_str, <span class="literal">True</span>, self.text_color, self.ai_settings.bg_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将最高得分放在屏幕顶部中央</span></span><br><span class="line">        self.high_score_rect = self.high_score_image.get_rect()</span><br><span class="line">        self.high_score_rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.high_score_rect.top = self.score_rect.top</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prep_level</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将等级转换为渲染的图像&quot;&quot;&quot;</span></span><br><span class="line">        self.level_image = self.font.render(<span class="built_in">str</span>(self.stats.level), <span class="literal">True</span>, self.text_color, self.ai_settings.bg_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将等级放在得分下方</span></span><br><span class="line">        self.level_rect = self.level_image.get_rect()</span><br><span class="line">        self.level_rect.right = self.score_rect.right</span><br><span class="line">        self.level_rect.top = self.score_rect.bottom + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prep_ships</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示还余下多少艘飞船&quot;&quot;&quot;</span></span><br><span class="line">        self.ships = Group()</span><br><span class="line">        <span class="keyword">for</span> ship_number <span class="keyword">in</span> <span class="built_in">range</span>(self.stats.ships_left):</span><br><span class="line">            ship = Ship(self.ai_settings, self.screen)</span><br><span class="line">            ship.rect.x = <span class="number">10</span> + ship_number * ship.rect.width</span><br><span class="line">            ship.rect.y = <span class="number">10</span></span><br><span class="line">            self.ships.add(ship)</span><br></pre></td></tr></table></figure><h3 id="button-py-按钮类"><strong><a href="http://button.py">button.py</a></strong> 按钮类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:button.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen, msg</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化按钮的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置按钮的尺寸和其他属性</span></span><br><span class="line">        self.width, self.height = <span class="number">200</span>, <span class="number">50</span></span><br><span class="line">        self.button_color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">        self.text_color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建按钮的rect对象，并使其居中</span></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, self.width, self.height)</span><br><span class="line">        self.rect.center = self.screen_rect.center</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按钮的标签只需创建一次</span></span><br><span class="line">        self.prep_msg(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prep_msg</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将msg渲染为图像，并使其在按钮上居中&quot;&quot;&quot;</span></span><br><span class="line">        self.msg_image = self.font.render(msg, <span class="literal">True</span>, self.text_color, self.button_color)</span><br><span class="line"></span><br><span class="line">        self.msg_image_rect = self.msg_image.get_rect()</span><br><span class="line">        self.msg_image_rect.center = self.rect.center</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_button</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 绘制一个用颜色填充的按钮，再绘制文本</span></span><br><span class="line">        self.screen.fill(self.button_color, self.rect)</span><br><span class="line">        self.screen.blit(self.msg_image, self.msg_image_rect)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="alien-py-外星人类"><strong><a href="http://alien.py">alien.py</a></strong> 外星人类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:alien.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alien</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;表示单个外星人的类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化外星人并设置其起始位置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Alien, self).__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载外星人图像，并设置其rect属性</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/alien.bmp&#x27;</span>)</span><br><span class="line">        self.image = pygame.transform.scale(self.image, (<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个外星人最初都在屏幕左上角附近</span></span><br><span class="line">        self.rect.x = self.rect.width + random.randint(<span class="number">1</span>, <span class="number">600</span>-self.rect.width)</span><br><span class="line">        self.rect.y = self.rect.height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储外星人的准确位置</span></span><br><span class="line">        self.x = <span class="built_in">float</span>(self.rect.x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitme</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在指定位置绘制外星人&quot;&quot;&quot;</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_edges</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;如果外星人位于屏幕边缘，就返回True&quot;&quot;&quot;</span></span><br><span class="line">        screen_rect = self.screen.get_rect()</span><br><span class="line">        <span class="keyword">if</span> self.rect.right &gt;= screen_rect.right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.left &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;向左或向右移动外星人&quot;&quot;&quot;</span></span><br><span class="line">            self.x += (self.ai_settings.alien_speed_factor * self.ai_settings.fleet_direction)</span><br><span class="line">            self.rect.x = self.x</span><br></pre></td></tr></table></figure><h3 id="bullet-py-子弹类"><strong><a href="http://bullet.py">bullet.py</a></strong> 子弹类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:bullet.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen, ship</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在飞船所处的位置创建一个子弹对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Bullet, self).__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在(0,0)处创建一个表示子弹的矩形，再设置正确的位置</span></span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, ai_settings.bullet_width, ai_settings.bullet_height)</span><br><span class="line">        self.rect.centerx = ship.rect.centerx</span><br><span class="line">        self.rect.top = ship.rect.top</span><br><span class="line">        <span class="comment"># 存储用小数表示的子弹位置</span></span><br><span class="line">        self.y = <span class="built_in">float</span>(self.rect.y)</span><br><span class="line"></span><br><span class="line">        self.color = ai_settings.bullet_color</span><br><span class="line">        self.speed_factor = ai_settings.bullet_speed_factor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span></span><br><span class="line">        self.y -= self.speed_factor</span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_bullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span></span><br><span class="line">        pygame.draw.rect(self.screen, self.color, self.rect)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ship-py-飞船类"><strong><a href="http://ship.py">ship.py</a></strong> 飞船类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Filename:ship.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Ship, self).__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line"></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;images/haewon.bmp&#x27;</span>)</span><br><span class="line">        self.image = pygame.transform.scale(self.image,(<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将每艘新飞船放在屏幕底部中央</span></span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom - <span class="number">25</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在飞船的属性center中存储小数值</span></span><br><span class="line">        self.center = <span class="built_in">float</span>(self.rect.centerx)</span><br><span class="line">        self.center_y = <span class="built_in">float</span>(self.rect.bottom)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 移动标志</span></span><br><span class="line">        self.moving_right = <span class="literal">False</span></span><br><span class="line">        self.moving_left = <span class="literal">False</span></span><br><span class="line">        self.moving_up = <span class="literal">False</span></span><br><span class="line">        self.moving_down = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.center += self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.center -= self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="keyword">if</span> self.moving_up <span class="keyword">and</span> self.rect.top &gt; <span class="number">0</span>:</span><br><span class="line">            self.center_y -= self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="keyword">if</span> self.moving_down <span class="keyword">and</span> self.rect.bottom &lt; self.screen_rect.bottom:</span><br><span class="line">            self.center_y += self.ai_settings.ship_speed_factor</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据self.center更新rect对象</span></span><br><span class="line">        self.rect.centerx = self.center</span><br><span class="line">        self.rect.centery = self.center_y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitme</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center_ship</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;让飞船在屏幕上居中&quot;&quot;&quot;</span></span><br><span class="line">        self.center = self.screen_rect.centerx</span><br><span class="line">        self.center_y = self.screen_rect.bottom - <span class="number">25</span></span><br></pre></td></tr></table></figure><h2 id="结果展示">结果展示</h2><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/46.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">基础七</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--文件与异常</title>
    <link href="https://agoni66.github.io/posts/1000155.html"/>
    <id>https://agoni66.github.io/posts/1000155.html</id>
    <published>2025-01-28T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:08.141Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a> ⇦ 当前位置🚀</p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h3 id="从文件中读取数据">从文件中读取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi.txt&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><pre><code>3.1415926535    8979323846    2643383279</code></pre><h4 id="文件路径">文件路径</h4><ul><li>绝对路径</li><li>相对路径（可以使用<code>r&quot;&quot;</code>原始字符串、或者使用双反斜杠<code>\\</code>替代单斜杠<code>\</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">r&quot;pi.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><pre><code>3.1415926535    8979323846    2643383279</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐行读取数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><pre><code>3.1415926535    8979323846    2643383279</code></pre><p><code>readlines()</code>从文件中读取每一行，并将其存储在一个列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines() </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lines)</span><br></pre></td></tr></table></figure><pre><code>['3.1415926535  \n', '  8979323846  \n', '  2643383279']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用文件的内容 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines() </span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure><pre><code>3.14159265358979323846264338327932</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">圆周率值中包含你的生日吗 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">file_name = <span class="string">&#x27;pi_10000.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_object: </span><br><span class="line">    lines = file_object.readlines() </span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line">birthday = <span class="built_in">input</span>(<span class="string">&quot;Enter your birthday, in the form mmddyy:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> birthday <span class="keyword">in</span> pi_string:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your birthday appears in the first million digits of pi!&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your birthday does not appear in the first million digits of pi.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Enter your birthday, in the form mmddyy: 040413Your birthday does not appear in the first million digits of pi.</code></pre><h3 id="写入文件">写入文件</h3><p>读取模式<code>r</code>、写入模式<code>w</code>、附加模式<code>a</code>或让你能够读取和写入文件的模式<code>r+</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="异常">异常</h3><ul><li>异常合集<code>Expection</code> 万物皆可用</li></ul><p>处理ZeroDivisionError异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ZeroDivisionError                         Traceback (most recent call last)Cell In[13], line 1----&gt; 1 print(5/0)ZeroDivisionError: division by zero</code></pre><h4 id="使用try-except代码块">使用try-except代码块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>You can't divide by zero!</code></pre><h4 id="else-代码块">else 代码块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&quot;Second number: &quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The result is:&quot;</span>, answer)</span><br></pre></td></tr></table></figure><pre><code>Give me two numbers, and I'll divide them.Enter 'q' to quit.First number:  5Second number:  0You can't divide by 0!  First number:  5Second number:  2The result is: 2.5First number:  q</code></pre><h4 id="分析文本">分析文本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title = <span class="string">&quot;Alice in Wonderland&quot;</span>  </span><br><span class="line">title.split()  </span><br></pre></td></tr></table></figure><pre><code>['Alice', 'in', 'Wonderland']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;alice1.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">&quot;Sorry, the file &quot;</span> + file_name + <span class="string">&quot; does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    words = contents.split()</span><br><span class="line">    num_words = <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The file <span class="subst">&#123;file_name&#125;</span> has about <span class="subst">&#123;<span class="built_in">str</span>(num_words)&#125;</span> words.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Sorry, the file alice1.txt does not exist.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    msg = <span class="string">&quot;Sorry, the file &quot;</span> + file_name + <span class="string">&quot; does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    words = contents.split()</span><br><span class="line">    num_words = <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The file <span class="subst">&#123;file_name&#125;</span> has about <span class="subst">&#123;<span class="built_in">str</span>(num_words)&#125;</span> words.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>The file alice.txt has about 17868 words.</code></pre><h4 id="失败时一声不吭pass">失败时一声不吭<code>pass</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;alice1.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    words = contents.split()</span><br><span class="line">    num_words = <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The file <span class="subst">&#123;file_name&#125;</span> has about <span class="subst">&#123;<span class="built_in">str</span>(num_words)&#125;</span> words.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="存储数据">存储数据</h3><ul><li><code>json.dump()</code> 存储数据</li><li><code>json.load()</code> 加载数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"> </span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>] </span><br><span class="line"> </span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj: </span><br><span class="line">    json.dump(numbers, f_obj) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"> </span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj: </span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure><pre><code>[2, 3, 5, 7, 11, 13]</code></pre><h4 id="保存和读取用户生成的数据">保存和读取用户生成的数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果以前存储了用户名，就加载它</span></span><br><span class="line"><span class="comment">#  否则，就提示用户输入用户名并存储它 </span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>What is your name?  kjWe'll remember you when you come back, kj!</code></pre><h4 id="重构">重构</h4><p><strong>重构</strong>：代码能够正确地运行，但可做进一步的改进——将代码划分为一系列完成具体工作的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username, f_obj)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>) </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><pre><code>Welcome back, kj!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;如果存储了用户名，就获取它&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_new_username</span>(): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;提示用户输入用户名&quot;&quot;&quot;</span> </span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>) </span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span> </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj: </span><br><span class="line">        json.dump(username, f_obj) </span><br><span class="line">    <span class="keyword">return</span> username </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;问候用户，并指出其名字&quot;&quot;&quot;</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><pre><code>Welcome back, kj!</code></pre><p>在本章中，你学习了：如何使用文件；如何一次性读取整个文件，以及如何以每次一行的方式读取文件的内容；如何写入文件，以及如何将文本附加到文件末尾；什么是异常以及如何处理程序可能引发的异常；如何存储Python数据结构，以保存用户提供的信息，避免用户每次运行程序时都需要重新提供。</p>]]></content>
    
    
    <summary type="html">基础六</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--类</title>
    <link href="https://agoni66.github.io/posts/1000154.html"/>
    <id>https://agoni66.github.io/posts/1000154.html</id>
    <published>2025-01-26T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:27.754Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a> ⇦ 当前位置🚀</p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h2 id="创建和使用类">创建和使用类</h2><p><strong>面向对象编程</strong>是最有效的软件编写方法之一。在面向对象编程中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。编写类时，你定义一大类对象都有的通用行为。基于类创建对象时，每个对象都自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。<br>根据约定，在Python中，首字母大写的名称指的是类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span> </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is now sitting.&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法-init">方法__init__()</h3><p>类中的函数称为<strong>方法</strong>，<code>_init_</code>是一个特殊的方法，根据类进行新的实例的创建时，都会自动运行<code>_init_</code>，下划线是约定必须遵循。<br>形参<code>self</code>必不可少，且必须放在其他形参的前面，是一个指向实例本身的引用，让实例能够访问类中的属性和方法<br>属性：句号表示法，后面没有括号<br>方法：句号表示法，后面有括号</p><h4 id="根据类创建实例">根据类创建实例</h4><ol><li>访问属性</li><li>调用方法</li><li>创建多个实例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>) </span><br><span class="line"><span class="built_in">print</span>(my_dog.name + <span class="string">&quot;\n&quot;</span> + <span class="built_in">str</span>(my_dog.age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot; years old.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>willie6My dog's name is Willie.My dog is 6 years old.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>) </span><br><span class="line">my_dog.sit() </span><br><span class="line">my_dog.roll_over() </span><br></pre></td></tr></table></figure><pre><code>Willie is now sitting.Willie rolled over!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>) </span><br><span class="line">your_dog = Dog(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">3</span>) </span><br><span class="line"><span class="built_in">print</span>(my_dog.name)</span><br><span class="line"><span class="built_in">print</span>(your_dog.name)</span><br></pre></td></tr></table></figure><pre><code>willielucy</code></pre><h2 id="使用类和实例">使用类和实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span> </span><br><span class="line">        self.make = make </span><br><span class="line">        self.model = model </span><br><span class="line">        self.year = year </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span> </span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model </span><br><span class="line">        <span class="keyword">return</span> long_name.title() </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>) </span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name()) </span><br></pre></td></tr></table></figure><pre><code>2016 Audi A4</code></pre><h3 id="给属性指定默认值">给属性指定默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span> </span><br><span class="line">        self.make = make </span><br><span class="line">        self.model = model </span><br><span class="line">        self.year = year </span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span> </span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model </span><br><span class="line">        <span class="keyword">return</span> long_name.title() </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure><pre><code>This car has 0 miles on it.</code></pre><p>Python将创建一个名为odometer_reading的属性，并将其初始值设置为0</p><h3 id="修改属性的值">修改属性的值</h3><ol><li>直接修改</li><li>通过方法修改</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>) </span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure><pre><code>2016 Audi A4This car has 23 miles on it.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span> </span><br><span class="line">        self.make = make </span><br><span class="line">        self.model = model </span><br><span class="line">        self.year = year </span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span> </span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model </span><br><span class="line">        <span class="keyword">return</span> long_name.title() </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="keyword">if</span> mileage &gt; self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.odometer_reading    </span><br><span class="line">        </span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line">my_new_car.update_odometer(<span class="number">666</span>)</span><br><span class="line">my_new_car.update_odometer(<span class="number">66</span>)</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure><pre><code>This car has 666 miles on it.</code></pre><h2 id="继承">继承</h2><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p><h3 id="重写父类的方法">重写父类的方法</h3><p>比如电动车没有油箱，但是电动车的父类有邮箱，那么需要重写父类以符合对模拟的要求，<strong>定义一个与要重写的父类方法同名的方法即可</strong></p><h3 id="将实例用作属性">将实例用作属性</h3><p>将大型类拆分成多个协同工作的小类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year) </span><br><span class="line">        <span class="comment"># 这行代码让Python调用ElectricCar的父类的方法__init__()，让ElectricCar实例包含父类的所有属性</span></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>) </span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br></pre></td></tr></table></figure><pre><code>2016 Tesla Model S</code></pre><p><strong>super()是一个特殊函数，帮助Python将父类和子类关联起来</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写父类的方法，给get_descriptive_name()方法加上一句话</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hydrogen_Energy_Automobile</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title() + <span class="string">&quot;\nThis car doesn&#x27;t need a gas tank!&quot;</span></span><br><span class="line"></span><br><span class="line">my_Huawei = Hydrogen_Energy_Automobile(<span class="string">&#x27;wenjie&#x27;</span>, <span class="string">&#x27;m9 &#x27;</span>, <span class="number">2023</span>) </span><br><span class="line"><span class="built_in">print</span>(my_Huawei.get_descriptive_name()) </span><br></pre></td></tr></table></figure><pre><code>2023 Wenjie M9 This car doesn't need a gas tank!</code></pre><p><strong>将实例用作属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span> </span><br><span class="line">        self.battery_size = battery_size </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>): </span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出电瓶的续航里程&quot;&quot;&quot;</span> </span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>: </span><br><span class="line">            <span class="built_in">range</span> = <span class="number">240</span> </span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>: </span><br><span class="line">            <span class="built_in">range</span> = <span class="number">270</span> </span><br><span class="line"></span><br><span class="line">        message = <span class="string">&quot;This car can go approximately &quot;</span> + <span class="built_in">str</span>(<span class="built_in">range</span>) </span><br><span class="line">        message += <span class="string">&quot; miles on a full charge.&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(message) </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year) </span><br><span class="line">        self.battery = Battery() </span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br><span class="line">my_tesla.battery.describe_battery() </span><br></pre></td></tr></table></figure><pre><code>2016 Tesla Model SThis car has a 70-kWh battery.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure><pre><code>This car can go approximately 240 miles on a full charge.</code></pre><h2 id="导入类">导入类</h2><p>和导入函数差不多<br>Python允许你将类存储在模块（文件）中，然后在主程序中导入所需的模块</p><ol><li>导入单个类</li><li>在一个模块中存储多个类</li><li>从一个模块中导入多个类</li><li>导入整个模块</li><li>导入模块中的所有类 <code>from module_name import * </code></li><li>在一个模块中导入另一个模块</li><li>自定义工作流程</li></ol><h2 id="Python-标准库">Python 标准库</h2><p>字典让你能够将信息关联起来，但它们不记录你添加键—值对的顺序。要<strong>创建字典并记录其中的键—值对的添加顺序</strong>,可使用模块collections中的<strong>OrderedDict类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict </span><br><span class="line"></span><br><span class="line">favorite_languages = OrderedDict() </span><br><span class="line"></span><br><span class="line">favorite_languages[<span class="string">&#x27;jen&#x27;</span>] = <span class="string">&#x27;python&#x27;</span> </span><br><span class="line">favorite_languages[<span class="string">&#x27;sarah&#x27;</span>] = <span class="string">&#x27;c&#x27;</span> </span><br><span class="line">favorite_languages[<span class="string">&#x27;edward&#x27;</span>] = <span class="string">&#x27;ruby&#x27;</span> </span><br><span class="line">favorite_languages[<span class="string">&#x27;phil&#x27;</span>] = <span class="string">&#x27;python&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items(): </span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">&quot;&#x27;s favorite language is &quot;</span> + language.title() + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Jen's favorite language is Python.Sarah's favorite language is C.Edward's favorite language is Ruby.Phil's favorite language is Python.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 骰子：模块 random 包含以各种方式生成随机数的函数，其中的 randint()返回</span></span><br><span class="line"><span class="comment"># 一个位于指定范围内的整数，例如，下面的代码返回一个 1~6 内的整数：</span></span><br><span class="line"><span class="comment"># from random import randint </span></span><br><span class="line"><span class="comment"># x = randint(1, 6) </span></span><br><span class="line"><span class="comment"># 请创建一个 Die 类，它包含一个名为 sides 的属性，该属性的默认值为 6。编写一</span></span><br><span class="line"><span class="comment"># 个名为 roll_die()的方法，它打印位于 1 和骰子面数之间的随机数。创建一个 6 面的骰</span></span><br><span class="line"><span class="comment"># 子，再掷 10 次。创建一个 10 面的骰子和一个 20 面的骰子，并将它们都掷 10 次</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint </span><br><span class="line"><span class="comment"># randint()返回一个位于指定范围内的整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Die</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, side</span>):</span><br><span class="line">        self.side = side</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_die</span>(<span class="params">self</span>):</span><br><span class="line">        x = randint(<span class="number">1</span>, self.side)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_die = Die(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这是一个&quot;</span> + <span class="built_in">str</span>(my_die.side) + <span class="string">&quot;面的骰子&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机骰出的数字是：&quot;</span> + <span class="built_in">str</span>(my_die.roll_die()))</span><br></pre></td></tr></table></figure><pre><code>这是一个6面的骰子随机骰出的数字是：3</code></pre><p>了解Python标准库<br><a href="https://pymotw.com/3/">https://pymotw.com/3/</a></p><h2 id="类编码风格">类编码风格</h2><p>类名应采用<strong>驼峰命名法</strong>，即将类名中的每个单词的首字母都<strong>大写</strong>，而不使用下划线<br>实例名和模块名都采用<strong>小写</strong>格式，并在单词之间加上下划线<br>在每个类后面需要包含一个<strong>文档字符串</strong><br>在类中，可使用<strong>一个空行</strong>来<strong>分隔方法</strong>；而在模块中，可使用<strong>两个空行</strong>来<strong>分隔类</strong></p>]]></content>
    
    
    <summary type="html">基础五</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--函数</title>
    <link href="https://agoni66.github.io/posts/1000153.html"/>
    <id>https://agoni66.github.io/posts/1000153.html</id>
    <published>2025-01-24T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:32.144Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a> ⇦ 当前位置🚀</p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h2 id="函数">函数</h2><h3 id="定义函数">定义函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>) </span><br><span class="line"> </span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><pre><code>Hello!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>): </span><br><span class="line"> <span class="string">&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + username.title() + <span class="string">&quot;!&quot;</span>) </span><br><span class="line"> </span><br><span class="line">greet_user(<span class="string">&quot;gun&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Hello, Gun!</code></pre><p>形参和实参</p><h3 id="传递实参">传递实参</h3><ol><li>位置实参(<strong>基于实参的顺序</strong>将函数调用中的每个实参都关联到函数定义中的一个形参)</li><li>关键字实参(<strong>是传递给函数的名称—值对</strong>)</li><li>默认值(编写函数时，可给每个形参指定默认值)</li></ol><p><strong>文档字符串</strong><br>它的首行简述函数功能，第二行空行，第三行为函数的具体描述<br>你可以使用 <code>__doc__</code>（注意都是双下划线）调用函数中的文档字符串属性(如下)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"> </span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>) </span><br><span class="line">describe_pet(<span class="string">&#x27;williea&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>) </span><br><span class="line">describe_pet(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;willie&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(describe_pet.__doc__)</span><br></pre></td></tr></table></figure><pre><code>I have a hamster.My hamster's name is Harry.I have a williea.My williea's name is Dog.I have a dog.My dog's name is Willie.显示宠物的信息</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键字实参，实参顺序可任意</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>I have a hamster.My hamster's name is Harry.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name=<span class="string">&#x27;willie&#x27;</span></span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">describe_pet(<span class="string">&#x27;dog&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>I have a dog.My dog's name is Willie.</code></pre><p><strong>注意：</strong><br>Python依然将这个实参视为位置实参，因此如果函数调用中只包含宠物的名字，这个实参将关联到函数<br>定义中的第一个形参<br>简单来说，使用默认值时视为<code>位置实参</code>，有默认值的形参全部需<code>放在后面</code><br>另外：由于显式地给animal_type提供了实参，因此Python会将忽略这个形参的默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数调用少两个实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">describe_pet() </span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Cell In[32], line 6      4     print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)       5     print(&quot;My &quot; + animal_type + &quot;'s name is &quot; + pet_name.title() + &quot;.&quot;) ----&gt; 6 describe_pet() TypeError: describe_pet() missing 2 required positional arguments: 'animal_type' and 'pet_name'</code></pre><h3 id="返回值">返回值</h3><hr><h4 id="返回简单值">返回简单值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span> </span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> full_name.title() </span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><pre><code>HelloJimi Hendrix</code></pre><h4 id="让实参变成可选的">让实参变成可选的</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让实参变成可选的，就是在中间if、else判断</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">if</span> middle_name: </span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name </span><br><span class="line">    <span class="keyword">return</span> full_name.title() </span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) </span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) </span><br></pre></td></tr></table></figure><pre><code>Jimi HendrixJohn Lee Hooker</code></pre><h4 id="返回字典">返回字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回字典</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age=<span class="string">&#x27;&#x27;</span>,job=<span class="string">&#x27;&#x27;</span></span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span> </span><br><span class="line">    first_name=first_name.title()</span><br><span class="line">    last_name=last_name.title()</span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125; </span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> job:</span><br><span class="line">        person[<span class="string">&#x27;job&#x27;</span>] = job</span><br><span class="line">    <span class="keyword">return</span> person </span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>,<span class="number">22</span>, <span class="string">&#x27;doctor&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) </span><br></pre></td></tr></table></figure><pre><code>&#123;'first': 'Jimi', 'last': 'Hendrix', 'age': 22, 'job': 'doctor'&#125;</code></pre><h4 id="结合使用函数和-while-循环">结合使用函数和 while 循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span> </span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name </span><br><span class="line">    <span class="keyword">return</span> full_name.title() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是一个无限循环! 使用“no”进行break终止</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>) </span><br><span class="line">    f_name = <span class="built_in">input</span>(<span class="string">&quot;First name: &quot;</span>) </span><br><span class="line">    l_name = <span class="built_in">input</span>(<span class="string">&quot;Last name: &quot;</span>) </span><br><span class="line"> </span><br><span class="line">    formatted_name = get_formatted_name(f_name, l_name) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + formatted_name + <span class="string">&quot;!&quot;</span>) </span><br><span class="line"></span><br><span class="line">    answer = <span class="built_in">input</span>(<span class="string">&quot;Would you like to continue?&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> answer == <span class="string">&quot;no&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>Please tell me your name:First name:  芊Last name:  芊 龍Hello, 芊 芊 龍!Would you like to continue? no</code></pre><h4 id="传递列表">传递列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和传递值一样的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每位用户都发出简单的问候&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names: </span><br><span class="line">        msg = <span class="string">&quot;Hello, &quot;</span> + name.title() + <span class="string">&quot;!&quot;</span> </span><br><span class="line">        <span class="built_in">print</span>(msg) </span><br><span class="line"></span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;margot&#x27;</span>] </span><br><span class="line">greet_users(usernames) </span><br></pre></td></tr></table></figure><pre><code>Hello, Hannah!Hello, Ty!Hello, Margot!</code></pre><ol><li>在函数中修改列表</li><li>禁止函数修改列表</li></ol><p><strong>每个函数都应只负责一项具体的工作</strong></p><p>要将列表的副本传递给函数<br><code>function_name(list_name[:])</code><br>比如print_models(unprinted_designs[:], completed_models)<br>切片表示法[:]创建列表的副本</p><h3 id="传递任意数量的实参">传递任意数量的实参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>): </span><br><span class="line"> <span class="string">&quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot;</span> </span><br><span class="line"> <span class="built_in">print</span>(toppings) </span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>('pepperoni',)('mushrooms', 'green peppers', 'extra cheese')</code></pre><p><strong>星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping) </span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>Making a pizza with the following toppings:- pepperoniMaking a pizza with the following toppings:- mushrooms- green peppers- extra cheese</code></pre><h4 id="使用任意数量的关键字实参">使用任意数量的关键字实参</h4><ol><li>结合使用位置实参和任意数量实参<ul><li>Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中</li></ul></li><li>使用任意数量的关键字实参<ul><li>形参**user_info中的两个星号让Python创建一个名为user_info的空字典</li><li>两个键—值对<br>（location='princeton’和field=‘physics’），</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + </span><br><span class="line">    <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping) </span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>Making a 16-inch pizza with the following toppings:- pepperoniMaking a 12-inch pizza with the following toppings:- mushrooms- green peppers- extra cheese</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + </span><br><span class="line">    <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping) </span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>Making a 16-inch pizza with the following toppings:- pepperoniMaking a 12-inch pizza with the following toppings:- mushrooms- green peppers- extra cheese</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用任意数量的关键字实参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first, last, **user_info</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建一个字典，其中包含我们知道的有关用户的一切&quot;&quot;&quot;</span> </span><br><span class="line">    profile = &#123;&#125; </span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first </span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last </span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value </span><br><span class="line">    <span class="keyword">return</span> profile </span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>, </span><br><span class="line">                             location=<span class="string">&#x27;princeton&#x27;</span>, </span><br><span class="line">                             field=<span class="string">&#x27;physics&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(user_profile) </span><br></pre></td></tr></table></figure><pre><code>&#123;'first_name': 'albert', 'last_name': 'einstein', 'location': 'princeton', 'field': 'physics'&#125;</code></pre><p><strong>编写函数时，你可以以各种方式混合使用位置实参、关键字实参和任意数量的实参</strong></p><h2 id="模块">模块</h2><ul><li>函数的优点之一是，使用它们可将代码块与主程序分离</li><li>模块是扩展名为 <strong>.py</strong>的文件，包含要导入到程序中的代码</li></ul><ol><li><code>import module_name</code>导入整个模块或py文件  module_name.function_name()</li><li><code>from module_name import function_name</code> <code>from module_name import function_0, function_1, function_2</code> 导入特定的函数 function_name()</li><li><code>from module_name import function_name as fn</code>使用as给函数指定别名 fn()</li><li><code>import module_name as mn</code>使用 as 给模块指定别名 mn.function_name()</li><li><code>import module_name import *</code>导入模块中的所有函数 function_name()</li></ol><h4 id="函数编写指南">函数编写指南</h4><p>给形参指定默认值时，等号两边不要有空格：<br>def function_name(parameter_0, parameter_1=‘default value’)<br>对于函数调用中的关键字实参，也应遵循这种约定：<br>function_name(value_0, parameter_1=‘value’)<br>形参过多可以使用缩减对齐<br>所有的import语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序<br><strong>应给函数指定描述性名称，且只在其中使用小写字母和下划线。描述性名称可帮助你和别人明白代码想要做什么。给模块命名时也应遵循上述约定</strong></p>]]></content>
    
    
    <summary type="html">基础四</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--用户输入和while循环</title>
    <link href="https://agoni66.github.io/posts/1000152.html"/>
    <id>https://agoni66.github.io/posts/1000152.html</id>
    <published>2025-01-22T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:12.944Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a> ⇦ 当前位置🚀</p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;Tell me something, and I will repeat it back to you: &quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(message) </span><br></pre></td></tr></table></figure><pre><code>Tell me something, and I will repeat it back to you: 你好你好</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span> </span><br><span class="line">name = <span class="built_in">input</span>(prompt) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>If you tell us who you are, we can personalize the messages you see.What is your first name? KJHello, KJ!</code></pre><p>这个示例演示了一种<strong>创建多行字符串</strong>的方式。第1行将消息的前半部分存储在变量prompt中；<br>在第2行中，运算符<code>+=</code>在存储在prompt中的字符串末尾附加一个字符串</p><p><code>input()</code>把输入的文本转换成字符串<br><code>int()</code>可以把字符串转换成整型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用int()将input()的字符串转成整型</span></span><br><span class="line">height = <span class="built_in">input</span>(<span class="string">&quot;How tall are you, in inches? &quot;</span>) </span><br><span class="line">height = <span class="built_in">int</span>(height) </span><br><span class="line"><span class="keyword">if</span> height &gt;= <span class="number">36</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nYou&#x27;re tall enough to ride!&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nYou&#x27;ll be able to ride when you&#x27;re a little older.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>How tall are you, in inches? 71You're tall enough to ride!</code></pre><p>求模运算符<code>%</code>是一个很有用的工具，它将<strong>两个数相除并返回余数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于判断奇偶数</span></span><br><span class="line">number = <span class="built_in">input</span>(<span class="string">&quot;Enter a number, and I&#x27;ll tell you if it&#x27;s even or odd: &quot;</span>) </span><br><span class="line">number = <span class="built_in">int</span>(number) </span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is even.&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is odd.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Enter a number, and I'll tell you if it's even or odd: 12341241451The number 12341241451 is odd.</code></pre><h3 id="while循环">while循环</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">1</span> </span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>: </span><br><span class="line">    <span class="built_in">print</span>(current_number) </span><br><span class="line">    current_number += <span class="number">1</span> </span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><h4 id="选择何时退出">选择何时退出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span> </span><br><span class="line">message = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line">    message = <span class="built_in">input</span>(prompt) </span><br><span class="line">    <span class="built_in">print</span>(message) </span><br></pre></td></tr></table></figure><pre><code>Tell me something, and I will repeat it back to you:Enter 'quit' to end the program. 画面上，天空是铁青色混合着火焰的颜色，唯一的一株巨树矗立着，已经枯死的树枝向着四面八方延伸，织成一张密网，支撑住皲裂（jūnliè）的天空。画面上，天空是铁青色混合着火焰的颜色，唯一的一株巨树矗立着，已经枯死的树枝向着四面八方延伸，织成一张密网，支撑住皲裂（jūnliè）的天空。Tell me something, and I will repeat it back to you:Enter 'quit' to end the program. 荒原上枯骨满地，黑色的巨兽正从骨骸堆的深处腾起，双翼挂满骷髅，张开巨大的膜翼后，仰天吐出黑色的火焰。荒原上枯骨满地，黑色的巨兽正从骨骸堆的深处腾起，双翼挂满骷髅，张开巨大的膜翼后，仰天吐出黑色的火焰。Tell me something, and I will repeat it back to you:Enter 'quit' to end the program. quitquit</code></pre><p>唯一美中不足的是，它将单词’quit’也作为一条消息打印了出来。为修复这<br>种问题，只需使用一个简单的if测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span> </span><br><span class="line">message = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line">    message = <span class="built_in">input</span>(prompt) </span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message) </span><br></pre></td></tr></table></figure><pre><code>Tell me something, and I will repeat it back to you:Enter 'quit' to end the program. 我不再迷茫 思念是唯一的行囊我不再迷茫 思念是唯一的行囊Tell me something, and I will repeat it back to you:Enter 'quit' to end the program. 漫天的星光 有一颗是你的愿望漫天的星光 有一颗是你的愿望Tell me something, and I will repeat it back to you:Enter 'quit' to end the program. quit</code></pre><h4 id="使用标志">使用标志</h4><p>可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为<code>标志</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把这个标志命名为active（可给它指定任何名称）</span></span><br><span class="line">prompt = <span class="string">&quot;\n我会重复你的话： &quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\n输入‘quit’退出 &quot;</span></span><br><span class="line"> </span><br><span class="line">active = <span class="literal">True</span> </span><br><span class="line"><span class="keyword">while</span> active: </span><br><span class="line">    message = <span class="built_in">input</span>(prompt) </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line">        active = <span class="literal">False</span> </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(message) </span><br></pre></td></tr></table></figure><pre><code>我会重复你的话：输入‘quit’退出爆裂鼓手爆裂鼓手我会重复你的话：输入‘quit’退出黑天鹅黑天鹅我会重复你的话：输入‘quit’退出小丑小丑我会重复你的话：输入‘quit’退出quit</code></pre><p><strong>备注</strong><br>在while循环中，我们在用户输入后使用一条if语句来检查变量message的值。如果用户输入的是’quit’，我们就将变量active设置为False，这将导致while循环不再继续执行</p><h4 id="使用-break-退出循环">使用 break 退出循环</h4><p><code>break</code>语句用于控制程序流程，可使用它来控制哪些代码行将执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\n请输入你喜欢的城市： &quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\n输入‘quit’退出 &quot;</span></span><br><span class="line">messages = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    message = <span class="built_in">input</span>(prompt) </span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messages.append(message)</span><br><span class="line">        <span class="built_in">print</span>(messages) </span><br></pre></td></tr></table></figure><pre><code>请输入你喜欢的城市： 输入‘quit’退出  北京['北京']请输入你喜欢的城市： 输入‘quit’退出  东京['北京', '东京']请输入你喜欢的城市： 输入‘quit’退出  首尔['北京', '东京', '首尔']请输入你喜欢的城市： 输入‘quit’退出  quit</code></pre><h4 id="使用-continue继续循环">使用 continue继续循环</h4><p><code>continue</code>继续循环，也就是回到循环的开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>: </span><br><span class="line">    current_number += <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br></pre></td></tr></table></figure><pre><code>13579</code></pre><p><strong>备注</strong><br>如果整除结果为0（意味着current_number可被2整除），就执行continue语句，<br>让Python忽略余下的代码，并返回到循环的开头。如果当前的数字不能被2整除，就执行循环中<br>余下的代码，Python将这个数字打印出来</p><p><strong>结束无限循环</strong><br>按Ctrl + C，也可关闭显示程序输出的终端窗口</p><h4 id="使用-while-循环来处理列表和字典">使用 while 循环来处理列表和字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>] </span><br><span class="line">confirmed_users = [] </span><br><span class="line"><span class="keyword">while</span> unconfirmed_users: </span><br><span class="line">    current_user = unconfirmed_users.pop() </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title()) </span><br><span class="line">    confirmed_users.append(current_user) </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n显示所有已验证的用户：&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users: </span><br><span class="line">    <span class="built_in">print</span>(confirmed_user.title())</span><br></pre></td></tr></table></figure><pre><code>Verifying user: CVerifying user: BVerifying user: A显示所有已验证的用户：CBA</code></pre><p><strong>while循环将不断地运行，直到列表unconfirmed_users变成空的</strong></p><h4 id="删除包含特定值的所有列表元素">删除包含特定值的所有列表元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有特定值元素</span></span><br><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(pets) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入这个循环后，Python删除第一个&#x27;cat&#x27;并返回到while代码行，然后发现&#x27;cat&#x27;还包含在列表中，因此再次进入循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets: </span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>) </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 进入这个循环后，Python删除第一个&#x27;dog&#x27;并返回到while代码行，然后发现&#x27;dog&#x27;还包含在列表中，因此再次进入循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> pets: </span><br><span class="line">    pets.remove(<span class="string">&#x27;dog&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pets) </span><br></pre></td></tr></table></figure><pre><code>['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat']['goldfish', 'rabbit']</code></pre><h4 id="使用用户输入来填充字典">使用用户输入来填充字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span> </span><br><span class="line"><span class="keyword">while</span> polling_active: </span><br><span class="line">    <span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>) </span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday? &quot;</span>) </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">    responses[name] = response </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 看看是否还有人要参与调查</span></span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>) </span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>: </span><br><span class="line">        polling_active = <span class="literal">False</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items(): </span><br><span class="line">    <span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>What is your name?  AWhich mountain would you like to climb someday?  黄山Would you like to let another person respond? (yes/ no)  yesWhat is your name?  BWhich mountain would you like to climb someday?  白云山Would you like to let another person respond? (yes/ no)  yesWhat is your name?  CWhich mountain would you like to climb someday?  岳麓山Would you like to let another person respond? (yes/ no)  no--- Poll Results ---A would like to climb 黄山.B would like to climb 白云山.C would like to climb 岳麓山.</code></pre>]]></content>
    
    
    <summary type="html">基础三</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--if语句与字典</title>
    <link href="https://agoni66.github.io/posts/1000151.html"/>
    <id>https://agoni66.github.io/posts/1000151.html</id>
    <published>2025-01-20T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:17.350Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a></p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a> ⇦ 当前位置🚀</p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先检查当前的汽车名是否是&#x27;bmw&#x27;</span></span><br><span class="line">cars = [<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars: </span><br><span class="line">    <span class="keyword">if</span> car == <span class="string">&#x27;bmw&#x27;</span>: </span><br><span class="line">        <span class="built_in">print</span>(car.upper()) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(car.title()) </span><br></pre></td></tr></table></figure><pre><code>AudiBMWSubaruToyota</code></pre><h3 id="条件测试">条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为 <strong><code>条件测试</code></strong><br><code>==</code>相等运算符在它两边的值相等时返回True，需考虑大小写，可以比较数字<br><code>!=</code>要判断两个值是否不等，可结合使用惊叹号和等号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">&#x27;bmw&#x27;</span></span><br><span class="line">car == <span class="string">&#x27;bmw&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car</span><br></pre></td></tr></table></figure><pre><code>'bmw'</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">age ==<span class="number">18</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h4 id="检查多个条件">检查多个条件</h4><ol><li>使用<code>and</code>检查多个条件</li><li>使用<code>or</code>检查多个条件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用and检查多个条件</span></span><br><span class="line">age_0 = <span class="number">18</span></span><br><span class="line">age_1 = <span class="number">20</span></span><br><span class="line">age_0 &gt;= <span class="number">19</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">19</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">22</span></span><br><span class="line">age_0 &gt;= <span class="number">19</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">19</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">22</span> </span><br><span class="line">age_1 = <span class="number">18</span> </span><br><span class="line">age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span>  </span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">18</span> </span><br><span class="line">age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h4 id="检查特定值是否包含在列表中">检查特定值是否包含在列表中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>] </span><br><span class="line"><span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings </span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>] </span><br><span class="line"><span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings </span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h4 id="检查特定值是否不包含在列表中">检查特定值是否不包含在列表中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">banned_users = [<span class="string">&#x27;andrew&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>, <span class="string">&#x27;david&#x27;</span>] </span><br><span class="line">user = <span class="string">&#x27;marie&#x27;</span> </span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> banned_users: </span><br><span class="line">    <span class="built_in">print</span>(user.title() + <span class="string">&quot;, you can post a response if you wish.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Marie, you can post a response if you wish.</code></pre><h4 id="布尔表达式">布尔表达式</h4><p>不过是条件测试的别名<br>只有<code>True</code>和<code>False</code></p><h3 id="if语句">if语句</h3><hr><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test:    </span><br><span class="line">    <span class="keyword">do</span> something</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单例子</span></span><br><span class="line">age = <span class="number">19</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>You are old enough to vote!</code></pre><h4 id="if-else语句">if-else语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>) </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Sorry, you are too young to vote.&quot;</span>) </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 18!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Sorry, you are too young to vote.Please register to vote as soon as you turn 18!</code></pre><h4 id="if-elif-else-结构">if-elif-else 结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">    price = <span class="number">0</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">    price = <span class="number">5</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    price = <span class="number">10</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Your admission cost is $5.</code></pre><h4 id="使用多个-elif-代码块">使用多个 elif 代码块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">     price = <span class="number">0</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">     price = <span class="number">5</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>: </span><br><span class="line">     price = <span class="number">10</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">     price = <span class="number">5</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Your admission cost is $5.</code></pre><h4 id="省略-else-代码块">省略 else 代码块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">     price = <span class="number">0</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">     price = <span class="number">5</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>: </span><br><span class="line">     price = <span class="number">10</span> </span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>: </span><br><span class="line">     price = <span class="number">5</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Your admission cost is $5.</code></pre><h4 id="测试多个条件">测试多个条件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>] </span><br><span class="line"><span class="comment"># 配料：蘑菇、辣香肠、芝士</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Adding mushrooms.&quot;</span>) </span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Adding pepperoni.&quot;</span>) </span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;extra cheese&#x27;</span> <span class="keyword">in</span> requested_toppings: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Adding extra cheese.&quot;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Adding mushrooms.Adding extra cheese.Finished making your pizza!</code></pre><p><strong>总之，如果你只想执行一个代码块，就使用if-elif-else结构；如果要运行多个代码块，就使用一系列独立的if语句</strong></p><h3 id="使用if语句处理列表">使用if语句处理列表</h3><hr><ol><li>检查特殊元素</li><li>确认列表不是空的</li><li>使用多个列表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加料过程中某一原料不够，但仍有人点菜</span></span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings: </span><br><span class="line">    <span class="keyword">if</span> requested_topping == <span class="string">&#x27;green peppers&#x27;</span>: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Sorry, we are out of green peppers right now.&quot;</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Adding mushrooms.Sorry, we are out of green peppers right now.Adding extra cheese.Finished making your pizza!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表为空</span></span><br><span class="line">requested_toppings = [] </span><br><span class="line"><span class="keyword">if</span> requested_toppings: </span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Are you sure you want a plain pizza?</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用多个列表</span></span><br><span class="line">available_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;olives&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;pepperoni&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>] </span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;french fries&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings: </span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we don&#x27;t have &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Adding mushrooms.Sorry, we don't have french fries.Adding extra cheese.Finished making your pizza!</code></pre><p><strong>诸如==、&gt;=和&lt;=等比较运算符两边各添加一个空格</strong></p><h3 id="小结">小结</h3><hr><p>在本章中，你学习了如何编写结果要么为Ture要么为False的条件测试。你学习了如何编写简单的if语句、if-else语句和if-elif-else结构。在程序中，你使用了这些结构来测试特定的条件，以确定这些条件是否满足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单例子</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>]) </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>]) </span><br></pre></td></tr></table></figure><pre><code>green5</code></pre><p>字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。<br>事实上，可将任何Python对象用作字典中的值。<br>字典用放在花括号{}中的一系列键—值对表示<br>键和值之间用冒号分隔，而键—值对之间用逗号分隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问字典中的值,依次指定字典名和放在方括号内的键</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>]) </span><br></pre></td></tr></table></figure><pre><code>green</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">new_points = alien_0[<span class="string">&#x27;points&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You just earned &quot;</span> + <span class="built_in">str</span>(new_points) + <span class="string">&quot; points!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>You just earned 5 points!</code></pre><h3 id="字典操作">字典操作</h3><hr><h4 id="添加键—值对">添加键—值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span> </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br></pre></td></tr></table></figure><pre><code>&#123;'color': 'green', 'points': 5&#125;&#123;'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25&#125;</code></pre><h4 id="创建一个空字典">创建一个空字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span> </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br></pre></td></tr></table></figure><pre><code>&#123;&#125;&#123;'x_position': 0, 'y_position': 25&#125;</code></pre><h4 id="修改字典中的值">修改字典中的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改外星人的颜色</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is now &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>The alien is green.The alien is now yellow.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;x_position&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;y_position&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;fast&#x27;</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original x-position: &quot;</span> + <span class="built_in">str</span>(alien_0[<span class="string">&#x27;x_position&#x27;</span>])) </span><br><span class="line"><span class="comment"># 向右移动外星人</span></span><br><span class="line"><span class="comment"># 据外星人当前速度决定将其移动多远</span></span><br><span class="line"><span class="keyword">if</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;slow&#x27;</span>: </span><br><span class="line">     x_increment = <span class="number">1</span> </span><br><span class="line"><span class="keyword">elif</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;medium&#x27;</span>: </span><br><span class="line">     x_increment = <span class="number">2</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"> <span class="comment"># 这个外星人的速度一定很快</span></span><br><span class="line">     x_increment = <span class="number">3</span> </span><br><span class="line"><span class="comment"># 新位置等于老位置加上增量</span></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = alien_0[<span class="string">&#x27;x_position&#x27;</span>] + x_increment</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;New x-position: &quot;</span> + <span class="built_in">str</span>(alien_0[<span class="string">&#x27;x_position&#x27;</span>])) </span><br></pre></td></tr></table></figure><pre><code>Original x-position: 0New x-position: 3</code></pre><h4 id="删除键—值对">删除键—值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br></pre></td></tr></table></figure><pre><code>&#123;'color': 'green', 'points': 5&#125;&#123;'color': 'green'&#125;</code></pre><blockquote><p>确定需要使用多行来定义字典时，在输入左花括号后按回车键，再在下一行缩进四个空格，指定第一个键—值对，并在它后面加上一个逗号。此后你再次按回车键时，文本编辑器将自动缩进后续键—值对，且缩进量与第一个键—值对相同。<br>演示了如何将较长的print语句分成多行。单词print比大多数字典名都短，因此<br>让输出的第一部分紧跟在左括号后面是合理的。请选择在合适的地方拆分要打印的内容，并在第一行末尾加上一个拼接运算符（+）</p></blockquote><h3 id="遍历字典">遍历字典</h3><hr><ol><li>遍历字典中的所有键值对</li><li>遍历字典中的所有键</li><li>遍历字典中的所有值</li></ol><h4 id="遍历所有的键值对">遍历所有的键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123; </span><br><span class="line"> <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items(): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nKey: &quot;</span> + key) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Value: &quot;</span> + value) </span><br></pre></td></tr></table></figure><pre><code>Key: usernameValue: efermiKey: firstValue: enricoKey: lastValue: fermi</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items(): </span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">&quot;&#x27;s favorite language is &quot;</span> + </span><br><span class="line">          language.title() + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Jen's favorite language is Python.Sarah's favorite language is C.Edward's favorite language is Ruby.Phil's favorite language is Python.</code></pre><h4 id="遍历所有的键">遍历所有的键</h4><p>遍历字典时，会默认遍历所有的键<br><code>keys()</code><br>实际上，它返回一个列表，其中包含字典中的所有键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys(): </span><br><span class="line">    <span class="built_in">print</span>(name.title()) </span><br></pre></td></tr></table></figure><pre><code>JenSarahEdwardPhil</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">friends = [<span class="string">&#x27;phil&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys(): </span><br><span class="line">    <span class="built_in">print</span>(name.title()) </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> friends: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hi &quot;</span> + name.title() + </span><br><span class="line">              <span class="string">&quot;, I see your favorite language is &quot;</span> + </span><br><span class="line">              favorite_languages[name].title() + <span class="string">&quot;!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>JenSarahHi Sarah, I see your favorite language is C!EdwardPhilHi Phil, I see your favorite language is Python!</code></pre><h4 id="按顺序遍历字典中的所有键">按顺序遍历字典中的所有键</h4><p><code>sorted</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()): </span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><pre><code>edwardjenphilsarah</code></pre><h4 id="遍历字典中的所有值">遍历字典中的所有值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><pre><code>pythoncrubypython</code></pre><p>通过对包含重复元素的列表调用<code>set()</code>，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><pre><code>rubycpython</code></pre><h3 id="嵌套">嵌套</h3><hr><h4 id="字典列表">字典列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何管理成群结队的外星人</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125; </span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125; </span><br><span class="line"></span><br><span class="line">aliens = [alien_0, alien_1, alien_2] </span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens: </span><br><span class="line">    <span class="built_in">print</span>(alien) </span><br></pre></td></tr></table></figure><pre><code>&#123;'color': 'green', 'points': 5&#125;&#123;'color': 'yellow', 'points': 10&#125;&#123;'color': 'red', 'points': 15&#125;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用range()生成了30个外星人</span></span><br><span class="line"><span class="comment"># 创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = [] </span><br><span class="line"><span class="comment"># 创建30个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>): </span><br><span class="line">    new_alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125; </span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]: </span><br><span class="line">        <span class="keyword">if</span> alien[<span class="string">&#x27;color&#x27;</span>] == <span class="string">&#x27;green&#x27;</span>: </span><br><span class="line">            alien[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span> </span><br><span class="line">            alien[<span class="string">&#x27;speed&#x27;</span>] = <span class="string">&#x27;medium&#x27;</span> </span><br><span class="line">            alien[<span class="string">&#x27;points&#x27;</span>] = <span class="number">10</span> </span><br><span class="line">        <span class="keyword">elif</span> alien[<span class="string">&#x27;color&#x27;</span>] == <span class="string">&#x27;yellow&#x27;</span>: </span><br><span class="line">            alien[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;red&#x27;</span> </span><br><span class="line">            alien[<span class="string">&#x27;speed&#x27;</span>] = <span class="string">&#x27;fast&#x27;</span> </span><br><span class="line">            alien[<span class="string">&#x27;points&#x27;</span>] = <span class="number">15</span> </span><br><span class="line">    aliens.append(new_alien) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]: </span><br><span class="line">    <span class="built_in">print</span>(alien) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;...&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示创建了多少个外星人</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total number of aliens: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(aliens))) </span><br></pre></td></tr></table></figure><pre><code>&#123;'color': 'red', 'points': 15, 'speed': 'fast'&#125;&#123;'color': 'red', 'points': 15, 'speed': 'fast'&#125;&#123;'color': 'red', 'points': 15, 'speed': 'fast'&#125;&#123;'color': 'green', 'points': 5, 'speed': 'slow'&#125;&#123;'color': 'green', 'points': 5, 'speed': 'slow'&#125;...Total number of aliens: 30</code></pre><h4 id="在字典中存储列表">在字典中存储列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储所点比萨的信息</span></span><br><span class="line">pizza = &#123;<span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>, </span><br><span class="line">         <span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>], &#125; </span><br><span class="line"><span class="comment"># 概述所点的比萨</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You ordered a &quot;</span> + pizza[<span class="string">&#x27;crust&#x27;</span>] + <span class="string">&quot;-crust pizza &quot;</span> + </span><br><span class="line"> <span class="string">&quot;with the following toppings:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping) </span><br></pre></td></tr></table></figure><pre><code>You ordered a thick-crust pizza with the following toppings:    mushrooms    extra cheese</code></pre><p>每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>], </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>], </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>], </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>], </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items(): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + name.title() + <span class="string">&quot;&#x27;s favorite languages are:&quot;</span>) </span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + language.title())</span><br></pre></td></tr></table></figure><pre><code>Jen's favorite languages are:    Python    RubySarah's favorite languages are:    CEdward's favorite languages are:    Ruby    GoPhil's favorite languages are:    Python    Haskell</code></pre><h4 id="在字典中存储字典">在字典中存储字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">users = &#123; </span><br><span class="line"> <span class="string">&#x27;aeinstein&#x27;</span>: &#123; </span><br><span class="line"> <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>, </span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="string">&#x27;mcurie&#x27;</span>: &#123; </span><br><span class="line"> <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>, </span><br><span class="line"> &#125;, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items(): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username) </span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>] </span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>] </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title()) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title()) </span><br></pre></td></tr></table></figure><pre><code>Username: aeinstein    Full name: Albert Einstein    Location: PrincetonUsername: mcurie    Full name: Marie Curie    Location: Paris</code></pre><h3 id="小结-2">小结</h3><p>如何定义字典，以及如何使用存储在字典中的信息；如何访问和修改字典中的元素，以及如何遍历字典中的所有信息；如何遍历字典中所有的键值对、所有的键和所有的值；如何在列表中嵌套字典、在字典中嵌套列表以及在字典中嵌套字典</p>]]></content>
    
    
    <summary type="html">基础二</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础--变量与列表</title>
    <link href="https://agoni66.github.io/posts/1000150.html"/>
    <id>https://agoni66.github.io/posts/1000150.html</id>
    <published>2025-01-18T03:30:00.000Z</published>
    <updated>2025-04-12T06:52:36.539Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange no-icon flat"><p><font size="4"><b>python基础导航✨✨✨</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000150.html">python基础–变量与列表</a> ⇦ 当前位置🚀</p></li><li><p>🐳<a href="https://agoni66.github.io/posts/1000151.html">python基础–if语句与字典</a></p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000152.html">python基础–用户输入和while循环</a></p></li><li><p>🐰<a href="https://agoni66.github.io/posts/1000153.html">python基础–函数</a></p></li><li><p>🐥<a href="https://agoni66.github.io/posts/1000154.html">python基础–类</a></p></li><li><p>🐶<a href="https://agoni66.github.io/posts/1000155.html">python基础–文件与异常</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000156.html">python基础–外星人入侵小游戏</a></p></li><li><p>🦄<a href="https://agoni66.github.io/posts/1000157.html">python基础–数据可视化之生成数据</a></p></li><li><p>🐲<a href="https://agoni66.github.io/posts/1000158.html">python基础–数据可视化之下载数据</a></p></li><li><p>🐴<a href="https://agoni66.github.io/posts/1000159.html">python基础–数据可视化之使用API</a></p></li></ol></div><h3 id="世界的开始">世界的开始</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello world!&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Hello world!</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python world!&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Hello Python world!</code></pre><p>添加了一个名为<code>message</code>的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello Python world!&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(message) </span><br></pre></td></tr></table></figure><pre><code>Hello Python world!</code></pre><h2 id="变量">变量</h2><hr><p>在程序中可随时修改变量的值，而Python将始终记录变量的最新值</p><h3 id="变量的命名">变量的命名</h3><ol><li>变量名只能包含字母、数字和下划线</li><li>变量名不能包含空格，但可使用下划线来分隔其中的单词</li><li>不要将Python关键字和函数名用作变量名</li><li><strong>慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0</strong></li></ol><h3 id="字符串">字符串</h3><p>以下都是方法 .xx()</p><p><code>title()</code>首字母大写<br><code>upper()</code>全部大写<br><code>lower()</code>全部小写<br>使用<strong>加号<code>+</code></strong> 来合并字符串<br>使用<strong>字符组合<code>\t</code></strong> 添加制表符<br>使用<strong>字符组合<code>\n</code></strong> 添加换行符<br><code>rstrip</code>删除字符串末尾的空白（暂时）<br><code>lstrip</code>删除字符串开头的空白（暂时）<br><code>strip</code>删除字符串两端的空白（暂时）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;ada lovelace&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br></pre></td></tr></table></figure><pre><code>Ada LovelaceADA LOVELACEada lovelace</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span> </span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span> </span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name </span><br><span class="line"><span class="built_in">print</span>(full_name)</span><br></pre></td></tr></table></figure><pre><code>ada lovelace</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制表符\t</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\tPython&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Python    Python</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 换行符\n</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Languages:\nPython\nC\nJavaScript&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>Languages:PythonCJavaScript</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Languages:\n\tPython\n\tC\n\tJavaScript&quot;</span>) </span><br></pre></td></tr></table></figure><pre><code>Languages:    Python    C    JavaScript</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><pre><code>The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those!</code></pre><h2 id="列表">列表</h2><hr><h3 id="索引从-0-而不是-1-开始">索引从 0 而不是 1 开始</h3><ul><li>修改列表元素</li><li>添加列表元素</li><li>删除列表元素</li><li>组织列表元素（排序）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;Trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure><pre><code>['Trek', 'cannondale', 'redline', 'specialized']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>Trek</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].upper())</span><br></pre></td></tr></table></figure><pre><code>TREK</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改列表元素</span></span><br><span class="line">bicycles[<span class="number">0</span>]=bicycles[<span class="number">0</span>].title()</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>Trek</code></pre><p>添加列表元素(<code>append</code> <code>insert</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><pre><code>['honda', 'yamaha', 'suzuki', 'ducati']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">motorcycles.insert(<span class="number">2</span>, <span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><pre><code>['honda', 'yamaha', 'ducati', 'suzuki']</code></pre><p>删除列表元素(<code>del</code> <code>pop</code> <code>remove</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><pre><code>['yamaha', 'suzuki']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><pre><code>['honda', 'yamaha', 'suzuki']suzuki['honda', 'yamaha']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line">popped_motorcycle = motorcycles.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><pre><code>['honda', 'yamaha', 'suzuki']honda['yamaha', 'suzuki']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line">motorcycles.remove(<span class="string">&#x27;suzuki&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><pre><code>['honda', 'yamaha', 'suzuki', 'ducati']['honda', 'yamaha', 'ducati']</code></pre><p>方法<code>remove()</code>只删除第一个指定的值</p><h3 id="排序">排序</h3><hr><p><code>sort</code>永久性排序<br><code>sorted</code>临时排序<br><code>reverse</code>倒序<br><code>len</code>确定列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;aito&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;maybach&#x27;</span>] </span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars) </span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>) <span class="comment">#reverse 反向</span></span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line">cars.sort(reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><pre><code>['aito', 'bmw', 'maybach', 'toyota']['toyota', 'maybach', 'bmw', 'aito']['aito', 'bmw', 'maybach', 'toyota']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;aito&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;maybach&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars,reverse=<span class="literal">True</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></table></figure><pre><code>Here is the original list:['bmw', 'aito', 'toyota', 'maybach']Here is the sorted list:['toyota', 'maybach', 'bmw', 'aito']Here is the sorted list:['aito', 'bmw', 'maybach', 'toyota']Here is the original list again:['bmw', 'aito', 'toyota', 'maybach']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;aito&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;maybach&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br><span class="line">cars.reverse() </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></table></figure><pre><code>['bmw', 'aito', 'toyota', 'maybach']['maybach', 'toyota', 'aito', 'bmw']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长度</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;aito&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;maybach&#x27;</span>] </span><br><span class="line"><span class="built_in">len</span>(cars)</span><br></pre></td></tr></table></figure><pre><code>4</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;aito&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;maybach&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(cars[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)Cell In[10], line 2      1 cars = ['bmw', 'aito', 'toyota', 'maybach'] ----&gt; 2 print(cars[4])IndexError: list index out of range</code></pre><p>list index out of range<br>列表索引超出范围(或者是列表为空)</p><h3 id="操作列表">操作列表</h3><hr><p><code>range()</code>生成数字<br><code>list()</code>转换数字成列表<br><code>min()</code>最小值<br><code>max()</code>最大值<br><code>sum()</code>求和<br><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/44.png" alt="image-2.png"></p><h4 id="遍历">遍历</h4><ul><li>对于用于存储列表中每个值的临时变量，可指定任何名称</li><li>避免缩进错误</li><li>不要遗漏了冒号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;Black Swan&#x27;</span>, <span class="string">&#x27;Huohuo&#x27;</span>, <span class="string">&#x27;Silver Wolf&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> magicain <span class="keyword">in</span> magicians: </span><br><span class="line">    <span class="built_in">print</span>(magicain)</span><br></pre></td></tr></table></figure><pre><code>Black SwanHuohuoSilver Wolf</code></pre><h4 id="创建数值列表">创建数值列表</h4><p><code>range</code>函数 左开右闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>): </span><br><span class="line">    <span class="built_in">print</span>(value) </span><br></pre></td></tr></table></figure><pre><code>1234</code></pre><p>使用 <code>range</code>函数 创建数字列表<br>可使用函数<code>list()</code>将<code>range()</code>的结果直接转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5]</code></pre><p><code>range</code>可指定步长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>)) </span><br><span class="line"><span class="built_in">print</span>(even_numbers) </span><br></pre></td></tr></table></figure><pre><code>[2, 4, 6, 8, 10]</code></pre><p>在上面这个例子里面，函数range()从2开始数，然后不断地加2，直到达到或超过终值（11）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求开平方的数字集列表(例子：从1到10)</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    square = value ** <span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><pre><code>[1][1, 4][1, 4, 9][1, 4, 9, 16][1, 4, 9, 16, 25][1, 4, 9, 16, 25, 36][1, 4, 9, 16, 25, 36, 49][1, 4, 9, 16, 25, 36, 49, 64][1, 4, 9, 16, 25, 36, 49, 64, 81][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code></pre><h4 id="列表简单统计">列表简单统计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">min</span>(digits)</span><br></pre></td></tr></table></figure><pre><code>0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">max</span>(digits)</span><br></pre></td></tr></table></figure><pre><code>9</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">sum</span>(digits)</span><br></pre></td></tr></table></figure><pre><code>45</code></pre><h4 id="列表解析">列表解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)] </span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code></pre><p>要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，<br>并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计<br>算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = [number <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000001</span>)]</span><br><span class="line"><span class="built_in">min</span>(numbers)</span><br><span class="line"><span class="built_in">max</span>(numbers)</span><br><span class="line"><span class="built_in">sum</span>(numbers)</span><br></pre></td></tr></table></figure><pre><code>500000500000</code></pre><h3 id="切片">切片</h3><hr><p><code>左开右闭</code><br>要创建切片，可指定要使用的第一个元素和最后一个元素的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出列表中的前三个元素</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) </span><br></pre></td></tr></table></figure><pre><code>['charles', 'martina', 'michael']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取列表的第2~4个元素</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>]) </span><br></pre></td></tr></table></figure><pre><code>['martina', 'michael', 'florence']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有指定第一个索引，Python将自动从列表开头开始</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>]) </span><br></pre></td></tr></table></figure><pre><code>['charles', 'martina', 'michael', 'florence']</code></pre><p><code>:</code>不可以缺失</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要让切片终止于列表末尾</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:]) </span><br></pre></td></tr></table></figure><pre><code>['martina', 'michael', 'florence', 'eli']</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要输出名单上的最后三名队员</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure><pre><code>['michael', 'florence', 'eli']</code></pre><h4 id="遍历切片">遍历切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这是前三名队员&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]: </span><br><span class="line">     <span class="built_in">print</span>(player.title())</span><br></pre></td></tr></table></figure><pre><code>这是前三名队员CharlesMartinaMichael</code></pre><h4 id="复制列表">复制列表</h4><p>复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引<code>[:]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>] </span><br><span class="line">friend_foods = my_foods[:] </span><br><span class="line">my_foods.append(<span class="string">&#x27;ice cream&#x27;</span>)</span><br><span class="line">friend_foods.pop(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我最爱的食物是：&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(my_foods) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n我朋友最爱的食物是：&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(friend_foods) </span><br></pre></td></tr></table></figure><pre><code>我最爱的食物是：['pizza', 'falafel', 'carrot cake', 'ice cream']我朋友最爱的食物是：['pizza', 'falafel']</code></pre><h3 id="元组">元组</h3><hr><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组<br>元组看起来犹如列表，但使用圆括号而不是方括号来标识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中</span></span><br><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>]) </span><br></pre></td></tr></table></figure><pre><code>20050</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dimensions[<span class="number">0</span>] = <span class="number">250</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)Cell In[23], line 1----&gt; 1 dimensions[0] = 250TypeError: 'tuple' object does not support item assignment</code></pre><p><strong>试图修改元组的操作是被禁止的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历元组中的所有值</span></span><br><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line">     <span class="built_in">print</span>(dimension) </span><br></pre></td></tr></table></figure><pre><code>20050</code></pre><h4 id="修改元组变量">修改元组变量</h4><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前述矩形的尺寸，可重新定义整个元组</span></span><br><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line">     <span class="built_in">print</span>(dimension) </span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line">    <span class="built_in">print</span>(dimension) </span><br></pre></td></tr></table></figure><pre><code>Original dimensions:20050Modified dimensions:400100</code></pre><h3 id="设置代码格式">设置代码格式</h3><hr><ul><li>PEP8</li><li>缩进 四个空格</li><li>行长 不超过80个字符（建议72个）</li><li>空行</li><li><a href="https://peps.python.org/pep-0008/">https://peps.python.org/pep-0008/</a></li></ul>]]></content>
    
    
    <summary type="html">基础一</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础" scheme="https://agoni66.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>神经网络</title>
    <link href="https://agoni66.github.io/posts/1000142.html"/>
    <id>https://agoni66.github.io/posts/1000142.html</id>
    <published>2024-12-02T10:30:00.000Z</published>
    <updated>2025-01-26T11:09:26.646Z</updated>
    
    <content type="html"><![CDATA[<div class="note purple no-icon flat"><p><font size="4"><b>深度学习入门导航🚀🚀🚀</b></font></p><ol><li><p>🎉<a href="https://agoni66.github.io/posts/1000141.html">感知机</a></p></li><li><p>🎈<a href="https://agoni66.github.io/posts/1000142.html">神经网络</a> ⇦ 当前位置🪂</p></li><li><p>🧨<a href="https://agoni66.github.io/posts/1000143.html">神经网络的学习</a></p></li><li><p>🎊<a href="https://agoni66.github.io/posts/1000144.html">误差反向传播法</a></p></li><li><p>🧧<a href="https://agoni66.github.io/posts/1000145.html">与学习相关的技巧</a></p></li><li><p>🎑<a href="https://agoni66.github.io/posts/1000146.html">卷积神经网络</a></p></li><li><p>🌈<a href="https://agoni66.github.io/posts/1000147.html">深度学习</a></p></li></ol></div><blockquote><p>感知机设置权重的工作还是人工进行的</p><p>神经网络的一个重要性质是它可以自动地从数据中学习到合适的权重参数</p></blockquote><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/13.png" alt="image.png"></p><ul><li>输入层 第0层</li><li>中间层（隐藏层） 第1层</li><li>输出层 第2层</li></ul><h2 id="激活函数">激活函数</h2><p>将输入信号的总和转换为输出信号</p><p>比如感知机，h(x)就是<strong>激活函数</strong>：</p><p>$$<br>y=h(b+w_1x_1+w_2x_2)<br>$$</p><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing="0.7em 0.4em"><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>⩽</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math></p><br><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/14.png" alt="image.png"></p><br><p>$$<br>\begin{array}{c}a=b+w_1x_1+w_2x_2\\y=h(a)\end{array}<br>$$</p><p><strong>表示神经元的○中明确显示了激活函数的计算过程</strong></p><ul><li>节点a <strong>信号的加权总和</strong></li><li>h() <strong>激活函数</strong></li></ul><h3 id="sigmoid函数">sigmoid函数</h3><p>$$<br>h(x)=\frac1{1+\exp(-x)}<br>$$</p><ul><li>$exp(−x)$ 表示$e^{−x}$的意思</li><li>$e$ 纳皮尔常数2.7182</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sigmoid(<span class="number">1.0</span>))</span><br><span class="line"><span class="built_in">print</span>(sigmoid(<span class="number">2.0</span>)) </span><br></pre></td></tr></table></figure><pre><code>0.73105857863000490.8807970779778823</code></pre><p><font color=orange><strong>图形</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(-<span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-<span class="number">0.1</span>, <span class="number">1.1</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/16.png" alt="image.png"></p><h3 id="阶跃函数">阶跃函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step_function</span>(<span class="params">x</span>):</span><br><span class="line">    y = x &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> y.astype(np.<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.array(x&gt;<span class="number">0</span>, dtype=bp.int32)</span><br></pre></td></tr></table></figure><p><font color=orange><strong>图形</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.array(x &gt; <span class="number">0</span>, dtype=np.int32)</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">y = step_function(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-<span class="number">0.1</span>, <span class="number">1.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/17.png" alt="image.png"></p><h3 id="sigmoid函数和阶跃函数的比较">sigmoid函数和阶跃函数的比较</h3><ul><li>平滑性</li><li>感知机中神经元之间流动的是0或1的二元信号（阶跃函数）</li><li>神经网络中流动的是连续的实数值信号（sigmoid函数）</li><li><strong>形状相似</strong></li><li><strong>非线性函数</strong> （$h(x)=cx$为线性函数）</li></ul><blockquote><p><font color=orange><strong>神经网络的激活函数必须使用非线性函数</strong></font><br>线性函数：不管如何加深层数，总是存在与之等效的“无隐藏层的神经网络”</p></blockquote><h3 id="ReLU函数">ReLU函数</h3><p><strong>ReLU函数在输入大于0时，直接输出该值；在输入小于等于0时，输出0</strong></p><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing=".2em"><mtr><mtd><mi>x</mi></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>⩽</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br></pre></td></tr></table></figure><h2 id="多维数组的运算">多维数组的运算</h2><h3 id="神经网络的内积">神经网络的内积</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/18.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = np.array([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">W = np.array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line">Y = np.dot(X, W)</span><br><span class="line"><span class="built_in">print</span>(Y)</span><br><span class="line"><span class="comment"># [ 5 11 17]</span></span><br></pre></td></tr></table></figure><h2 id="3层神经网络的实现"><strong>3层神经网络的实现</strong></h2><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/19.png" alt="image.png"></p><p>符号：</p><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/20.png" alt="image.png"></p><ul><li>右上角表示权重和神经元的层号（从输入层开始）</li><li>右下角前面对应后一层的神经元</li><li>右下角后面对应前一层的神经元</li></ul><p><strong>各层间信号传递的实现</strong></p><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/21.png" alt="image.png"></p><ul><li>灰色的为表示偏置的神经元（右下角的神经元只有一个）</li></ul><p><strong>公式表达为</strong></p><p>$$<br>a_1^{(1)}=w_{11}^{(1)}x_1+w_{12}^{(1)}x_2+b_1^{(1)}<br>$$</p><p><strong>矩阵乘法运算公式为</strong></p><p>$$<br>A^{(1)}=XW^{(1)}+B^{(1)}<br>$$</p><p>其中，$A^(1)、X、B^(1)、W^(1)$如下所示</p><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable displaystyle="true" columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" rowspacing="3pt"><mtr><mtd><msup><mi mathvariant="bold-italic">A</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mtd><mtd><mi></mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msubsup><mi>a</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>a</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>a</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow><mo>,</mo><mi mathvariant="bold-italic">X</mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msub><mi>x</mi><mn>1</mn></msub></mtd><mtd><msub><mi>x</mi><mn>2</mn></msub></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow><mo>,</mo><msup><mi mathvariant="bold-italic">B</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msubsup><mi>b</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>b</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>b</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow></mtd></mtr><mtr><mtd><msup><mi mathvariant="bold-italic">W</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mtd><mtd><mi></mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msubsup><mi>w</mi><mrow><mn>11</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>21</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>31</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr><mtr><mtd><msubsup><mi>w</mi><mrow><mn>12</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>22</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>32</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow></mtd></mtr></mtable></math></p><h3 id="具体代码和流程">具体代码和流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.array([<span class="number">1.0</span>, <span class="number">0.5</span>])</span><br><span class="line">W1 = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>]])</span><br><span class="line">B1 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">A1 = np.dot(X, W1) + B1</span><br><span class="line">Z1 = sigmoid(A1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A1) <span class="comment"># [0.3 0.7 1.1]</span></span><br><span class="line"><span class="built_in">print</span>(Z1) <span class="comment"># [0.57444252 0.66818777 0.75026011]</span></span><br></pre></td></tr></table></figure><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/22.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">W2 = np.array([[<span class="number">0.1</span>, <span class="number">0.4</span>], [<span class="number">0.2</span>, <span class="number">0.5</span>], [<span class="number">0.3</span>, <span class="number">0.6</span>]])</span><br><span class="line">B2 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line"><span class="built_in">print</span>(Z1.shape) <span class="comment"># (3,)</span></span><br><span class="line"><span class="built_in">print</span>(W2.shape) <span class="comment"># (3, 2)</span></span><br><span class="line"><span class="built_in">print</span>(B2.shape) <span class="comment"># (2,)</span></span><br><span class="line">A2 = np.dot(Z1, W2) + B2</span><br><span class="line">Z2 = sigmoid(A2)</span><br></pre></td></tr></table></figure><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/23.png" alt="image.png"></p><blockquote><p>从第2层到输出层的信号传递的<strong>激活函数</strong>，一般地，回归问题可以使用恒等函数，二元分类问题可以使用sigmoid函数，多元分类问题可以使用softmax函数</p></blockquote><p><font color=orange><strong>代码总结</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_network</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;数据导入&#x27;&#x27;&#x27;</span></span><br><span class="line">    network = &#123;&#125;</span><br><span class="line">    network[<span class="string">&#x27;W1&#x27;</span>] = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">&#x27;b1&#x27;</span>] = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line">    network[<span class="string">&#x27;W2&#x27;</span>] = np.array([[<span class="number">0.1</span>, <span class="number">0.4</span>], [<span class="number">0.2</span>, <span class="number">0.5</span>], [<span class="number">0.3</span>, <span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">&#x27;b2&#x27;</span>] = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line">    network[<span class="string">&#x27;W3&#x27;</span>] = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>]])</span><br><span class="line">    network[<span class="string">&#x27;b3&#x27;</span>] = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">network, x</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;神经网络计算&#x27;&#x27;&#x27;</span></span><br><span class="line">    W1, W2, W3 = network[<span class="string">&#x27;W1&#x27;</span>], network[<span class="string">&#x27;W2&#x27;</span>], network[<span class="string">&#x27;W3&#x27;</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">&#x27;b1&#x27;</span>], network[<span class="string">&#x27;b2&#x27;</span>], network[<span class="string">&#x27;b3&#x27;</span>]</span><br><span class="line">    a1 = np.dot(x, W1) + b1</span><br><span class="line">    z1 = sigmoid(a1)</span><br><span class="line">    a2 = np.dot(z1, W2) + b2</span><br><span class="line">    z2 = sigmoid(a2)</span><br><span class="line">    a3 = np.dot(z2, W3) + b3</span><br><span class="line">    y = identity_function(a3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;恒等函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;sigmoid函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    e = <span class="number">2.718281828459045</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-n))</span><br><span class="line">    </span><br><span class="line">network = init_network()</span><br><span class="line">x = np.array([<span class="number">1.0</span>, <span class="number">0.5</span>])</span><br><span class="line">y = forward(network, x)</span><br><span class="line"><span class="built_in">print</span>(y) <span class="comment"># [ 0.31682708  0.69627909]</span></span><br></pre></td></tr></table></figure><h2 id="输出层的设计">输出层的设计</h2><p>一般而言，回归问题用<strong>恒等函数</strong>，分类问题用<strong>softmax函数</strong></p><ul><li>分类问题是数据属于哪一个类别的问题</li><li>回归问题是根据某个输入预测一个（连续的）数值的问题</li></ul><h3 id="softmax函数">softmax函数</h3><p><strong>softmax函数数学公式</strong></p><p>$$<br>y_k=\frac{\exp(a_k)}{\sum_{i=1}^n\exp(a_i)}<br>$$</p><p>softmax函数的实现中要进行指数函数的运算，但是此时指数函数的值很容易变得非常大</p><p><strong>softmax函数数学公式改进</strong></p><p>$$<br>\begin{aligned}<br>y_k=\frac{\exp(a_k)}{\sum_{i=1}^n\exp(a_i)} &amp; =\frac{\mathrm{C}\exp(a_k)}{\mathrm{C}\sum_{i=1}^n\exp(a_i)} \<br>&amp; =\frac{\exp(a_k+\log\mathrm{C})}{\sum_{i=1}^n\exp(a_i+\log\mathrm{C})} \<br>&amp; =\frac{\exp(a_k+\mathrm{C}^{\prime})}{\sum_{i=1}^n\exp(a_i+\mathrm{C}^{\prime})}<br>\end{aligned}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">a</span>):</span><br><span class="line">        c = np.<span class="built_in">max</span>()</span><br><span class="line">        exp_a = np.exp(a - c)</span><br><span class="line">        sum_exp_a = np.<span class="built_in">sum</span>(exp_a)</span><br><span class="line">      y = exp_a / sum_exp_a</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p><strong>softmax函数特征</strong></p><ul><li>softmax函数的输出是0.0到1.0之间的实数</li><li>softmax函数的输出值的总和是1</li><li>可以把softmax函数的输出解释为“概率”</li></ul><p><strong>输出层的神经元数量需要根据待解决的问题来决定</strong></p><h2 id="手写数字识别">手写数字识别</h2><blockquote><p><code>import sys,os sys.path.append(os.pardir)</code><br>sys.path.append(os.pardir)语句实际上是把父目录加入到sys.path（Python的搜索模块的路径集）中，从而可以导入父目录下的任何目录中的任何文件</p></blockquote><blockquote><p>Python有<code>pickle</code>这个便利的功能。这个功能可以将程序运行中的对象保存为文件。如果加载保存过的pickle文件，可以立刻复原之前程序运行中的对象</p></blockquote><h3 id="MNIST数据集">MNIST数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># import sys, os</span></span><br><span class="line"><span class="comment"># sys.path.append(os.pardir)  # 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">img_show</span>(<span class="params">img</span>):</span><br><span class="line">    pil_img = Image.fromarray(np.uint8(img))</span><br><span class="line">    pil_img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line">(x_train, t_train), (x_test, t_test) = load_mnist(flatten=<span class="literal">True</span>, normalize=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 0~59999 共 60000 张训练图像</span></span><br><span class="line">img = x_train[<span class="number">59999</span>]</span><br><span class="line">label = t_train[<span class="number">59999</span>]</span><br><span class="line"><span class="built_in">print</span>(label)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flatten=True 使得输入的图像是一维的数组，所以需要把它变回 28 x 28 的图像</span></span><br><span class="line"><span class="built_in">print</span>(img.shape)  <span class="comment"># (784,) 即 784的一维数组</span></span><br><span class="line">img = img.reshape(<span class="number">28</span>, <span class="number">28</span>)  <span class="comment"># 把图像的形状变为原来的尺寸 28 x 28 的二维数组</span></span><br><span class="line"><span class="built_in">print</span>(img.shape)  <span class="comment"># (28, 28)</span></span><br><span class="line"></span><br><span class="line">img_show(img)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">&#x27;You should use Python 3.x&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">url_base = <span class="string">&#x27;https://ossci-datasets.s3.amazonaws.com/mnist/&#x27;</span>  <span class="comment"># mirror site</span></span><br><span class="line">key_file = &#123;</span><br><span class="line">    <span class="string">&#x27;train_img&#x27;</span>:<span class="string">&#x27;train-images-idx3-ubyte.gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;train_label&#x27;</span>:<span class="string">&#x27;train-labels-idx1-ubyte.gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;test_img&#x27;</span>:<span class="string">&#x27;t10k-images-idx3-ubyte.gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;test_label&#x27;</span>:<span class="string">&#x27;t10k-labels-idx1-ubyte.gz&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">save_file = dataset_dir + <span class="string">&quot;/mnist.pkl&quot;</span></span><br><span class="line"></span><br><span class="line">train_num = <span class="number">60000</span></span><br><span class="line">test_num = <span class="number">10000</span></span><br><span class="line">img_dim = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">img_size = <span class="number">784</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_download</span>(<span class="params">file_name</span>):</span><br><span class="line">    file_path = dataset_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Downloading &quot;</span> + file_name + <span class="string">&quot; ... &quot;</span>)</span><br><span class="line">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_mnist</span>():</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> key_file.values():</span><br><span class="line">       _download(v)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_load_label</span>(<span class="params">file_name</span>):</span><br><span class="line">    file_path = dataset_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Converting &quot;</span> + file_name + <span class="string">&quot; to NumPy Array ...&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> gzip.<span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_load_img</span>(<span class="params">file_name</span>):</span><br><span class="line">    file_path = dataset_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Converting &quot;</span> + file_name + <span class="string">&quot; to NumPy Array ...&quot;</span>)    </span><br><span class="line">    <span class="keyword">with</span> gzip.<span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = np.frombuffer(f.read(), np.uint8, offset=<span class="number">16</span>)</span><br><span class="line">    data = data.reshape(-<span class="number">1</span>, img_size)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_convert_numpy</span>():</span><br><span class="line">    dataset = &#123;&#125;</span><br><span class="line">    dataset[<span class="string">&#x27;train_img&#x27;</span>] =  _load_img(key_file[<span class="string">&#x27;train_img&#x27;</span>])</span><br><span class="line">    dataset[<span class="string">&#x27;train_label&#x27;</span>] = _load_label(key_file[<span class="string">&#x27;train_label&#x27;</span>])    </span><br><span class="line">    dataset[<span class="string">&#x27;test_img&#x27;</span>] = _load_img(key_file[<span class="string">&#x27;test_img&#x27;</span>])</span><br><span class="line">    dataset[<span class="string">&#x27;test_label&#x27;</span>] = _load_label(key_file[<span class="string">&#x27;test_label&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_mnist</span>():</span><br><span class="line">    download_mnist()</span><br><span class="line">    dataset = _convert_numpy()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Creating pickle file ...&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(dataset, f, -<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_change_one_hot_label</span>(<span class="params">X</span>):</span><br><span class="line">    T = np.zeros((X.size, <span class="number">10</span>))</span><br><span class="line">    <span class="keyword">for</span> idx, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(T):</span><br><span class="line">        row[X[idx]] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_mnist</span>(<span class="params">normalize=<span class="literal">True</span>, flatten=<span class="literal">True</span>, one_hot_label=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;读入MNIST数据集</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class="line"><span class="string">    one_hot_label : </span></span><br><span class="line"><span class="string">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class="line"><span class="string">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class="line"><span class="string">    flatten : 是否将图像展开为一维数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_file):</span><br><span class="line">        init_mnist()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">&#x27;train_img&#x27;</span>, <span class="string">&#x27;test_img&#x27;</span>):</span><br><span class="line">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class="line">            dataset[key] /= <span class="number">255.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> one_hot_label:</span><br><span class="line">        dataset[<span class="string">&#x27;train_label&#x27;</span>] = _change_one_hot_label(dataset[<span class="string">&#x27;train_label&#x27;</span>])</span><br><span class="line">        dataset[<span class="string">&#x27;test_label&#x27;</span>] = _change_one_hot_label(dataset[<span class="string">&#x27;test_label&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flatten:</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">&#x27;train_img&#x27;</span>, <span class="string">&#x27;test_img&#x27;</span>):</span><br><span class="line">            dataset[key] = dataset[key].reshape(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dataset[<span class="string">&#x27;train_img&#x27;</span>], dataset[<span class="string">&#x27;train_label&#x27;</span>]), (dataset[<span class="string">&#x27;test_img&#x27;</span>], dataset[<span class="string">&#x27;test_label&#x27;</span>]) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    init_mnist()</span><br></pre></td></tr></table></figure><h3 id="神经网络的推理处理">神经网络的推理处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> common.functions <span class="keyword">import</span> sigmoid, softmax</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    (x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="literal">True</span>, flatten=<span class="literal">True</span>, one_hot_label=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> x_test, t_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_network</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sample_weight.pkl&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 使用 pickle 模块加载存储在文件中的网络参数（第一到第三层的权重和偏置）</span></span><br><span class="line">        network = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">network, x</span>):</span><br><span class="line">    W1, W2, W3 = network[<span class="string">&#x27;W1&#x27;</span>], network[<span class="string">&#x27;W2&#x27;</span>], network[<span class="string">&#x27;W3&#x27;</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">&#x27;b1&#x27;</span>], network[<span class="string">&#x27;b2&#x27;</span>], network[<span class="string">&#x27;b3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    a1 = np.dot(x, W1) + b1</span><br><span class="line">    z1 = sigmoid(a1)</span><br><span class="line">    a2 = np.dot(z1, W2) + b2</span><br><span class="line">    z2 = sigmoid(a2)</span><br><span class="line">    a3 = np.dot(z2, W3) + b3</span><br><span class="line">    y = softmax(a3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">x, t = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    y = predict(network, x[i])</span><br><span class="line">    p= np.argmax(y) <span class="comment"># np.argmax(x)函数取出数组中的最大值的索引，获取概率最高的元素的索引</span></span><br><span class="line">    <span class="keyword">if</span> p == t[i]:</span><br><span class="line">        accuracy_cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy:&quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(accuracy_cnt) / <span class="built_in">len</span>(x)))</span><br><span class="line"><span class="comment"># Accuracy:0.9352</span></span><br></pre></td></tr></table></figure><ul><li><code>np.argmax(x)</code>函数取出数组中的最大值的索引</li><li><strong>正规化</strong> 把数据限定到某个范围内的处理，最常规是0~1</li><li><strong>预处理</strong> 对神经网络的输入数据进行某种既定的转换，比如正规化</li></ul><h3 id="批处理">批处理</h3><ul><li><strong>批</strong> 打包式的输入数据</li><li>批处理一次性计算大型数组要比分开逐步计算各个小型数组速度更快</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">100</span> <span class="comment"># 批数量</span></span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), batch_size):</span><br><span class="line">    x_batch = x[i:i+batch_size]</span><br><span class="line">    y_batch = predict(network, x_batch)</span><br><span class="line">    p = np.argmax(y_batch, axis=<span class="number">1</span>)</span><br><span class="line">    accuracy_cnt += np.<span class="built_in">sum</span>(p == t[i:i+batch_size])</span><br></pre></td></tr></table></figure><p><strong>代码解释</strong></p><ul><li><code>range(start, end, step)</code> 生成的列表中的下一个元素会增加step指定的值</li><li><code>x[i:i+batch_size]</code> 切片抽取批数据</li><li><code>np.argmax(y_batch, axis=1)</code> 沿着第1维方向找到值最大的元素的索引</li></ul><blockquote><p><strong>矩阵的第0维是列方向，第1维是行方向</strong></p></blockquote><blockquote><p>对于数组或列表的比较，例如 <code>array1 == array2</code>，会返回一个布尔数组</p></blockquote>]]></content>
    
    
    <summary type="html">神经网络</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://agoni66.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://agoni66.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>感知机</title>
    <link href="https://agoni66.github.io/posts/1000141.html"/>
    <id>https://agoni66.github.io/posts/1000141.html</id>
    <published>2024-11-29T10:30:00.000Z</published>
    <updated>2025-01-21T10:07:05.725Z</updated>
    
    <content type="html"><![CDATA[<div class="note purple no-icon flat"><p><font size="4"><b>深度学习入门导航🚀🚀🚀</b></font></p><ol><li><p>🎉<a href="https://agoni66.github.io/posts/1000141.html">感知机</a> ⇦ 当前位置🪂</p></li><li><p>🎈<a href="https://agoni66.github.io/posts/1000142.html">神经网络</a></p></li><li><p>🧨<a href="https://agoni66.github.io/posts/1000143.html">神经网络的学习</a></p></li><li><p>🎊<a href="https://agoni66.github.io/posts/1000144.html">误差反向传播法</a></p></li><li><p>🧧<a href="https://agoni66.github.io/posts/1000145.html">与学习相关的技巧</a></p></li><li><p>🎑<a href="https://agoni66.github.io/posts/1000146.html">卷积神经网络</a></p></li><li><p>🌈<a href="https://agoni66.github.io/posts/1000147.html">深度学习</a></p></li></ol></div><blockquote><p>感知机(perceptron)是由美国学者Frank Rosenblatt在1957年提出来的</p></blockquote><p><strong>感知机接收多个输入信号，输出一个信号</strong></p><p><strong>感知机的信号只有“流/不流”( 1/0)两种取值</strong></p><h3 id="感知机是什么">感知机是什么</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.png" alt="image.png"></p><ul><li>$x_1、x_2$ 输入信号</li><li>$y$ 输出信号</li><li>$w_1、w_2$ 权重</li><li>图中的圆圈○ 神经元|节点</li><li>输入信号被送往神经元时，会被分别乘以固定的权重（$w_1x_1、w_2x_2$）</li><li>神经元被激活 神经元会计算传送过来的信号的总和，只有当这个总和超过了<strong>某个界限值</strong>时，才会输出1</li><li>阈值$θ$ 这个界限值</li></ul><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN" fence="true" stretchy="true" symmetric="true"></mo><mi>y</mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing=".2em"><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>⩽</mo><mi>θ</mi><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>&gt;</mo><mi>θ</mi><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math></p><h2 id="简单逻辑电路">简单逻辑电路</h2><h3 id="与门">与门</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/2.png" alt="image.png"></p><p>满足与门（同时为1，信号的加权总和才会超过阈值$θ$）的参数例子：</p><ul><li>$(w_1,w_2, θ) = (0.5, 0.5, 0.7)$</li><li>$(w_1,w_2, θ) = (0.5, 0.5, 0.8)$</li><li>$(w_1,w_2, θ) = (1.0, 1.0, 1.0)$</li></ul><h3 id="与非门">与非门</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/3.png" alt="image.png"></p><p>满足与非门（不同时为零，信号的加权总和就会超过阈值$θ$）的参数例子：$(w_1,w_2, θ) = (-0.5, -0.5, -0.7)$</p><blockquote><p>只要把实现与门的参数值的符号取反，就可以实现与非门</p></blockquote><h3 id="或门">或门</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/4.png" alt="image.png"></p><p>满足或门（只要有一个 1 ，信号的加权总和就会超过阈值$θ$）的参数例子：$(w_1,w_2, θ) = (0.5, 0.5, 0.3)$</p><h2 id="感知机的实现">感知机的实现</h2><h3 id="简单实现与门">简单实现与门</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AND</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    w1, w2, theta = <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.7</span></span><br><span class="line">    tmp = x1*w1 + x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> tmp &gt; theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">AND(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 输出0</span></span><br><span class="line">AND(<span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 输出0</span></span><br><span class="line">AND(<span class="number">0</span>, <span class="number">1</span>) <span class="comment"># 输出0</span></span><br><span class="line">AND(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 输出1</span></span><br></pre></td></tr></table></figure><h3 id="导入权重和偏置">导入权重和偏置</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/5.png" alt="image.png"></p><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN" fence="true" stretchy="true" symmetric="true"></mo><mi>y</mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing="0.83em 0.4em"><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>⩽</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math></p><ul><li>偏置的输入信号一直是1，为了区别会涂成<strong>灰色</strong></li><li>$θ$换成$−b$</li><li><strong>权重</strong> $w_1、w_2$</li><li><strong>偏置</strong> $b$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AND</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;与门实现&quot;&quot;&quot;</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = -<span class="number">0.7</span></span><br><span class="line">    tmp = np.<span class="built_in">sum</span>(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">NAND</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;与非门实现&quot;&quot;&quot;</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([-<span class="number">0.5</span>, -<span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">0.7</span></span><br><span class="line">    tmp = np.<span class="built_in">sum</span>(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">OR</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;或门实现&quot;&quot;&quot;</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = -<span class="number">0.2</span></span><br><span class="line">    tmp = np.<span class="built_in">sum</span>(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="感知机的局限性">感知机的局限性</h2><h3 id="异或门">异或门</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/6.png" alt="image.png"></p><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/7.png" alt="image.png"></p><p>事实上，用一条直线是无法将○和△分开的</p><p><strong>单层感知机的局限性就在于它只能表示由一条直线分割的空间</strong></p><h3 id="线性和非线性">线性和非线性</h3><ul><li>线性空间 由直线分割而成的空间</li><li>非线性空间 由曲线分割而成的空间</li></ul><h2 id="多层感知机">多层感知机</h2><h3 id="已有门电路的组合">已有门电路的组合</h3><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/8.png" alt="image.png"></p><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/9.png" alt="image.png"></p><h3 id="异或门的实现">异或门的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">XOR</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    s1 = NAND(x1, x2)</span><br><span class="line">    s2 = OR(x1, x2)</span><br><span class="line">    y = AND(s1, s2)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">XOR(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 输出0</span></span><br><span class="line">XOR(<span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 输出1</span></span><br><span class="line">XOR(<span class="number">0</span>, <span class="number">1</span>) <span class="comment"># 输出1</span></span><br><span class="line">XOR(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/10.png" alt="image.png"></p><blockquote><p>拥有权重的层实质只有2层，称为 <strong>2层感知机</strong> ；其他文献有的也称 <strong>3层感知机</strong></p></blockquote>]]></content>
    
    
    <summary type="html">深度学习</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://agoni66.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://agoni66.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>人工智能</title>
    <link href="https://agoni66.github.io/posts/1000140.html"/>
    <id>https://agoni66.github.io/posts/1000140.html</id>
    <published>2024-11-28T14:00:00.000Z</published>
    <updated>2025-01-18T04:07:56.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chapter-1-概论">Chapter 1 概论</h2><p><strong>什么是人工智能？</strong></p><ul><li>人工：人造的</li><li>智能：待解释（思考和理解的能力）</li><li>人工智能</li><li>数据→经过约定→信息</li><li>认识</li><li>知识 认识的关系或联系</li></ul><p><strong>什么是机器学习？</strong></p><p>大量数据训练的模型去做未来的预测</p><p>模型 约等于 函数</p><p>函数好不好取决于参数</p><p>机器学习就是调参</p><p>深度学习可以拟合任意函数</p><p><font color="dodgerblue"><h3>学派</h3></font></p><p>三个学派</p><ul><li><strong>符号主义</strong></li><li><strong>连接主义</strong></li><li><strong>行为主义</strong></li></ul><h3 id="机器学习概论">机器学习概论</h3><p>实现人工智能的手段</p><ul><li>识别和预测式机器学习的主要内容</li><li>要解决的问题中存在某种模式</li><li>这种模式不容易直接定义</li><li>有足够的数据可以帮助我们找出此模式</li></ul><p><font color="dodgerblue"><h3>发展历史</h3></font></p><ol><li>起源 1956 达特茅斯会议</li><li>一起 感知机</li><li>一落 感知机机理问题</li><li>二起 专家系统</li><li>二落 路线问题和计算能力</li><li>三起 大数据和互联网</li></ol><ul><li>知识是人们在改造客观世界中积累的认识和经验</li><li>知识表示是对知识的描述，用一组符号把知识编码成计算机理解的结构（对<strong>知识建模</strong>）</li></ul><h2 id="Chapter-2-知识表示和知识图谱">Chapter 2 知识表示和知识图谱</h2><p><font color="dodgerblue"><h3>状态空间法</h3></font></p><ul><li>组成<ul><li>状态（state） 表示问题解法中每一步问题状况的<strong>数据结构</strong></li><li>算符（operator） 把问题从一种状态转为另一种状态的<strong>手段</strong></li><li>状态空间方法 一个表示问题全部可能状态及其关系的<strong>图</strong></li></ul></li><li>状态空间可计为三元状态(S,F,G)<ul><li>S 初始状态集合</li><li>F 操作符合集</li><li>G 目标状态集合</li></ul></li></ul><ol><li>定义问题状态的描述形式</li><li>定义操作符</li><li>穷举做题<ul><li>代价小</li><li>步骤少</li></ul></li></ol><h3 id="问题归约法">问题归约法</h3><ul><li>组成<ul><li>一个初始问题描述</li><li>一套把问题变换为子问题的操作符</li><li>一台本原问题描述</li></ul></li><li>本质：把问题描述变换为子问题描述</li><li>与或树表示<ul><li>与树：两个与节点有<strong>小段圆弧</strong></li><li>或树</li><li>端节点：没有子节点的节点</li><li>终止节点：本原问题对应的节点</li><li>终止节点一定是端节点，端节点不一定是终止节点</li><li>不可解节点<ul><li>没有后裔的非终止节点</li><li>有后裔但全部后裔是不可解的的非终止节点（与）</li><li>有后裔但有一个后裔是不可解的的非终止节点（或）</li><li>不可解节点用小圆圈表示 。</li></ul></li></ul></li><li>解树：由可解节点组成，一定有<strong>可解的初始状态</strong></li></ul><p><font color="dodgerblue"><h3>谓语逻辑法</h3></font></p><ul><li>语法语义 谓词符号、变量符号、函数符号和常量函数</li><li>连词量词 原子公式、连词（$\wedge \vee \neg \Rightarrow$（蕴含） ）、量词（全称量词$\forall x$ 存在量词$\exists x$）</li><li>置换合一</li></ul><ol><li>定义谓词和个体</li><li>把个体代入谓词</li><li>使用连接词连接</li></ol><p><strong>题目</strong></p><p>例1：李明是个学生，他住的房间是白色的。<br>Isa(Liming, Student)∧Lives(Liming,House1)∧Color(House1, White)</p><p>例2：李明在学校的话，Wang也在学校。<br>At(Liming,School) =&gt; At(Wang, School)</p><p>例3：所有机器人都是灰色的<br>($\forall x$)[ROBOT(x)=&gt;COLOR(x, GRAY)]</p><p>例4：条条大路通罗马</p><p>（$\forall x$）[ Road(x)=&gt; Lead(x, Roma) ]</p><p>例5：Mary给每个人一本书<br>（$\forall x$）（$\exists y$）[ Person(x)∧Book(y)∧Give(Mary,x,y) ]</p><p>例6：人人爱运动</p><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable displaystyle="true" columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" rowspacing="3pt"><mtr><mtd></mtd><mtd><mtext>Man</mtext><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>:</mo><mstyle scriptlevel="0"><mspace width="1em"></mspace></mstyle><mi>x</mi><mtext> 是人</mtext></mtd></mtr><mtr><mtd></mtd><mtd><mtext>Love</mtext><mo>×</mo><mo stretchy="false">(</mo><mi>x</mi><mo>,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>:</mo><mstyle scriptlevel="0"><mspace width="1em"></mspace></mstyle><mi>x</mi><mtext> 爱 </mtext><mi>y</mi></mtd></mtr><mtr><mtd></mtd><mtd><mi></mi><mo stretchy="false">(</mo><mi mathvariant="normal">∀</mi><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext>Man</mtext><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo accent="false" stretchy="false">→</mo><mtext>Love</mtext><mo stretchy="false">(</mo><mi>x</mi><mo>,</mo><mtext>劳动</mtext><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mtd></mtr></mtable></math></p><p>例7：自然数都是大于等于零的整数</p><p>N(x)：x是自然数</p><p>I(x)：x是整数</p><p>GZ（x）：x大于等于零</p><p>$$<br>\left( \forall x\right) ( N\left( x\right) \rightarrow \left( G_{2}\left( x\right) \wedge I\left( x\right) \right)<br>$$</p><p><font color="dodgerblue"><h3>语义网络法</h3></font></p><ul><li>组成<ul><li>词法部分 词汇表符号（节点和弧线）</li><li>结构部分 约束条件（节点对）</li><li>过程部分 访问过程</li><li>语义部分 与描述相关的方法（确定节点的排列及其占有物和对应弧线）</li></ul></li><li>分类<ul><li>二元语义网络</li><li>多元语义网络</li></ul></li></ul><ol><li>确定问题中的所有对象以及各对象的属性</li><li>确定对象间的关系</li><li>下层节点会继承上层节点的属性，整理共同属性写入上层节点，避免冗余</li><li>将各对象作为语义网络的一个节点，而各对象间的关系作为各节点之间的弧</li></ol><h3 id="知识图谱">知识图谱</h3><ul><li>知识抽取</li><li>知识表示</li><li>知识融合</li><li>知识推理</li></ul><p>知识图谱以结构化的形式描述客观世界中概念、实体及其关系</p><h3 id="归纳演绎"><strong>归纳演绎</strong></h3><ol><li>先定义谓词</li><li>将已知事实和目标用谓词公式表示出来</li><li><strong>降上述已知事实和目标的否定化成子句集</strong>（取反）</li><li><strong>应用归结过程</strong></li></ol><p><strong>例子</strong></p><p>如果x是y的父亲，y是z的父亲，则x是z的祖父</p><p>每个人都有一个父亲</p><p>证明：对于某人u，一定存在一个人v，v是u的祖父</p><h2 id="Chapter-3-搜索和推理">Chapter 3 搜索和推理</h2><p>复杂问题的搜索，就是<strong>推理</strong></p><p>搜索是问题到问题解决的路径</p><h3 id="图搜索策略">图搜索策略</h3><h3 id="盲目搜索🔍">盲目搜索🔍</h3><ul><li>宽度优先 <strong>一定可以找到最优解</strong></li><li>深度优先</li><li>等代价搜索</li></ul><h3 id="启发式搜索🔍">启发式搜索🔍</h3><ul><li>估价函数<ul><li>排序时估算节点“希望”的量度</li><li>$f(n)=g(n)+h(n)$</li><li>$g(n)$ 当前节点n的代价</li><li>$h(n)$ 节点n到目标节点的估计代价</li></ul></li><li><strong>贪婪最佳优先搜索GBFS</strong><ul><li>优先搜索算法离目标最近的节点</li><li>只用启发式信息</li><li>即$f(n)=h(n)$</li></ul></li><li><strong>A*搜索</strong><ul><li>$f(n)=g(n)+h(n)$</li><li>可采纳性 $0≤h(N)≤h*(N)$ 估计代价小于等于真实代价</li><li>一致性</li><li>当启发式函数满足一致性时，A*算法是最优的</li></ul></li></ul><h3 id="Dijkstra算法">Dijkstra算法</h3><blockquote><p><strong>不能有负权边</strong></p></blockquote><p><font color="dodgerblue"><h3>推理</h3></font></p><p><strong>精确推理</strong></p><p>精确推理指的是根据已知信息或数据，严格按照逻辑规则或数学模型进行推理，以得出一个确切的结果或结论。这种方法通常用于概率图模型(如贝叶斯网络)、逻辑推理系统等。</p><p><strong>不精确推理</strong></p><p>不精确推理是指在无法通过精确方法获得答案或者精确方法计算成本过高的情况下，使用近似的方法来获取接近真实值的答案。这包括但不限于采样方法、变分推理等技术</p><p>精确和不精确区别就是结果或者说结论不一样</p><p><strong>假言推理和假言三段论</strong></p><h2 id="Chapter-4-遗传算法">Chapter 4 遗传算法</h2><p><strong>迭代式自适应概论性搜索算法</strong></p><h3 id="题外">题外</h3><ul><li>选模型就是选函数样子<ul><li>线性模型 $f(x)=wx+b$</li><li>SVM 超平面 $\dfrac{1}{\left| w\right|}$ 离最近的点距离都是1</li></ul></li></ul><h3 id="引入">引入</h3><ul><li>遗传</li><li>选择</li><li>变异</li><li>遗传算法是通过保持在解空间不同区域中各个点的搜索</li><li>染色体：多个基因的集合</li><li>基因 遗传因子</li><li>基因型 表现型</li><li>个体 群体</li><li>适应度函数：各个个体自适应环境的程度函数</li><li>选择：从群体中选择某个个体的方法</li><li>交叉（杂交）</li><li>变异</li><li>编码：表现型→基因型</li><li>解码：基因型→表现型</li></ul><h3 id="介绍">介绍</h3><ul><li>编码<ul><li>二进制</li></ul></li><li>适应度函数<ul><li>由目标函数变换成</li><li>适应度定标</li></ul></li><li>未成熟收敛<ul><li>特有现象</li><li>达到局部最优解或未有解但是无法继续选择</li></ul></li></ul><p><font color="dodgerblue"><h3>选择</h3></font></p><ul><li>适应度函数数值比例法<ul><li>随机变量值决定哪个个体被选中☑️</li></ul></li></ul><p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msub><mi>p</mi><mrow><mi>s</mi><mi>i</mi></mrow></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>i</mi></mrow></msub><mrow><mo>/</mo></mrow><munderover><mo data-mjx-texclass="OP">∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>N</mi></mrow></munderover><msub><mi>f</mi><mrow><mi>j</mi></mrow></msub><mo>,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo>,</mo><mn>2</mn><mo>,</mo><mn>3</mn><mo>⋅</mo><mo>⋅</mo><mo>⋅</mo><mi>N</mi></math></p><ul><li>随机竞争选择<ul><li>选择一对个体，让这对个体进行竞争，适应度高被选中，反复直到选满为止🈵</li></ul></li><li>排位次法<ul><li>按照适应度函数值依次排序，给每一个次序一个固定概率</li><li>也就是说适应度函数值与概率线性正相关</li></ul></li><li>最优保存法<ul><li>排位次法➕最优解保留</li></ul></li></ul><p><font color="dodgerblue"><h3>交叉</h3></font></p><p>选择后进入交配池交叉</p><ul><li>一点交叉<ul><li>允许染色体的切断点只有一个</li><li>产生与原配对个体完全不同的自带个体</li><li>不会改变原配对个体中相同位置上的值</li><li><strong>交叉方法</strong>：随机产生交叉位置，交叉位置后（尾部）互换</li></ul></li><li>多点交叉<ul><li>允许染色体的切断点有多个</li><li>有屏蔽位 0不交叉 1交叉</li><li>按照屏蔽位进行交叉❌</li></ul></li></ul><p><font color="dodgerblue"><h3>变异</h3></font></p><p>以极小的概率进行码位翻转（01翻转）</p><h3 id="停止准则">停止准则</h3><ul><li>最优个数的适应度</li></ul><p><img src="../img/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/24.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">期末速成人工智能</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>简单python100题</title>
    <link href="https://agoni66.github.io/posts/1000120.html"/>
    <id>https://agoni66.github.io/posts/1000120.html</id>
    <published>2024-11-26T14:00:00.000Z</published>
    <updated>2025-04-10T17:16:13.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-两数求和">1.两数求和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数字：&quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数字：&quot;</span>))</span><br><span class="line"><span class="built_in">sum</span> = num1 + num2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两数之和为：&quot;</span>, <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="2-找出100以内偶数">2.找出100以内偶数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">0</span>: <span class="comment"># if i is even</span></span><br><span class="line">        <span class="built_in">list</span>.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="3-找出100以内奇数并打印">3.找出100以内奇数并打印</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">1</span>: <span class="comment"># if i is odd</span></span><br><span class="line">        <span class="built_in">list</span>.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="4-判断素数">4.判断素数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">flag = <span class="literal">True</span> <span class="comment"># flag variable to check if the number is prime or not, initially set to True and is prime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;is a prime number&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;is a composite  number&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-求阶乘">5.求阶乘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import math</span></span><br><span class="line"><span class="comment"># num = int(input(&quot;请输入一个正整数：&quot;))</span></span><br><span class="line"><span class="comment"># print(f&quot;阶乘为：&#123;math.factorial(num)&#125;&quot;)</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个正整数：&quot;</span>))</span><br><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">    result *= i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>的阶乘为：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="6-求圆的周长">6.求圆的周长</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the radius of the circle: &quot;</span>))</span><br><span class="line">circumference = <span class="number">2</span> * <span class="number">3.14</span> * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The circumference of the circle is <span class="subst">&#123;circumference:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="7-求圆的面积">7.求圆的面积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the radius of the circle: &quot;</span>))</span><br><span class="line">area = <span class="number">3.14</span> * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The area of the circle is:&quot;</span>, area)</span><br></pre></td></tr></table></figure><h3 id="8-求直角三角形斜边长">8.求直角三角形斜边长</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first side: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second side: &quot;</span>))</span><br><span class="line">c  = math.sqrt(a**<span class="number">2</span> + b**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The length of the third side is:&quot;</span>, c)</span><br></pre></td></tr></table></figure><h3 id="9-比较三个数大小">9.比较三个数大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first number: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second number: &quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the third number: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [a, b, c]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;从小到大排序为:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="10-找出区间内的素数">10.找出区间内的素数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the lower limit: &quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the upper limit: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(num1, num2+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> is_prime(num):</span><br><span class="line">        <span class="built_in">list</span>.append(num)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The prime numbers in the given range are: <span class="subst">&#123;<span class="built_in">list</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="11-组合数字">11.组合数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有四个数字1 2 3 4 我们可以组成多少个不同且不重复的三位数？</span></span><br><span class="line">num = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> i!= j <span class="keyword">and</span> i!= k <span class="keyword">and</span> j!= k:</span><br><span class="line">                <span class="built_in">print</span>(i*<span class="number">100</span>+j*<span class="number">10</span>+k)</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;共有&quot;</span>, num, <span class="string">&quot;种不同且不重复的三位数&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="12-打印乘法口诀表">12.打印乘法口诀表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="13-水仙花数">13.水仙花数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">list</span> = [<span class="built_in">int</span>(j)**<span class="number">3</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>(i)]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">sum</span>(<span class="built_in">list</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="14-反向输出四位数">14.反向输出四位数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入四位数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">str</span>(a)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>的反向输出为：<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="15-判断字母">15.判断字母</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">all_letters = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&quot;Enter a letter: &quot;</span>).isalpha():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The letter is a valid letter.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The letter is not a valid letter.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="16-判断三角形">16.判断三角形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first side: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second side: &quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the third side: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a&lt;=<span class="number">0</span> <span class="keyword">or</span> b&lt;=<span class="number">0</span> <span class="keyword">or</span> c&lt;=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入数据不合法&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三角形是合理的&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三角形是不合理的&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="17-完数">17.完数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个数恰好等于除了它的所有因子的和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorization</span>(<span class="params">n</span>):</span><br><span class="line">    factors = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            factors.append(i)</span><br><span class="line">    <span class="keyword">return</span> factors</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">sum</span>(factorization(i)):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="18-找质数因子">18.找质数因子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 质数只能被 1 和它自己整除</span></span><br><span class="line"><span class="comment"># 因此在遍历过程中，一旦找到能整除的数</span></span><br><span class="line"><span class="comment"># 就将其视为质数因子并继续减少 a 的值</span></span><br><span class="line"><span class="comment"># 直到 a 最终被完全分解为质数因子</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">y = <span class="number">2</span> </span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> a != y:</span><br><span class="line">    <span class="keyword">if</span> a % y == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(y)</span><br><span class="line">        a = a / y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line"><span class="built_in">list</span>.append(<span class="built_in">int</span>(a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="19-海伦公式求三角形面积">19.海伦公式求三角形面积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first side: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second side: &quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the third side: &quot;</span>))</span><br><span class="line"></span><br><span class="line">p = (a + b + c) / <span class="number">2</span></span><br><span class="line">s = math.sqrt(p * (p - a) * (p - b) * (p - c))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The area of the triangle is:<span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="20-判断某年某天">20.判断某年某天</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">year, month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;请输入年月日：&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">yuandan = datetime.date(year, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">now = datetime.date(year, month, day)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((now - yuandan).days)</span><br></pre></td></tr></table></figure><h3 id="21-斐波那契数列">21.斐波那契数列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the number of terms: &quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(fibonacci(i),end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="22-复制列表">22.复制列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line"><span class="keyword">import</span>  copy</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_copy = copy.copy(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(list_copy)</span><br><span class="line"><span class="comment"># [5, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="23-暂停后输出">23.暂停后输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="24-成绩if语句">24.成绩if语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please give me your score:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="25-统计字符">25.统计字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"></span><br><span class="line">char = <span class="number">0</span></span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">space = <span class="number">0</span></span><br><span class="line">other = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha():</span><br><span class="line">        char += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isdigit():</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isspace():</span><br><span class="line">        space += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;字母有<span class="subst">&#123;char&#125;</span>个，数字有<span class="subst">&#123;number&#125;</span>个，空格有<span class="subst">&#123;space&#125;</span>个，其他字符有<span class="subst">&#123;other&#125;</span>个。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="26-落体反弹问题">26.落体反弹问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一球从100米高度自由落下，每次落地后反跳回原高度的一半</span></span><br><span class="line"><span class="comment"># 再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</span></span><br><span class="line">height = <span class="number">100</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(height)</span><br><span class="line">        height = height / <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(<span class="number">2</span> * height)</span><br><span class="line">        height = height / <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;共经过&quot;</span>, <span class="built_in">sum</span>(<span class="built_in">list</span>), <span class="string">&quot;米&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第10次反弹多高&quot;</span>, height)</span><br></pre></td></tr></table></figure><h3 id="27-猴子吃桃问题">27.猴子吃桃问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个</span></span><br><span class="line"><span class="comment"># 第二天早上又将剩下的桃子吃掉一半，又多吃了一个</span></span><br><span class="line"><span class="comment"># 以后每天早上都吃了前一天剩下的一半零一个</span></span><br><span class="line"><span class="comment"># 到第10天早上想再吃时，见只剩下一个桃子了</span></span><br><span class="line"><span class="comment"># 求第一天共摘了多少。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peach</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (peach(n+<span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i&#125;</span>天摘了<span class="subst">&#123;peach(i)&#125;</span>个桃子&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="28-求指定数列的和">28.求指定数列的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2/1 + 3/2 + 5/3 + 8/5 + 13/8 + 21/13 + 34/21 + 55/34 + 89/55 + 144/89 + 233/144 + 377/233 + 610/377 + ···</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">up = <span class="number">2</span></span><br><span class="line">down = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">sum</span> += up / down</span><br><span class="line">    a = down</span><br><span class="line">    down = up</span><br><span class="line">    up += a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">sum</span>:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="29-求各个阶乘的和">29.求各个阶乘的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span> + <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span> += math.factorial(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1+2！+3！+...+20！=<span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="30-年龄急转弯">30.年龄急转弯</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁</span></span><br><span class="line"><span class="comment"># 问第4个人岁数，他说比第3个人大2岁</span></span><br><span class="line"><span class="comment"># 问第三个人，又说比第2人大两岁</span></span><br><span class="line"><span class="comment"># 问第2个人，说比第一个人大两岁</span></span><br><span class="line"><span class="comment"># 最后问第一个人，他说是10岁。请问第五个人多大？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">age_turn_around</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> age_turn_around(n-<span class="number">1</span>) + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第五个人的年龄是<span class="subst">&#123;age_turn_around(<span class="number">5</span>)&#125;</span>岁。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="31-判断回文数">31.判断回文数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>(num) == <span class="built_in">str</span>(num)[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;是回文数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;不是回文数&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="32-判断星期几">32.判断星期几</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入星期几的英文&quot;</span>).lower()</span><br><span class="line"><span class="keyword">if</span> a[<span class="number">0</span>] == <span class="string">&quot;m&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期一&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> a[<span class="number">1</span>] == <span class="string">&quot;u&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期二&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期四&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;w&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期三&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;f&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期五&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;s&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> a[<span class="number">1</span>] == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期六&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期日&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的英文日期&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="33-相反顺序输出列表">33.相反顺序输出列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># using reversed() func</span></span><br><span class="line"><span class="built_in">list</span>.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># using slicing</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="34-对十个数进行排序">34.对十个数进行排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">list</span>.append(random.randint(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original list:&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sorted list:&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># Original list: [52, 31, 61, 4, 19, 45, 85, 75, 11, 50]</span></span><br><span class="line"><span class="comment"># Sorted list: [4, 11, 19, 31, 45, 50, 52, 61, 75, 85]</span></span><br></pre></td></tr></table></figure><h3 id="35-求矩阵主对角线元素之和">35.求矩阵主对角线元素之和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + matrix[i][i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The sum of the main diagonal elements of the matrix is: <span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="36-有序列表插入元素">36.有序列表插入元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">list</span> = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original list:&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请给一个数字进行插入：&quot;</span>))</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="built_in">list</span>[i]:</span><br><span class="line">        <span class="built_in">list</span>.insert(i, num)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After insertion:&quot;</span>, <span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="37-变量值交换">37.变量值交换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the value of a: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the value of b: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Before swapping: a =&quot;</span>, a, <span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After swapping: a =&quot;</span>, a, <span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line"><span class="comment"># Enter the value of a: 11</span></span><br><span class="line"><span class="comment"># Enter the value of b: 22</span></span><br><span class="line"><span class="comment"># Before swapping: a = 11 b = 22</span></span><br><span class="line"><span class="comment"># After swapping: a = 22 b = 11</span></span><br></pre></td></tr></table></figure><h3 id="38-产生随机数">38.产生随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = random.random()</span><br><span class="line">b = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">c = random.randrange(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="39-lambda表达式">39.lambda表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x,y: x*y</span><br><span class="line"><span class="built_in">print</span>(a(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="40-温度转换">40.温度转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temperature = <span class="built_in">input</span>(<span class="string">&quot;请输入温度（单位是C或者F）：&quot;</span>).upper()</span><br><span class="line">temperature_number = <span class="built_in">float</span>(temperature[:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> temperature[-<span class="number">1</span>] == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">    fahrenheit = (temperature_number * <span class="number">9</span>/<span class="number">5</span>) + <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;此温度转换为华氏度是<span class="subst">&#123;fahrenheit&#125;</span>F&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> temperature[-<span class="number">1</span>] == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">    centigrade = (temperature_number - <span class="number">32</span>) * <span class="number">5</span>/<span class="number">9</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;此温度转换为摄氏度是<span class="subst">&#123;centigrade&#125;</span>C&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的温度单位&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="41-按位与">41.按位与</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 0&amp;0=0 0&amp;1=0 1&amp;0=0 1&amp;1=1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &amp; <span class="number">3</span>) <span class="comment"># 0101 &amp; 0011 = 0001(1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &amp; <span class="number">12</span>) <span class="comment"># 0100 &amp; 1100 = 0100(4)</span></span><br></pre></td></tr></table></figure><h3 id="42-按位或">42.按位或</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 0|0=0 0|1=1 1|0=1 1|1=1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> | <span class="number">7</span>) <span class="comment"># 0011 | 0111 = 0111（7）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> | <span class="number">5</span>) <span class="comment"># 1010 | 0101 = 1111（15）</span></span><br></pre></td></tr></table></figure><h3 id="43-按位异或">43.按位异或</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 0^0=0, 0^1=1, 1^0=1, 1^1=0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> ^ <span class="number">9</span>) <span class="comment"># 0011 ^ 1001 = 1010（10）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> ^ <span class="number">8</span>) <span class="comment"># 0100 ^ 1000 = 1100（12）</span></span><br></pre></td></tr></table></figure><h3 id="44-按位取反">44.按位取反</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 ~x = -x - 1</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">9</span>) <span class="comment"># 00001001 -&gt; 11110110</span></span><br><span class="line"><span class="built_in">print</span>(~-<span class="number">3</span>) <span class="comment"># 11110111 -&gt; 00001000</span></span><br></pre></td></tr></table></figure><h3 id="45-计算字符串长度">45.计算字符串长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="comment"># print(&quot;字符串长度为：&quot;, len(a))</span></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    length += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串长度为：&quot;</span>, length)</span><br></pre></td></tr></table></figure><h3 id="46-杨辉三角">46.杨辉三角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_pascals_triangle</span>(<span class="params">n</span>):</span><br><span class="line">    triangle = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        row = [<span class="number">1</span>] * (i + <span class="number">1</span>)  <span class="comment"># 创建一行，先将所有元素都设置为1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):  <span class="comment"># 从第二个元素开始到倒数第二个元素</span></span><br><span class="line">            row[j] = triangle[i - <span class="number">1</span>][j - <span class="number">1</span>] + triangle[i - <span class="number">1</span>][j]  <span class="comment"># 上方两个元素相加</span></span><br><span class="line">        triangle.append(row)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> triangle</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">triangle = generate_pascals_triangle(n)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> triangle:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><h3 id="47-查找字符串">47.查找字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">b = <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(b)) <span class="comment"># 没有找到就返回-1</span></span><br></pre></td></tr></table></figure><h3 id="48-猜数字游戏">48. 猜数字游戏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number</span>(<span class="params">num, traget</span>):</span><br><span class="line">    <span class="keyword">if</span> target == num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Congratulations! You guessed the number!&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; target:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The number is smaller than the target.&quot;</span>)</span><br><span class="line">        guess_number(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter a larger number: &quot;</span>)), target)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The number is larger than the target.&quot;</span>)</span><br><span class="line">        guess_number(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter a smaller number: &quot;</span>)), target)</span><br><span class="line"></span><br><span class="line">target = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m thinking of a number between 1 and 100. Can you guess it?&quot;</span>)</span><br><span class="line">guess_number(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter your guess: &quot;</span>)), target)</span><br></pre></td></tr></table></figure><h3 id="49-第一个只出现一次的字符">49.第一个只出现一次的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello WorldHello World&quot;</span></span><br><span class="line"></span><br><span class="line">mp = <span class="built_in">dict</span>()</span><br><span class="line">count = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> mp:</span><br><span class="line">        mp[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mp[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    <span class="keyword">if</span> mp[<span class="built_in">str</span>[i]] == <span class="number">1</span>:</span><br><span class="line">        count = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> count <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;There is no character that appears only once.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first character that appears only once is:&quot;</span>, <span class="built_in">str</span>[i])</span><br></pre></td></tr></table></figure><h3 id="50-最大公因数">50.最大公因数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first number: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second number: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The greatest common divisor of <span class="subst">&#123;a&#125;</span> and <span class="subst">&#123;b&#125;</span> is:&quot;</span>, math.gcd(a, b))</span><br></pre></td></tr></table></figure><h3 id="51-数组中没有出现的数字">51.数组中没有出现的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">upper_limit = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the range of the array: &quot;</span>))</span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the number of elements in the array: &quot;</span>))</span><br><span class="line">nums = [random.randint(<span class="number">1</span>, upper_limit) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number)]</span><br><span class="line">nums.sort()</span><br><span class="line">comparasion = [j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, upper_limit+<span class="number">1</span>) <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> nums]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The array is:&quot;</span>, nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The number that is not in the array is:&quot;</span>, comparasion)</span><br></pre></td></tr></table></figure><h3 id="52-替换空格">52.替换空格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.replace(old, new[, count])</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="53-快乐数">53.快乐数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        j = x = n % <span class="number">10</span></span><br><span class="line">        <span class="built_in">sum</span> += j ** <span class="number">2</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">happynumber</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">9</span>:</span><br><span class="line">        n = change(n)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> happynumber(n):</span><br><span class="line">    <span class="built_in">print</span>(n, <span class="string">&quot;is a happy number&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(n, <span class="string">&quot;is not a happy number&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="54-立方根">54.立方根</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">root = math.floor(math.<span class="built_in">pow</span>(num, <span class="number">1</span>/<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The cube root of <span class="subst">&#123;num&#125;</span> is <span class="subst">&#123;root&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="55-最长公共前缀">55.最长公共前缀</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_prefix</span>(<span class="params">strs</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(strs)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs[<span class="number">0</span>])):</span><br><span class="line">        temp = strs[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(strs[j]) <span class="keyword">or</span> strs[j][i]!= temp:</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">strs = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(longest_common_prefix(strs))</span><br></pre></td></tr></table></figure><h3 id="56-字符串变形">56.字符串变形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串由空格隔开的单词反序，同时反转每个字符的大小写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    words = s.split()</span><br><span class="line">    words.reverse()</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        s += word.swapcase() + <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="string">&quot;Hello World&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="57-压缩字符串">57.压缩字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">list</span>[-<span class="number">2</span>] != i: <span class="comment"># list 为空或者最后的字母元素和当前元素不同</span></span><br><span class="line">            <span class="built_in">list</span>.append(i)</span><br><span class="line">            <span class="built_in">list</span>.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 相同次数加一</span></span><br><span class="line">            <span class="built_in">list</span>[-<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> x!= <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="string">&#x27;aaaabbbcc&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="58-三个数的最大乘积">58.三个数的最大乘积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;给定数组的长度：&quot;</span>))</span><br><span class="line"><span class="built_in">list</span> = [random.randint(-<span class="number">100</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number)]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组为：&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">max_product = <span class="built_in">max</span>(<span class="built_in">list</span>[<span class="number">0</span>] * <span class="built_in">list</span>[<span class="number">1</span>] * <span class="built_in">list</span>[-<span class="number">1</span>], <span class="built_in">list</span>[-<span class="number">1</span>] * <span class="built_in">list</span>[-<span class="number">2</span>] * <span class="built_in">list</span>[-<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大乘积为：&quot;</span>, max_product)</span><br></pre></td></tr></table></figure><h3 id="59-十进制转二进制">59.十进制转二进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个十进制数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">bin</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十进制数&quot;</span>, a, <span class="string">&quot;的二进制数为&quot;</span>, b[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="60-判断字符串是否唯一">60.判断字符串是否唯一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="comment"># len() 转换为集合，集合的元素唯一</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(<span class="built_in">str</span>)) == <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串中没有重复的字符&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串中有重复的字符&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="61-IP地址转换">61.IP地址转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ip_to_int</span>(<span class="params">ip</span>):</span><br><span class="line">    ip_list = ip.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    ip_int = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        ip_int = ip_int * <span class="number">256</span> + <span class="built_in">int</span>(ip_list[i])</span><br><span class="line">    <span class="keyword">return</span> ip_int</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ip_to_int(ip))</span><br></pre></td></tr></table></figure><h3 id="62-二分查找">62.二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_list</span>(<span class="params">number</span>):</span><br><span class="line">    l = <span class="built_in">list</span>(<span class="built_in">set</span>([random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number)]))</span><br><span class="line">    l.sort()</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params"><span class="built_in">list</span>, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">list</span>[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">list</span>[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">l = generate_list(n)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">tar = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number to search: &quot;</span>))</span><br><span class="line">result = binary_search(l, tar)</span><br><span class="line"><span class="keyword">if</span> result == -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Found at index&quot;</span>, result)</span><br></pre></td></tr></table></figure><h3 id="63-二分查找（有重复版）">63.二分查找（有重复版）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            temp = mid</span><br><span class="line">            <span class="keyword">while</span> temp &gt; <span class="number">0</span> <span class="keyword">and</span> arr[temp-<span class="number">1</span>] == target:</span><br><span class="line">                temp -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">target1 = <span class="number">1</span></span><br><span class="line">target2 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(binary_search(arr, target1)) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(binary_search(arr, target2)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="64-移动0">64.移动0</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个数组，将所有0移动到数组的末尾，并保持非0元素的相对顺序不变。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_zeros</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i] == <span class="number">0</span>:</span><br><span class="line">            arr.append(<span class="number">0</span>)</span><br><span class="line">            arr.pop(i)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(move_zeros(arr))  </span><br></pre></td></tr></table></figure><h3 id="65-字符串翻转">65.字符串翻转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_string</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)!= <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bigA = a + a</span><br><span class="line">        result = b <span class="keyword">in</span> bigA</span><br><span class="line">        <span class="keyword">return</span> result   </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reverse_string(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;ohell&quot;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(reverse_string(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;olle&quot;</span>)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="66-判断子序列">66.判断子序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_subsequence</span>(<span class="params">s, t</span>):</span><br><span class="line">    c = <span class="string">&quot;&quot;</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt; <span class="built_in">len</span>(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i == t[n]:</span><br><span class="line">            c += i</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> c == s: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(is_subsequence(<span class="string">&quot;hlo&quot;</span>, <span class="string">&quot;hello&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="67-数组中重复的数字">67.数组中重复的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_num</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> nums.count(i) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_repeat_num([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(find_repeat_num([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><h3 id="68-字符串的相邻字符去重">68.字符串的相邻字符去重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove_adjacent_duplicates</span>(<span class="params">s</span>):</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> res ==<span class="string">&quot;&quot;</span>:</span><br><span class="line">            res += i</span><br><span class="line">        <span class="keyword">elif</span> res[-<span class="number">1</span>] == i:</span><br><span class="line">            res = res[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(remove_adjacent_duplicates(<span class="string">&quot;acbbc&quot;</span>)) <span class="comment"># &quot;a&quot;</span></span><br></pre></td></tr></table></figure><h3 id="69-2的幂">69.2的幂</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_pow</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 2的幂按位与比它小1的数为0</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &amp; (n-<span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_pow(<span class="number">1024</span>)) </span><br></pre></td></tr></table></figure><h3 id="70-最长公共子串">70.最长公共子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lcs</span>(<span class="params">s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s1[left:i+<span class="number">1</span>] <span class="keyword">in</span> s2:</span><br><span class="line">            res = s1[left:i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcs(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;helo wordl&#x27;</span>)) <span class="comment"># lo wor</span></span><br></pre></td></tr></table></figure><h3 id="71-冒泡排序">71.冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-i-<span class="number">1</span>): <span class="comment"># -i 是后面i个已经是最大的， -1是下面是比较i和i+1</span></span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>]</span><br><span class="line"><span class="built_in">print</span>(bubble_sort(arr))</span><br></pre></td></tr></table></figure><h3 id="72-选择排序">72.选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        min_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_idx]:</span><br><span class="line">                min_idx = j</span><br><span class="line">        arr[i], arr[min_idx] = arr[min_idx], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(selection_sort(arr))  </span><br></pre></td></tr></table></figure><h3 id="73-插入排序">73.插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        key = arr[i] <span class="comment"># 待插入的元素</span></span><br><span class="line">        j = i - <span class="number">1</span>    <span class="comment"># 待比较的元素</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> key &lt; arr[j]: <span class="comment"># 从后向前比较，找到比待插入元素小的元素，插入到该位置</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = key</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(insert_sort(arr))</span><br></pre></td></tr></table></figure><h3 id="74-字符删除">74.字符删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定两个字符串str和sub，从str中完全删除sub中存在的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_chars</span>(<span class="params"><span class="built_in">str</span>, sub</span>):</span><br><span class="line">    sub = <span class="built_in">set</span>(sub)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> sub)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(delete_chars(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;lwr&#x27;</span>)) <span class="comment"># heo word</span></span><br></pre></td></tr></table></figure><h3 id="75-目标转移">75.目标转移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">move_target</span>(<span class="params">nums, target</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    left = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> nums[left] != target:</span><br><span class="line">            nums[right] = nums[left]</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        left -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        nums[i] = target</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"><span class="built_in">print</span>(move_target([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">10</span>], <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="76-柠檬水找ling">76.柠檬水找ling</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每杯柠檬水5元，顾客只有5,10,20元面额的钞票，问能不能找零</span></span><br><span class="line"></span><br><span class="line">my_money = &#123;<span class="number">5</span>: <span class="number">0</span>, <span class="number">10</span>: <span class="number">0</span>, <span class="number">20</span>: <span class="number">0</span>&#125;  <span class="comment"># 使用字典来存储不同面额的钞票数量</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前钞票：&quot;</span>, my_money)</span><br><span class="line">    give_money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;顾客付款金额（5 10 20）:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> give_money <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效的金额&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否能找零</span></span><br><span class="line">    <span class="keyword">if</span> give_money == <span class="number">5</span>:</span><br><span class="line">        my_money[<span class="number">5</span>] += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找您0元&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> give_money == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">if</span> my_money[<span class="number">5</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            my_money[<span class="number">5</span>] -= <span class="number">1</span></span><br><span class="line">            my_money[<span class="number">10</span>] += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找您5元&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不能找零&quot;</span>)</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> give_money == <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">if</span> my_money[<span class="number">10</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> my_money[<span class="number">5</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            my_money[<span class="number">10</span>] -= <span class="number">1</span></span><br><span class="line">            my_money[<span class="number">5</span>] -= <span class="number">1</span></span><br><span class="line">            my_money[<span class="number">20</span>] += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找您15元&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> my_money[<span class="number">5</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">            my_money[<span class="number">5</span>] -= <span class="number">3</span></span><br><span class="line">            my_money[<span class="number">20</span>] += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找您15元&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不能找零&quot;</span>)</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出最终的钞票信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最终钞票情况：&quot;</span>, my_money)</span><br></pre></td></tr></table></figure><h3 id="77-末尾的零">77.末尾的零</h3><figure class="highlight plaintext"><figcaption><span>给定n，求n!末尾的0的个数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def count_zero(n):</span><br><span class="line">    count = 0</span><br><span class="line">    while n!= 0:</span><br><span class="line">        count += n // 5</span><br><span class="line">        n //= 5</span><br><span class="line">    return count</span><br><span class="line"></span><br><span class="line">n = int(input(&quot;请输入一个整数：&quot;))</span><br><span class="line">print(&quot;末尾的0的个数为：&quot;, count_zero(n))</span><br></pre></td></tr></table></figure><h3 id="78-统计数字">78.统计数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func(1, 11) 1 10 11 一共4次</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">k, n</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        time = <span class="built_in">str</span>(i).count(<span class="built_in">str</span>(k))</span><br><span class="line">        count += time</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">1</span>, <span class="number">11</span>))</span><br></pre></td></tr></table></figure><h3 id="79-合并排序数字">79.合并排序数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sortArray</span>(<span class="params">nums1, nums2</span>):</span><br><span class="line">    nums = []</span><br><span class="line">    <span class="keyword">while</span> nums1 <span class="keyword">and</span> nums2:</span><br><span class="line">        <span class="keyword">if</span> nums1[<span class="number">0</span>] &lt; nums2[<span class="number">0</span>]:</span><br><span class="line">            nums.append(nums1.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums.append(nums2.pop(<span class="number">0</span>))</span><br><span class="line">    nums += nums1 + nums2</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(sortArray(nums1, nums2))</span><br></pre></td></tr></table></figure><h3 id="80-插入5">80.插入5</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_five</span>(<span class="params">num</span>):</span><br><span class="line">    num_str = <span class="built_in">str</span>(num)</span><br><span class="line">    max_num = num_str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(num_str) + <span class="number">1</span>):</span><br><span class="line">            new_num = num_str[:i] + <span class="string">&#x27;5&#x27;</span> + num_str[i:]</span><br><span class="line">            <span class="keyword">if</span> i ==<span class="number">1</span>:</span><br><span class="line">                max_num = new_num</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">int</span>(new_num) &gt; <span class="built_in">int</span>(max_num):</span><br><span class="line">                max_num = new_num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_str) + <span class="number">1</span>):</span><br><span class="line">            new_num = num_str[:i] + <span class="string">&#x27;5&#x27;</span> + num_str[i:]</span><br><span class="line">            <span class="keyword">if</span> new_num &gt; max_num:</span><br><span class="line">                max_num = new_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_num</span><br><span class="line"></span><br><span class="line">given_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(insert_five(given_num))</span><br></pre></td></tr></table></figure><h3 id="81-字符串置换">81.字符串置换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">string_permutation</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(str1) == <span class="built_in">sorted</span>(str2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(string_permutation(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bca&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">basic python programming questions and answers</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://agoni66.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>第四章 数组与链表</title>
    <link href="https://agoni66.github.io/posts/1000124.html"/>
    <id>https://agoni66.github.io/posts/1000124.html</id>
    <published>2024-11-16T14:00:00.000Z</published>
    <updated>2025-04-10T17:14:40.018Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hello-algo.com/assets/covers/chapter_array_and_linkedlist.jpg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a></p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a></p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a></p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a> ⇦ 当前位置🪂</p></li></ol></div><h3 id="数组">数组</h3><p>「数组 array」是一种线性数据结构，其将<strong>相同类型元素</strong>存储在连续的内存空间中。<strong>元素在数组中的位置称为该元素的「索引 index」</strong></p><p><strong>初始化数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>访问数组</strong></p><p>本质：索引<code>index</code>，索引的含义本质上是内存地址的偏移量。首个元素的地址偏移量是 <strong>0</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_1 = arr[index]</span><br><span class="line">num_2 = nums[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_access</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机访问元素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 在区间 [0, len(nums)-1] 中随机抽取一个数字</span></span><br><span class="line">    random_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 获取并返回随机元素</span></span><br><span class="line">    random_num = nums[random_index]</span><br><span class="line">    <span class="keyword">return</span> random_num</span><br></pre></td></tr></table></figure><p><strong>插入元素</strong></p><ol><li>把索引 index 及以后的所有元素向后移动一位</li><li>把插入的元素赋值给 索引处 index</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], num: <span class="built_in">int</span>, index: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在数组的索引 index 处插入元素 num&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 把索引 index 以及之后的所有元素向后移动一位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>, index, -<span class="number">1</span>):</span><br><span class="line">        nums[i] = nums[i - <span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 将 num 赋给 index 处的元素</span></span><br><span class="line">    nums[index] = num</span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><p>把索引 index 及以后的所有元素向前移动一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], index: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除索引 index 处的元素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 把索引 index 之后的所有元素向前移动一位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index, <span class="built_in">len</span>(nums) - <span class="number">1</span>):</span><br><span class="line">        nums[i] = nums[i + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>遍历数组</strong></p><ol><li>通过索引</li><li>直接遍历</li><li>同时遍历索引和数据 <code>enumerate()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">traverse</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;遍历数组&quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 通过索引遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        count += nums[i]</span><br><span class="line">    <span class="comment"># 直接遍历数组元素</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        count += num</span><br><span class="line">    <span class="comment"># 同时遍历数据索引和元素</span></span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        count += nums[i]</span><br><span class="line">        count += num</span><br></pre></td></tr></table></figure><p><strong>查找元素</strong></p><p>遍历+判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在数组中查找指定元素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>扩容数组</strong></p><p>原因：数组的长度是不可变的</p><p>初始化+复制粘贴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], enlarge: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展数组长度&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化一个扩展长度后的数组</span></span><br><span class="line">    res = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + enlarge)</span><br><span class="line">    <span class="comment"># 将原数组中的所有元素复制到新数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        res[i] = nums[i]</span><br><span class="line">    <span class="comment"># 返回扩展后的新数组</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>优点</p><ul><li>空间效率高</li><li>支持随机访问</li><li>缓存局部性</li></ul><p>缺点</p><ul><li>插入与删除效率低</li><li>长度不可变</li><li>空间浪费</li></ul><h3 id="链表">链表</h3><p>「链表 linked list」是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。 引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点</p><p><strong>链表=节点（值和指向下一个的引用）的总和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;链表节点类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val: <span class="built_in">int</span></span>):</span><br><span class="line">        self.val: <span class="built_in">int</span> = val               <span class="comment"># 节点值</span></span><br><span class="line">        self.<span class="built_in">next</span>: ListNode | <span class="literal">None</span> = <span class="literal">None</span> <span class="comment"># 指向下一节点的引用</span></span><br></pre></td></tr></table></figure><p>头节点：首个节点</p><p>尾节点：最后节点 →None</p><p><strong>初始化链表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化链表 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span></span><br><span class="line"><span class="comment"># 初始化各个节点</span></span><br><span class="line">n0 = ListNode(<span class="number">1</span>)</span><br><span class="line">n1 = ListNode(<span class="number">2</span>)</span><br><span class="line">n2 = ListNode(<span class="number">3</span>)</span><br><span class="line">n3 = ListNode(<span class="number">4</span>)</span><br><span class="line">n4 = ListNode(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 构建节点之间的引用</span></span><br><span class="line">n0.<span class="built_in">next</span> = n1</span><br><span class="line">n1.<span class="built_in">next</span> = n2</span><br><span class="line">n2.<span class="built_in">next</span> = n3</span><br><span class="line">n3.<span class="built_in">next</span> = n4</span><br></pre></td></tr></table></figure><p><strong>插入节点</strong></p><p>P先指向后面的，前面的指向P</p><p><img src="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list.assets/linkedlist_insert_node.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">n0: ListNode, P: ListNode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在链表的节点 n0 之后插入节点 P&quot;&quot;&quot;</span></span><br><span class="line">    n1 = n0.<span class="built_in">next</span></span><br><span class="line">    P.<span class="built_in">next</span> = n1</span><br><span class="line">    n0.<span class="built_in">next</span> = P</span><br></pre></td></tr></table></figure><p><strong>删除节点</strong></p><p>index 前面的直接指向后面的</p><p><img src="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list.assets/linkedlist_remove_node.png" alt="PNG image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">n0: ListNode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除链表的节点 n0 之后的首个节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n0.<span class="built_in">next</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># n0 -&gt; P -&gt; n1</span></span><br><span class="line">    P = n0.<span class="built_in">next</span></span><br><span class="line">    n1 = P.<span class="built_in">next</span> <span class="comment"># 就算P是None也可以</span></span><br><span class="line">    n0.<span class="built_in">next</span> = n1</span><br></pre></td></tr></table></figure><p><strong>访问节点</strong></p><p>遍历</p><blockquote><p><strong><code>_</code></strong> 为占位符，用于迭代不需要这个值时</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">access</span>(<span class="params">head: ListNode, index: <span class="built_in">int</span></span>) -&gt; ListNode | <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;访问链表中索引为 index 的节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="comment"># 检查当前的 head 节点是否为 None，链表末尾或者链表为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        head = head.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p><strong>查找节点</strong></p><p>遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">head: ListNode, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在链表中查找值为 target 的首个节点&quot;&quot;&quot;</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> head: <span class="comment"># head = None 不进行循环</span></span><br><span class="line">        <span class="keyword">if</span> head.val == target:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        head = head.<span class="built_in">next</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>链表分类</p><ul><li>单向链表</li><li>环形链表</li><li>双向链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表节点类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val: <span class="built_in">int</span></span>):</span><br><span class="line">        self.val: <span class="built_in">int</span> = val                <span class="comment"># 节点值</span></span><br><span class="line">        self.<span class="built_in">next</span>: ListNode | <span class="literal">None</span> = <span class="literal">None</span>  <span class="comment"># 指向后继节点的引用</span></span><br><span class="line">        self.prev: ListNode | <span class="literal">None</span> = <span class="literal">None</span>  <span class="comment"># 指向前驱节点的引用</span></span><br><span class="line">        <span class="comment"># 实际上是self.prev = None 要这样看</span></span><br></pre></td></tr></table></figure><p><strong>数组与链表的效率对比</strong></p><table><thead><tr><th></th><th><strong>数组</strong></th><th><strong>链表</strong></th></tr></thead><tbody><tr><td>存储方式</td><td>连续内存空间</td><td>分散内存空间</td></tr><tr><td>容量扩展</td><td>长度不可变</td><td>可灵活扩展</td></tr><tr><td>内存效率</td><td>元素占用内存少、但可能浪费空间</td><td>元素占用内存多</td></tr><tr><td>访问元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>添加元素</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除元素</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><hr><h3 id="列表">列表</h3><p><strong><code>list.clear()</code> 清空列表</strong></p><p><strong><code>list.append(number)</code> 尾部添加元素</strong></p><p><strong><code>list.insert(index, number)</code> 在索引处插入元素</strong></p><p><strong><code>list.pop(index)</code> 删除索引处元素</strong></p><p><strong><code>len(list)</code> 返回列表的长度</strong></p><p><strong><code>list1 + list2</code> 列表拼接</strong></p><p><strong><code>list.sort()</code> 列表排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 以单个下划线 _ 开头的属性或方法被视为受保护的（protected），这意味着它们是类内部使用的，不应该被外部直接访问</span></span><br><span class="line">        self._capacity: <span class="built_in">int</span> = <span class="number">10</span>  <span class="comment"># 列表容量</span></span><br><span class="line">        self._arr: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">0</span>] * self._capacity  <span class="comment"># 数组（存储列表元素）</span></span><br><span class="line">        self._size: <span class="built_in">int</span> = <span class="number">0</span>  <span class="comment"># 列表长度（当前元素数量）</span></span><br><span class="line">        self._extend_ratio: <span class="built_in">int</span> = <span class="number">2</span>  <span class="comment"># 每次列表扩容的倍数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取列表长度（当前元素数量）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">capacity</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取列表容量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;访问元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 索引如果越界，则抛出异常，下同</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._arr[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, num: <span class="built_in">int</span>, index: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        self._arr[index] = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, num: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部添加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 元素数量超出容量时，触发扩容机制</span></span><br><span class="line">        <span class="keyword">if</span> self.size() == self.capacity():</span><br><span class="line">            self.extend_capacity()</span><br><span class="line">        self._arr[self._size] = num</span><br><span class="line">        self._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, num: <span class="built_in">int</span>, index: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在中间插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        <span class="comment"># 元素数量超出容量时，触发扩容机制</span></span><br><span class="line">        <span class="keyword">if</span> self._size == self.capacity():</span><br><span class="line">            self.extend_capacity()</span><br><span class="line">        <span class="comment"># 将索引 index 以及之后的元素都向后移动一位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self._size - <span class="number">1</span>, index - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self._arr[j + <span class="number">1</span>] = self._arr[j]</span><br><span class="line">        self._arr[index] = num</span><br><span class="line">        <span class="comment"># 更新元素数量</span></span><br><span class="line">        self._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        num = self._arr[index]</span><br><span class="line">        <span class="comment"># 将索引 index 之后的元素都向前移动一位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(index, self._size - <span class="number">1</span>):</span><br><span class="line">            self._arr[j] = self._arr[j + <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 更新元素数量</span></span><br><span class="line">        self._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 返回被删除的元素</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend_capacity</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;列表扩容&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建一个长度为原数组 _extend_ratio 倍的新数组，并将原数组复制到新数组</span></span><br><span class="line">        self._arr = self._arr + [<span class="number">0</span>] * self.capacity() * (self._extend_ratio - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 更新列表容量</span></span><br><span class="line">        self._capacity = <span class="built_in">len</span>(self._arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_array</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回有效长度的列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._arr[: self._size]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第四章 数组与链表</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第三章 数据结构</title>
    <link href="https://agoni66.github.io/posts/1000123.html"/>
    <id>https://agoni66.github.io/posts/1000123.html</id>
    <published>2024-11-15T14:00:00.000Z</published>
    <updated>2024-11-16T17:23:34.138Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hello-algo.com/assets/covers/chapter_data_structure.jpg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a></p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a></p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a> ⇦ 当前位置🪂</p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a></p></li></ol></div><h2 id="数组、链表、栈、队列、哈希表、树、堆、图">数组、链表、栈、队列、哈希表、树、堆、图</h2><p>按逻辑结构分为：线性与非线性</p><ul><li>线性数据结构 <font color='gold'><strong>（一对一）</strong></font><ul><li>数组</li><li>链表</li><li>栈</li><li>队列</li><li>哈希表</li></ul></li><li>非线性数据结构 <font color='gold'><strong>（树状结构，一对多，除了图）</strong></font><ul><li>树</li><li>堆</li><li>图 <font color='gold'><strong>（网状结构，多对多）</strong></font></li><li>哈希表</li></ul></li></ul><p>按物理结构分为：连续与分散</p><hr><h2 id="基本数据类型">基本数据类型</h2><p><strong>基本数据类型是 CPU 可以直接进行运算的类型</strong>，在算法中直接被使用，主要包括以下几种：</p><ul><li>整数类型 <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>浮点数类型 <code>float</code>、<code>double</code> ，用于表示小数</li><li>字符类型 <code>char</code> ，用于表示各种语言的字母、标点符号甚至表情符号等</li><li>布尔类型 <code>bool</code> ，用于表示“是”与“否”判断</li></ul><hr><h2 id="数字编码">数字编码</h2><h3 id="原码、反码与补码">原码、反码与补码</h3><p><img src="../img/%E7%AE%97%E6%B3%95/0023.png" alt="Untitled"></p><h3 id="浮点数">浮点数</h3><p><img src="../img/%E7%AE%97%E6%B3%95/0024.png" alt="Untitled"></p>]]></content>
    
    
    <summary type="html">第三章 数据结构</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第二章 复杂度分析</title>
    <link href="https://agoni66.github.io/posts/1000122.html"/>
    <id>https://agoni66.github.io/posts/1000122.html</id>
    <published>2024-11-14T14:00:00.000Z</published>
    <updated>2024-11-16T17:20:27.564Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../img/%E7%AE%97%E6%B3%95/0018.jpeg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a></p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a> ⇦ 当前位置🪂</p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a></p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a></p></li></ol></div><h2 id="迭代与递归">迭代与递归</h2><p>「迭代 iteration」是一种重复执行某个任务的控制结构。在迭代中，程序会在满足一定的条件下重复执行某段代码，直到这个条件不再满足</p><blockquote><p><strong>for 循环的代码更加紧凑，while 循环更加灵活</strong></p></blockquote><p>每一次嵌套都是一次“升维”，有关时间复杂度</p><p>「递归 recursion」是一种算法策略，通过函数调用自身来解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recur</span>(<span class="params">n:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 递归，1+2+3+……+n &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> n = <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 递:递归调用</span></span><br><span class="line">  res = recur(n - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 归:返回结果 </span></span><br><span class="line">    <span class="keyword">return</span> n + res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n, source, target, auxiliary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 汉诺塔 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;source&#125;</span> -&gt; <span class="subst">&#123;target&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    hanoi(n - <span class="number">1</span>, source, auxiliary, target)</span><br><span class="line">    hanoi(<span class="number">1</span>, source, target, auxiliary)</span><br><span class="line">    hanoi(n - <span class="number">1</span>, auxiliary, target, source)</span><br></pre></td></tr></table></figure><p>迭代：自下而上，不断重复</p><p>递归：自上而下，划分为更小的子问题</p><p><img src="../img/%E7%AE%97%E6%B3%95/0019.png" alt="Untitled"></p><hr><h2 id="时间复杂度">时间复杂度</h2><p><img src="../img/%E7%AE%97%E6%B3%95/0020.png" alt="Untitled"></p><p><img src="../img/%E7%AE%97%E6%B3%95/0021.png" alt="Untitled"></p>]]></content>
    
    
    <summary type="html">第二章 复杂度分析</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一章 初始算法</title>
    <link href="https://agoni66.github.io/posts/1000121.html"/>
    <id>https://agoni66.github.io/posts/1000121.html</id>
    <published>2024-11-13T14:00:00.000Z</published>
    <updated>2024-11-16T17:20:34.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../img/%E7%AE%97%E6%B3%95/0016.jpeg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a> ⇦ 当前位置🪂</p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a></p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a></p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a></p></li></ol></div><p>「算法 algorithm」是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性。</p><ul><li>问题是明确的，包含清晰的<strong>输入</strong>和<strong>输出</strong>定义。</li><li>具有可行性，能够在有限步骤、时间和内存空间下完成。</li><li>各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。</li></ul><p>「数据结构 data structure」是计算机中组织和存储数据的方式，具有以下设计目标。</p><ul><li>空间占用尽量少，以节省计算机内存。</li><li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li><li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li></ul><p><strong><font color="blue">数据结构与算法的关系</font></strong></p><ul><li>数据结构是算法的基石。数据结构为算法提供了结构化存储的数据，以及操作数据的方法。</li><li>算法是数据结构发挥作用的舞台。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li>算法通常可以基于不同的数据结构实现，但执行效率可能相差很大，选择合适的数据结构是关键。</li></ul><table><thead><tr><th><strong>数据结构与算法</strong></th><th><strong>拼装积木</strong></th></tr></thead><tbody><tr><td>输入数据</td><td>未拼装的积木</td></tr><tr><td>数据结构</td><td>积木组织形式，包括形状、大小、连接方式等</td></tr><tr><td>算法</td><td>把积木拼成目标形态的一系列操作步骤</td></tr><tr><td>输出数据</td><td>积木模型</td></tr></tbody></table><p><img src="../img/%E7%AE%97%E6%B3%95/0017.png" alt=""></p>]]></content>
    
    
    <summary type="html">第一章 初始算法</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git基本操作</title>
    <link href="https://agoni66.github.io/posts/1000013.html"/>
    <id>https://agoni66.github.io/posts/1000013.html</id>
    <published>2024-11-12T07:00:00.000Z</published>
    <updated>2024-11-12T07:08:37.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="克隆下仓库">克隆下仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:&#123;username&#125;/&#123;repository&#125;.git</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/12.png" alt="image.png"></p><h3 id="显示工作目录状态">显示工作目录状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status </span><br></pre></td></tr></table></figure><ol><li>当前分支是哪个</li><li>自上次提交以来，哪些文件被修改了（modified）</li><li>哪些文件是新的（untracked），即还没有加入到 Git 版本控制中</li><li>哪些文件当前被暂存（staged），即将被提交</li></ol><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/13.png" alt="image.png"></p><h3 id="提交">提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello_world.php</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;Add hello world script by php&quot;</span></span><br></pre></td></tr></table></figure><ol><li>git add 加入暂存区</li><li>git commit 提交</li></ol><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/14.png" alt="image.png"></p><h3 id="查看提交日志">查看提交日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/15.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=<span class="type">short</span></span><br></pre></td></tr></table></figure><ul><li>只显示提交的第一行</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/16.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> README.md</span><br></pre></td></tr></table></figure><ul><li>只显示指定目录、文件的日志</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/17.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure><ul><li>显示文件的改动</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/18.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><ul><li>查看操作日志</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/19.png" alt="image.png"></p><h3 id="进行PUSH更新仓库">进行PUSH更新仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/20.png" alt="image.png"></p><h3 id="初始化仓库">初始化仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/21.png" alt="image.png"></p><h3 id="提交保存仓库的历史记录">提交保存仓库的历史记录</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;First commit&quot;</span></span><br></pre></td></tr></table></figure><ul><li>-m 后面的是提交信息，用于概述本次提交</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><ul><li>提交详细信息</li><li>第一行：用一行文字简述提交的更改内容</li><li>第二行：空行</li><li>第三行以后：记述更改的原因和详细内容</li><li>#（井号）标为注释的内容，不需要更改和删除</li><li><code>:qa</code>  编辑器终止提交</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/22.png" alt="image.png"></p><h3 id="查看工作树和暂存区的差别">查看工作树和暂存区的差别</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><ul><li>查看工作区（还没有add和commit）与暂存区的差别（<strong>没有差别不显示</strong>）</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/23.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure><ul><li>查看与最新提交的区别</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/24.png" alt="image.png"></p><h3 id="显示分支一览表">显示分支一览表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/25.png" alt="image.png"></p><ul><li><code>*</code> 为当前分支</li></ul><h3 id="创建、切换分支">创建、切换分支</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-A</span><br></pre></td></tr></table></figure><ul><li>创建名为feature-A的分支</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/26.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout main</span><br></pre></td></tr></table></figure><ul><li>切换分支</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/27.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -</span><br></pre></td></tr></table></figure><ul><li>切换回上一个分支</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/28.png" alt="image.png"></p><h3 id="分支类型">分支类型</h3><ol><li><strong>特性（Topic）分支</strong><ol><li>集中实现单一特性（主题）</li><li>除此之外不进行任何作业的分支</li></ol></li><li><strong>主干分支</strong><ol><li>通常是master分支为主干分支</li><li>特性分支的原点，也是合并的终点</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff feature-A</span><br></pre></td></tr></table></figure><ul><li>合并分支</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/29.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure><ul><li>以图表形式查看分支</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/30.png" alt="image.png"></p><h3 id="更改提交">更改提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &#123;目标时间点的哈希值&#125;</span><br></pre></td></tr></table></figure><ul><li>回溯到目标时间点（哈希值，通过<code>git log</code>取得）</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/31.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff fix-C</span><br></pre></td></tr></table></figure><ul><li>推进历史</li><li>发生了冲突，不解决冲突就无法完成合并</li><li>做出修改即可</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/32.png" alt="image.png"></p><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/33.png" alt="image.png"></p><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/34.png" alt="image.png"></p><h3 id="修改提交信息">修改提交信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><ul><li>进入编辑器修改提交信息</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/35.png" alt="image.png"></p><h3 id="压缩历史">压缩历史</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am</span><br></pre></td></tr></table></figure><ul><li>add命令和commit命令的结合</li></ul><ol><li>创建feature-C分支<code>$ git checkout -b feature-C</code></li><li>提交文件<code>$ git commit -am &quot;Add feature-C”</code></li><li>修改错误（使用<code>$ git diff</code>进行修正）（错误漏字等失误统称<code>typo</code>）</li></ol><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/36.png" alt="image.png"></p><ol><li>不希望在历史记录中看到失误类的提交，更改历史</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>选定当前分支中包含HEAD（最新提交）在内的两个最新历史记录为对象，进入编辑器修改</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/37.png" alt="image.png"></p><p>可以看到没有Fix Typo（这个已经合并到Add feature-D，而且Add feature-D的哈希值已经被修改）</p><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/38.png" alt="image.png"></p><h3 id="获取远程仓库">获取远程仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:github-book/git-tutorial.git</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/39.png" alt="image.png"></p><p>默认是master分支</p><p><code>remotes/origin/feature-D</code> 证明我们的远程仓库中已经有了feature-D 分支</p><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/40.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-D origin/feature-D</span><br></pre></td></tr></table></figure><ul><li>获取远程的feature-D分支</li><li><code>-b</code> 本地仓库中新建分支的名称</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/41.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure><ul><li>推送回远程仓库（现在是推送D分支）</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/42.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin feature-D</span><br></pre></td></tr></table></figure><ul><li>将本地的feature-D分支更新到最新状态</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/43.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">呜呼起飞</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="工具" scheme="https://agoni66.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="科普" scheme="https://agoni66.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>看漫画学Python</title>
    <link href="https://agoni66.github.io/posts/1000012.html"/>
    <id>https://agoni66.github.io/posts/1000012.html</id>
    <published>2024-11-08T03:00:00.000Z</published>
    <updated>2025-04-10T17:24:42.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置">前置</h2><ul><li>容器类可以存储任意类型的数据</li><li>方法属于类；函数可以直接调用</li><li><code>break</code>语句强行退出循环体，不再执行循环体中剩余的语句</li><li>短路设计<ul><li>与 一False全False</li><li>或 一True全True</li><li>会不计算后面的表达式</li></ul></li><li>set 集合<ul><li>add(elem)</li><li>remove(elem)</li><li>clear()</li></ul></li></ul><h2 id="字符串">字符串</h2><ul><li>string 字符串<ul><li>普通字符串</li><li>原始字符串 <code>r</code></li><li>长字符串（还是需要转义）</li></ul></li><li>转义符<ul><li>\t 水平制表符</li><li>\n 换行</li><li>\r 回车</li></ul></li><li>默认下，int()函数将字符串参数当作<strong>十进制</strong>数字进行转换</li><li>format() 格式化字符串<ul><li><code>s</code> 字符串</li><li><code>d</code> 十进制整数</li><li><code>f</code> 十进制浮点数</li><li><code>g</code> 十进制整数或浮点数</li><li><code>o</code> 八进制整数</li><li><code>x</code> 十六进制整数</li></ul></li><li>字符串查找 <code>find()</code> 返回索引</li><li>字符串替换 <code>replace(old, new[, count])</code></li></ul><h2 id="函数">函数</h2><ul><li><p>函数的可变参数</p><ul><li>*可变参数在函数中被组装成一个元组</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">*numbers</span>):</span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        total += number</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">100.0</span>, <span class="number">20.0</span>, <span class="number">30.0</span>)) <span class="comment"># 150.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">30.0</span>, <span class="number">80.0</span>))        <span class="comment"># 110.0</span></span><br></pre></td></tr></table></figure><ul><li>**可变参数在函数中被组装成一个字典</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_info</span>(<span class="params">**info</span>):</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span> -- <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">show_info(name= <span class="string">&quot;Ben&quot;</span>, age = <span class="number">18</span>, sex = <span class="literal">True</span>)</span><br><span class="line">show_info(student_name = <span class="string">&quot;Ben&quot;</span>, student_no = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># name -- Ben</span></span><br><span class="line"><span class="comment"># age -- 18</span></span><br><span class="line"><span class="comment"># sex -- True</span></span><br><span class="line"><span class="comment"># student_name -- Ben</span></span><br><span class="line"><span class="comment"># student_no -- 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>global x</code> 修改成全局变量</p></li><li><p><strong>过滤函数</strong></p><ul><li><code>filter(function, iterable)</code></li><li>返回值不是列表，需要用<code>list()</code></li><li><strong>条件判断</strong></li></ul></li><li><p><strong>映射函数</strong></p><ul><li><code>map(function, iterable)</code></li><li>返回值不是列表，需要用<code>list()</code></li><li><strong>操作变换</strong></li></ul></li><li><p><strong>匿名函数</strong></p><ul><li><code>lambda 参数列表: lambda体</code></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">lamdba函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">opr</span>):</span><br><span class="line">    <span class="keyword">if</span> opr == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> a, b: (a + b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> a, b: (a - b)</span><br><span class="line"></span><br><span class="line">f1 = calc(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">f2 = calc(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 + 5 = <span class="subst">&#123;f1(<span class="number">10</span>, <span class="number">5</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 - 5 = <span class="subst">&#123;f2(<span class="number">10</span>, <span class="number">5</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">data1 = [<span class="number">66</span>, <span class="number">15</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">80</span>, <span class="number">99</span>]</span><br><span class="line"></span><br><span class="line">filtered = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: (x &gt; <span class="number">50</span>), data1)</span><br><span class="line">data2 = <span class="built_in">list</span>(filtered)</span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line">mapped = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x * <span class="number">2</span>), data1)</span><br><span class="line">data3 = <span class="built_in">list</span>(mapped)</span><br><span class="line"><span class="built_in">print</span>(data3)</span><br></pre></td></tr></table></figure></li></ul><h2 id="类与对象">类与对象</h2><ul><li>类<ul><li><p>成员变量</p><ul><li>实例变量</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self···</span>):</span><br></pre></td></tr></table></figure><ul><li>类变量 理解为通用数据即可</li></ul></li><li><p>成员方法</p><ul><li>实例方法</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">self···</span>):</span><br></pre></td></tr></table></figure><ul><li>类方法<ul><li>@修饰函数、方法和类</li><li><code>def function(cls,···):</code></li></ul></li></ul></li><li><p>构造方法 <code>__init__()</code></p></li><li><p>属性</p></li></ul></li><li>私有变量<ul><li>前面加上 <code>__</code> 双下划线</li><li>默认类的变量是公有的，可以在类的外部访问</li></ul></li><li>私有方法 前面加上 <code>__</code> 双下划线</li><li>get（取值）和set（赋值）函数来访问私有变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get（取值）和set（赋值）函数来访问私有变量</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">property</span>(<span class="params">self</span>)</span><br><span class="line">    <span class="comment"># get() property</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@属性.setter()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">property</span>(<span class="params">self, <span class="built_in">property</span></span>):</span><br><span class="line">    self.__<span class="built_in">property</span>= <span class="built_in">property</span></span><br><span class="line">    <span class="comment"># set() property</span></span><br></pre></td></tr></table></figure><ul><li>继承 父类 <strong>只有公有的成员变量和方法才可以被继承</strong></li><li><strong><code>super().__init__()</code></strong> 初始化父类成员变量</li><li>多继承 继承多个父类</li><li>方法重写 子类的方法会重写Override父类的同名方法</li><li><strong>封装 继承 多态</strong></li></ul><h2 id="异常处理">异常处理</h2><ul><li><code>try-except</code> try代码块发生异常执行except代码块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 多重异常捕获</span></span><br><span class="line"><span class="keyword">except</span> (Error1, Error) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>无论try代码块执不执行，<strong>finally代码块都会执行</strong></li><li><code>raise</code> 引发异常</li></ul><h2 id="内置函数">内置函数</h2><ul><li><strong>datetime库</strong><ul><li><strong>datetime类</strong><ul><li><code>datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None)</code> 构造datetime类</li><li><code>datetime.today()</code> 返回当前的本地日期和时间</li><li><code>datetime.now(tz=None)</code> 返回指定时区的当前日期和时间（tz设置时区）</li><li><code>datetime.fromtimestamp(timestamp, tz=None)</code> 返回与UNIX时间戳对应的本地日期和时间（单位是秒）</li></ul></li><li><strong>date类</strong><ul><li><code>datetime.date(year, month, day)</code> 构造date类</li><li><code>date.today()</code> 返回当前的本地日期</li><li><code>date.fromtimestamp(timestamp)</code> 返回与UNIX时间戳对应的本地日期</li></ul></li><li><strong>time类</strong><ul><li><code>datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None)</code> 构造time类</li></ul></li><li><strong>timedelta</strong><ul><li>计算时间跨度</li><li><code>datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)</code> 构造timedelta类</li></ul></li><li><code>strftime(format)</code> <strong>日期时间对象转字符串</strong><ul><li>%m 两位月份表示</li><li>%y 两位年份表示</li><li>%Y 四位年份表示</li><li>%d 两位表示月中的一天</li><li>%H 两位小时表示（24小时制）</li><li>%I 两位小时表示（12小时制）</li><li>%p AM或PM区域性设置</li><li>%M 两位分钟表示</li><li>%S 两位秒表示</li><li>%f 以六位数表示微秒</li><li>%z +HHMM或-HHMM形式的UTC偏移</li><li>%Z 时区名称</li></ul></li><li><code>strptime(format)</code> <strong>字符串转日期时间对象</strong></li></ul></li><li><strong>re正则表达式</strong><ul><li><code>re.match(p, text)</code> 返回一个·Match匹配对象，否则返回None</li><li><code>re.search(p, text)</code> 返回第一个匹配对象，否则返回None</li><li><code>re.findall(p, text)</code> 返回所有匹配字符串列表，，否则返回None</li><li><code>re.sub(pattern, repl, string, count=0)</code> 字符串替换<ul><li>pattern 正则表达式</li><li>repl 替换的新字符串</li><li>string 被替换的旧字符串</li><li>count 替换的最大数量，默认为零</li></ul></li><li><code>re.split(pattern, string, maxsplit=0)</code> 字符串分割<ul><li>pattern 正则表达式</li><li>string 分割的字符串</li><li>maxsplit最大分割次数，默认为零</li></ul></li></ul></li><li><code>open(file, mode=‘r’, encoding=None, errors=None)</code> 打开文件<ul><li>file 要打开的文件</li><li>mode 文件打开模式<ul><li>t 文本文件模式</li><li>b 二进制文件模式</li><li>r 只读模式</li><li>w 只写模式</li><li>x 独占创建模式（文件不存在则创建；文件存在则FileExistsError异常）</li><li>a 追加模式（文件不存在则创建，文件存在则末尾追加）</li><li><ul><li>更新读写模式（必须与r、w或a组合使用）</li></ul></li></ul></li><li>encoding 打开文件的文件编码，默认是UTF编码</li><li>errors 指定文本文件发生编码错误时如何处理</li></ul></li><li><code>close()</code> 关闭文件</li><li><code>with open(filename) as file:</code> 自动释放资源（关闭文件）<ul><li>filename 文件名</li><li>file 打开的文件对象</li></ul></li><li>读写文本文件（或二进制文件）<ul><li><code>read(size=-1)</code> size限制读取的字符数，size=-1对读取的字符数没有限制</li><li><code>readline(size=-1)</code> 返回单行字符串，size限制读取的字符数</li><li><code>readlines()</code> 读取文件到一个字符串列表，每一行数据都是列表的一个元素</li><li><code>write(s)</code> 将字符串s写入文件并返回写入的字符数</li><li><code>writelines(lines)</code> 向文件中写入一个字符串列表（每一行末尾都提供分隔符）</li><li><code>flush()</code> 刷新写缓冲区，在文件没关闭的情况下将数据写入文件</li></ul></li></ul><h2 id="⭐⭐图形用户界面">⭐⭐图形用户界面</h2><ul><li>应用程序</li><li>窗口</li><li>面板</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">the first wxPython program</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a app object</span></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create window object(pos=position)</span></span><br><span class="line">frm = wx.Frame(<span class="literal">None</span>, title=<span class="string">&#x27;the first wxPython program&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># show window(hide by default)</span></span><br><span class="line">frm.Show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get into the main event loop</span></span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>事件循环是一种事件或消息分发处理机制，大部分GUI在界面的现实及相应用户事件的处理都是通过主事件循环实现的</li><li>自定义窗口类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;the first wxPython program&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># your own code</span></span><br><span class="line">        </span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>在窗口中添加控件（面板Panel和静态文本StaticText）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;the first wxPython program&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># create panel object</span></span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        <span class="comment"># create statictext object</span></span><br><span class="line">        statictext = wx.StaticText(parent=panel, label=<span class="string">&quot;Hello World&quot;</span>, pos=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">        </span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>事件处理<ul><li>事件源（控件）</li><li>事件</li><li>事件处理程序</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;event handing&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># create panel object</span></span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        <span class="comment"># create statictext object</span></span><br><span class="line">        self.statictext = wx.StaticText(parent=panel, label=<span class="string">&quot;please click ok button&quot;</span>, pos=(<span class="number">110</span>,<span class="number">20</span>))</span><br><span class="line">        b = wx.Button(parent=panel, label=<span class="string">&#x27;OK&#x27;</span>, pos=(<span class="number">100</span>, <span class="number">50</span>))</span><br><span class="line">        <span class="comment"># bind event，wx.EVT_BUTTON is the kind of event(按钮单击事件), on_click is event handing </span></span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, b)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.statictext.SetLableText(<span class="string">&quot;Hello, World.&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>布局管理<ul><li><p><strong>创建对象</strong></p><ul><li><code>wx.BoxSizer(wx.HORIZONTAL)</code> 创建水平方向盒子对象</li><li><code>wx.BoxSizer(wx.VERTICAL)</code> 创建垂直方向盒子对象</li><li>默认是水平方向</li></ul></li><li><p><strong>添加到父窗口</strong></p><ul><li><code>Add(window, proportion=0, flag=0, border=0)</code> 添加到父窗口</li><li>proportion 设置当前占父窗口的空间比例</li><li>flag 布局标志（对齐、边框、调整尺寸）</li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/1.png" alt="image.png"></p><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/2.png" alt="image.png"></p><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/3.png" alt="image.png"></p><ul><li>border 边框宽度</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;event handing&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># create panel object</span></span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        <span class="comment"># create statictext object</span></span><br><span class="line">        self.statictext = wx.StaticText(parent=panel, label=<span class="string">&quot;please click ok button&quot;</span>, pos=(<span class="number">110</span>,<span class="number">20</span>))</span><br><span class="line">        b = wx.Button(parent=panel, label=<span class="string">&#x27;OK&#x27;</span>, pos=(<span class="number">100</span>, <span class="number">50</span>))</span><br><span class="line">        <span class="comment"># bind event，wx.EVT_BUTTON is the kind of event(按钮单击事件), on_click is event handing </span></span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, b)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># create a layout manager box vbox </span></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        <span class="comment"># add statictext into vbox</span></span><br><span class="line">        vbox.Add(self.statictext, proportion=<span class="number">1</span>, flag=wx.ALIGN_CENTER_HORIZONTAL|wx.FIXED_MINSIZE|wx.TOP, border=<span class="number">30</span>)</span><br><span class="line">        <span class="comment"># add button b into vbox</span></span><br><span class="line">        vbox.Add(b, proportion=<span class="number">1</span>, flag=wx.EXPAND|wx.BOTTOM, border=<span class="number">10</span>)</span><br><span class="line">        panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.statictext.SetLabelText(<span class="string">&quot;Hello, World.&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/4.png" alt="image.png"></p><ul><li>控件<ul><li><strong>wx.TextCtrl() 文本输入控件</strong></li><li><code>wx.TextCtrl(panel)</code></li><li><code>wx.TextCtrl(panel, style=wx.TE_PASSWORD)</code></li><li><code>wx.TextCtrl(panel, style=wx.TE_MULTILINE)</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;文本输入控件&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        tc1 = wx.TextCtrl(panel)</span><br><span class="line">        tc2 = wx.TextCtrl(panel, style=wx.TE_PASSWORD)</span><br><span class="line">        tc3 = wx.TextCtrl(panel, style=wx.TE_MULTILINE)</span><br><span class="line"></span><br><span class="line">        userid = wx.StaticText(panel, label=<span class="string">&quot;用户ID:&quot;</span>)</span><br><span class="line">        pwd = wx.StaticText(panel, label=<span class="string">&quot;密码:&quot;</span>)</span><br><span class="line">        content = wx.StaticText(panel, label=<span class="string">&quot;多行文本:&quot;</span>)</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(userid, flag=wx.EXPAND|wx.LEFT, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(tc1, flag=wx.EXPAND|wx.ALL, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(pwd, flag=wx.EXPAND|wx.LEFT, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(tc2, flag=wx.EXPAND|wx.ALL, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(content, flag=wx.EXPAND|wx.LEFT, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(tc3, flag=wx.EXPAND|wx.ALL, border=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set panel</span></span><br><span class="line">        panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.statictext.SetLabelText(<span class="string">&quot;Hello, World.&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/5.png" alt="image.png"></p><ul><li>复选框和单选按钮</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;复选框和单选按钮&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line"></span><br><span class="line">        st1 = wx.StaticText(panel, label=<span class="string">&quot;select one your favorite language&quot;</span>)</span><br><span class="line">        cb1 = wx.CheckBox(panel, <span class="built_in">id</span>=<span class="number">1</span>, label=<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">        cb2 = wx.CheckBox(panel, <span class="built_in">id</span>=<span class="number">2</span>, label=<span class="string">&quot;Java&quot;</span>)</span><br><span class="line">        cb2.SetValue(<span class="literal">True</span>) <span class="comment"># 设置cb2初始状态为选中</span></span><br><span class="line">        cb3 = wx.CheckBox(panel, <span class="built_in">id</span>=<span class="number">3</span>, label=<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">        self.Bind(wx.EVT_CHECKBOX, self.on_checkbox_click, <span class="built_in">id</span>=<span class="number">1</span>, id2=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        st2 = wx.StaticText(panel, label=<span class="string">&quot;选择性别:&quot;</span>)</span><br><span class="line">        radio1 = wx.RadioButton(panel, <span class="built_in">id</span>=<span class="number">4</span>, label=<span class="string">&quot;男&quot;</span>, style=wx.RB_GROUP)</span><br><span class="line">        radio2 = wx.RadioButton(panel, <span class="built_in">id</span>=<span class="number">5</span>, label=<span class="string">&quot;女&quot;</span>)</span><br><span class="line">        self.Bind(wx.EVT_CHECKBOX, self.on_radio1_click, <span class="built_in">id</span>=<span class="number">4</span>, id2=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        hbox1 = wx.BoxSizer()</span><br><span class="line">        hbox1.Add(st1, flag=wx.Left|wx.Right, border=<span class="number">5</span>)</span><br><span class="line">        hbox1.Add(cb1)</span><br><span class="line">        hbox1.Add(cb2)</span><br><span class="line">        hbox1.Add(cb3)</span><br><span class="line"></span><br><span class="line">        hbox2 = wx.BoxSizer()</span><br><span class="line">        hbox2.Add(st2, flag=wx.Left|wx.Right, border=<span class="number">5</span>)</span><br><span class="line">        hbox2.Add(radio1)</span><br><span class="line">        hbox2.Add(radio2)</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(hbox1, flag=wx.ALL, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(hbox2, flag=wx.ALL, border=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set panel</span></span><br><span class="line">        panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_checkbox_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        cb = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;选择<span class="subst">&#123;cb.GetLabel()&#125;</span>，状态<span class="subst">&#123;event.IsChecked()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_radio1_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        rb = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第一组<span class="subst">&#123;rb.GetLabel()&#125;</span>被选中&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/6.png" alt="image.png"></p><ul><li>列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&quot;列表&quot;</span>, size=(<span class="number">350</span>, <span class="number">175</span>))</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line"></span><br><span class="line">        st1 = wx.StaticText(panel, label=<span class="string">&quot;选择你喜欢的编程语言：&quot;</span>)</span><br><span class="line">        list1 = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>]</span><br><span class="line">        lb1 = wx.ListBox(panel, choices=list1, style=wx.LB_SINGLE)</span><br><span class="line">        self.Bind(wx.EVT_LISTBOX, self.on_listbox1, lb1)</span><br><span class="line"></span><br><span class="line">        st2 = wx.StaticText(panel, label=<span class="string">&quot;选择你喜欢吃的水果：&quot;</span>)</span><br><span class="line">        list2 = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;香蕉&quot;</span>]</span><br><span class="line">        lb2 = wx.ListBox(panel, choices=list2, style=wx.LB_EXTENDED)</span><br><span class="line">        self.Bind(wx.EVT_LISTBOX, self.on_listbox2, lb2)</span><br><span class="line"></span><br><span class="line">        hbox1 = wx.BoxSizer()</span><br><span class="line">        hbox1.Add(st1, proportion=<span class="number">1</span>, flag=wx.LEFT|wx.RIGHT, border=<span class="number">5</span>)</span><br><span class="line">        hbox1.Add(lb1, proportion=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        hbox2 = wx.BoxSizer()</span><br><span class="line">        hbox2.Add(st2, proportion=<span class="number">1</span>, flag=wx.LEFT|wx.RIGHT, border=<span class="number">5</span>)</span><br><span class="line">        hbox2.Add(lb2, proportion=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(hbox1, flag=wx.ALL|wx.EXPAND, border=<span class="number">5</span>)</span><br><span class="line">        vbox.Add(hbox2, flag=wx.ALL|wx.EXPAND, border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        panel.SetSizer(vbox)   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_listbox1</span>(<span class="params">self, event</span>):</span><br><span class="line">        listbox = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选择（0)&quot;</span>.<span class="built_in">format</span>(listbox.GetSelection()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_listbox2</span>(<span class="params">self, event</span>):</span><br><span class="line">        listbox = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选择（0)&quot;</span>.<span class="built_in">format</span>(listbox.GetSelections()))   </span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/7.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;静态图片控件&#x27;</span>, size=(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        self.panel = wx.Panel(parent=self)</span><br><span class="line"></span><br><span class="line">        self.bmps = [</span><br><span class="line">            wx.Bitmap(<span class="string">&#x27;T:/MY WORLD/chasing stars/一起走花路吧.png&#x27;</span>, wx.BITMAP_TYPE_ANY),</span><br><span class="line">            wx.Bitmap(<span class="string">&#x27;T:/MY WORLD/chasing stars/海源1.png&#x27;</span>, wx.BITMAP_TYPE_ANY),</span><br><span class="line">            wx.Bitmap(<span class="string">&#x27;T:/MY WORLD/chasing stars/一起走花路吧.png&#x27;</span>, wx.BITMAP_TYPE_ANY)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        b1 = wx.Button(self.panel, <span class="built_in">id</span>=<span class="number">1</span>, label=<span class="string">&#x27;Button1&#x27;</span>)</span><br><span class="line">        b2 = wx.Button(self.panel, <span class="built_in">id</span>=<span class="number">2</span>, label=<span class="string">&#x27;Button2&#x27;</span>)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, <span class="built_in">id</span>=<span class="number">1</span>, id2=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.image = wx.StaticBitmap(self.panel, bitmap=self.bmps[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(b1, proportion=<span class="number">1</span>, flag=wx.EXPAND)</span><br><span class="line">        vbox.Add(b2, proportion=<span class="number">1</span>, flag=wx.EXPAND)</span><br><span class="line">        vbox.Add(self.image, proportion=<span class="number">3</span>, flag=wx.EXPAND)</span><br><span class="line"></span><br><span class="line">        self.panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        event_id = event.GetId()</span><br><span class="line">        <span class="keyword">if</span> event_id == <span class="number">1</span>:</span><br><span class="line">            self.image.SetBitmap(self.bmps[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.image.SetBitmap(self.bmps[<span class="number">2</span>])</span><br><span class="line">        self.panel.Layout()</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/8.png" alt="image.png"></p><h2 id="网络通信">网络通信</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;发送GET请求&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://agoni66.github.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">    data = response.read()</span><br><span class="line">    json_data = data.decode()</span><br><span class="line">    <span class="built_in">print</span>(json_data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;发送POST请求&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://agoni66.github.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">params_dict = &#123;<span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>:<span class="string">&#x27;10&#x27;</span>&#125;</span><br><span class="line">params_str = urllib.parse.urlencode(params_dict)</span><br><span class="line"><span class="built_in">print</span>(params_str)</span><br><span class="line"></span><br><span class="line">params_bytes = params_str.encode()</span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">    data = response.read()</span><br><span class="line">    json_data = data.decode()</span><br><span class="line">    <span class="built_in">print</span>(json_data)</span><br></pre></td></tr></table></figure><ul><li>JSON(JavaScript Object Notation)</li><li>JSON文档<ul><li>JSON对象</li><li>JSON数组</li></ul></li><li>下载文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;下载文件&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://wkphoto.cdn.bcebos.com/37d3d539b6003af3156af430252ac65c1138b689.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">    data = response.read()</span><br><span class="line">    f_name = <span class="string">&#x27;download.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(f_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载文件成功&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>JSON对象解码——字典</li><li>JSON数组解码——列表</li></ul><h2 id="访问数据库">访问数据库</h2><ul><li>数据类型<ul><li>INTEGER 有符号的整数类型</li><li>REAL 浮点类型</li><li>TEXT 字符串类型（UTF-8、UTF-16）</li><li>BLOB 二进制大对象类型，能够存放任意二进制数据</li></ul></li><li>Python数据类型与SQLite数据类型的映射</li></ul><table><thead><tr><th>Python数据类型</th><th>SQLite数据类型</th></tr></thead><tbody><tr><td>None</td><td>NULL</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>float</td><td>REAL</td></tr><tr><td>str</td><td>TEXT</td></tr><tr><td>bytes</td><td>BLOB</td></tr></tbody></table><ul><li>数据库连接对象Connection<ul><li>connect(database) 打开数据库连接，database是数据库的文件路径</li><li>close() 关闭数据库连接</li><li>commit() 提交数据库事务</li><li>rollback() 回滚数据库事务</li><li>cursor() 获得Cursor游标对象</li></ul></li><li>游标cursor操作<ul><li>execute(sql[, parameters]) 执行一条SQL语句</li><li>execute(sql[, seq_of_params]) 执行批量SQL语句</li><li>fetchone() 从结果中返回只有一条记录的序列</li><li>fetchmany(size=cursor.arraysize) 从结果中返回小于等于size记录数的序列</li><li>fetchall() 从结果集中返回所有数据</li></ul></li></ul><h2 id="多线程">多线程</h2><ul><li><p>线程模块——threading</p><ul><li><code>active_count()</code> 返回当前处于活动状态的线程个数</li><li><code>current_thread()</code> 返回当前的线程对象</li><li><code>main_thread()</code> 返回主线程对象</li><li><code>Thread(target=None, name=None,args=())</code> 创建线程Thread对象<ul><li>target参数指向线程体函数</li><li>name参数可以设置线程名</li><li>args是为线程体函数提供的参数</li></ul></li><li><strong>有休眠和没有休眠的区别</strong></li></ul><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/9.png" alt="image.png"></p></li><li><p>自定义线程函数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程体函数，该函数可以使得当前线程休眠两秒。只有当前线程休眠,其他线程才有机会执行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_body</span>():</span><br><span class="line">    <span class="comment"># 当前线程对象</span></span><br><span class="line">    t = threading.current_thread()</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># 当前线程名</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#123;0&#125;次执行线程&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(n, t.name))</span><br><span class="line">        <span class="comment"># 线程休眠</span></span><br><span class="line">        <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;线程&#123;0&#125;执行完成!&#x27;</span>.<span class="built_in">format</span>(t.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 创建线程对象t1</span></span><br><span class="line">t1 = threading.Thread(target=thread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象t2</span></span><br><span class="line">t2 = threading.Thread(target=thread_body, name=<span class="string">&#x27;MyThread&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t1</span></span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t2</span></span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><ul><li>自定义线程类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线程类的构造方法, name参数是线程名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name=name)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 线程体函数，重写父类Thread的run()方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 当前线程对象</span></span><br><span class="line">        t = threading.current_thread()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="comment"># 当前线程名</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第&#123;0&#125;次执行线程&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(n, t.name))</span><br><span class="line">            <span class="comment"># 线程休眠</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;线程&#123;0&#125;执行完成!&#x27;</span>.<span class="built_in">format</span>(t.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 通过自定义线程类，创建线程对象</span></span><br><span class="line"><span class="comment"># 创建线程对象t1</span></span><br><span class="line">t1 = SmallThread()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象t2</span></span><br><span class="line">t2 = SmallThread(name=<span class="string">&#x27;MyThread&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t1</span></span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t2</span></span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><ul><li>线程管理<ul><li>线程创建</li><li>线程启动</li><li>线程休眠</li><li>等待线程结束</li><li>线程停止</li></ul></li><li>等待线程结束</li></ul><p><code>join(timeout=None)</code> timeout用于设置超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享变量</span></span><br><span class="line">value = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程体函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_body</span>():</span><br><span class="line">    <span class="comment"># 在子线程体中修改变量value的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t1子线程开始...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;t1子线程执行...&#x27;</span>)</span><br><span class="line">        value.append(n)</span><br><span class="line">        <span class="comment"># 线程休眠</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t1子线程结束。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程开始执行...</span></span><br><span class="line"><span class="comment"># 创建线程对象t1</span></span><br><span class="line">t1 = threading.Thread(target=thread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t1</span></span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程被阻塞，等待t1线程结束</span></span><br><span class="line">t1.join()</span><br><span class="line"></span><br><span class="line"><span class="comment"># t1线程结束，继续执行，访问并输出变量value</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;value=&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程继续执行...&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/10.png" alt="image.png"></p><ul><li>线程停止</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程停止变量</span></span><br><span class="line">isrunning = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作线程体函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">workthread_body</span>():</span><br><span class="line">    <span class="keyword">global</span> isrunning</span><br><span class="line">    <span class="keyword">while</span> isrunning:</span><br><span class="line">        <span class="comment"># 线程开始工作</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作线程执行中...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 线程休眠</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作线程结束。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制线程体函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">controlthread_body</span>():</span><br><span class="line">    <span class="keyword">global</span> isrunning</span><br><span class="line">    <span class="keyword">while</span> isrunning:</span><br><span class="line">        <span class="comment"># 从键盘输入停止指令exit</span></span><br><span class="line">        command = <span class="built_in">input</span>(<span class="string">&#x27;请输入停止指令:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">            isrunning = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;控制线程结束。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 创建工作线程对象workthread</span></span><br><span class="line">workthread = threading.Thread(target=workthread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程workthread</span></span><br><span class="line">workthread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建控制线程对象controlthread</span></span><br><span class="line">controlthread = threading.Thread(target=controlthread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程controlthread</span></span><br><span class="line">controlthread.start()</span><br></pre></td></tr></table></figure><p><img src="../img/%E7%9C%8B%E6%BC%AB%E7%94%BB%E5%AD%A6Python/11.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">再次启航</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="工具" scheme="https://agoni66.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="科普" scheme="https://agoni66.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
    <category term="漫画" scheme="https://agoni66.github.io/tags/%E6%BC%AB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>趣话计算机底层技术</title>
    <link href="https://agoni66.github.io/posts/1000011.html"/>
    <id>https://agoni66.github.io/posts/1000011.html</id>
    <published>2024-10-31T17:00:00.000Z</published>
    <updated>2024-11-01T16:57:47.882Z</updated>
    
    <content type="html"><![CDATA[<h1>第一章 中央处理器CPU</h1><h3 id="1-1-1-逻辑门">1.1.1 逻辑门</h3><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0001.png" alt=""></p><h3 id="1-1-2-加法器">1.1.2 加法器</h3><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0002.png" alt=""></p><h3 id="1-1-3-算术逻辑单元ALU">1.1.3 算术逻辑单元ALU</h3><ul><li>既可以<strong>算术运算</strong>，也可以<strong>逻辑运算</strong></li><li>本质都是通过输入控制的<strong>开关</strong></li><li>乘法转换成加法</li><li>除法转换成减法</li><li>减法转换成加法</li></ul><h3 id="1-2-1-指令集">1.2.1 指令集</h3><ul><li><strong>指令机器码</strong> CPU支持的所有指令的编码（比特流）</li><li><strong>CPU的指令集</strong> 所有的指令</li><li><strong>RISC</strong> 一条指令只完成一个基本操作的精简指令集，指令长度基本固定</li><li><strong>CISC</strong> 一个指令可以完成一个复杂功能的复杂指令集，指令长度基本不固定</li></ul><h3 id="1-2-2-寄存器">1.2.2 寄存器</h3><ul><li><strong>原因</strong> 存储在内存不安全，读写效率慢</li><li><strong>寄存器</strong> CPU内部保存数据的存储电路</li><li>有指令操作寄存器</li></ul><h3 id="1-2-3-汇编语言">1.2.3 汇编语言</h3><ul><li><strong>汇编语言</strong> 用<strong>助记符</strong>来编程的语言</li></ul><h3 id="1-2-4-高级语言">1.2.4 高级语言</h3><ul><li><strong>高级语言</strong> 接近人类的自然语言来编程的语言</li><li><strong>编译器</strong></li><li><strong>编译</strong> 高级语言转换成机器指令</li></ul><h3 id="1-2-5-指令执行过程">1.2.5 指令执行过程</h3><ol><li>读取指令</li><li>指令译码</li><li>指令执行</li><li>数据会写</li></ol><h3 id="1-3-1-指令流水集">1.3.1 指令流水集</h3><ul><li>改进执行指令的流程，提升性能</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0003.png" alt=""></p><h3 id="1-3-2-流水线的级数">1.3.2 流水线的级数</h3><ul><li>将指令执行过程拆分更细</li><li>进一步减少CPU电路资源的浪费</li><li>但是级数过多会增加额外的电路设备，产生额外的功耗，造成额外的时间开销</li></ul><h3 id="1-3-3-流水线里的冒险">1.3.3 流水线里的冒险</h3><ul><li><strong>原因</strong><ul><li>访问同一电路（内存、输出）导致流水线停顿</li><li>指令所需数据来自前一指令</li></ul></li><li><strong>结构冒险</strong> 流水线中出现硬件资源竞争</li><li><strong>数据冒险</strong> 流水线中后面的指令需要等待前面指令完成数据的读写</li><li><strong>控制冒险</strong> 流水线需要根据前面的指令的执行结果来决定下一步去哪里执行</li></ul><h3 id="1-4-缓存">1.4 缓存</h3><ul><li><strong>缓存</strong> 保存从内存的数据和指令</li><li><strong>缓存行</strong> 管理内存的单元</li><li><strong>取模映射</strong> 内存中的数据只能存在缓存中的固定位置，方便存储和访问</li><li><strong>二路组相联</strong> 每个cache分成两组，即两个缓存行<ul><li>降低冲突——允许多个具有相同索引但不同标记的数据同时被缓存</li><li>提高命中率——每个组有两个缓存行，它可以存储更多的数据</li></ul></li><li><strong>指令缓存</strong> 存储指令</li><li><strong>数据缓存</strong> 存储数据</li><li><strong>三级缓存技术</strong><ul><li>一级缓存</li><li>二级缓存</li><li>三级缓存（<strong>CPU多核共用</strong>）</li></ul></li></ul><h3 id="1-5-多核缓存不一致问题">1.5 多核缓存不一致问题</h3><ul><li><strong>原子操作</strong> 不可切分的动作</li><li><strong>片内总线</strong> 多核之间进行信息沟通</li><li><strong>缓存一致性协议（缓存行的四种状态）</strong><ul><li>已修改(Modified, M)</li><li>独占(Exclusive, E)</li><li>共享(Shared, S)</li><li>无效(Invalid, I)</li></ul></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0004.png" alt=""></p><ul><li>规定一个内存被多个核缓存，不允许多个核同时修改缓存❎</li></ul><h3 id="1-6-指令乱序执行">1.6 指令乱序执行</h3><ul><li>数据冒险与流水线停顿</li><li><strong>数据冒险</strong> 流水线中后面的指令需要等待前面指令完成数据的读写</li><li><strong>乱序执行</strong> 先执行不需要依赖前面数据的指令，打乱指令执行的顺序</li><li><strong>保留站</strong> 一个缓冲区登记指令是否有数据依赖、具体依赖什么数据、需要用到的执行部件有哪些、当前是否繁忙、以及需要读写的寄存器</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0005.png" alt=""></p><h3 id="1-7-控制冒险与跳转指令">1.7 控制冒险与跳转指令</h3><ul><li><strong>静态预测</strong> 不管前面结果，直接<strong>假定分支不会跳转</strong>继续把后续的指令载入流水线处理</li><li><strong>分支预测</strong> 记录最近跳转的次数，根据最近多次跳转的结果再来预测</li></ul><h3 id="1-8-一条指令同时处理多个数据">1.8 一条指令同时处理多个数据</h3><ul><li><strong>MMO〜MM7</strong> 64位寄存器，同时存储两个32位的整数和8个8位的整数（借用用浮点数运算单元FPU的寄存器）</li><li><strong>XMMO〜XMM7</strong> 128位寄存器</li><li><strong>单指令多数据流SIMD</strong> 在一条指令中同时处理多个数据的技术</li></ul><h3 id="1-9-一个核同时执行两个线程">1.9 一个核同时执行两个线程</h3><ul><li><strong>资源闲置</strong> 比如整数运算时浮点数运算电路会闲置</li><li><strong>超线程</strong> 单线程改多线程，效率不能翻倍但有提升</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0006.png" alt=""></p><h3 id="1-10-管理内存">1.10 管理内存</h3><ul><li><strong>分段式存储管理</strong> 寄存器16位，最大64KB的段</li><li><strong>访问内存</strong> 段地址+段内偏移地址</li><li><strong>OS划分时间片</strong></li><li><strong>虚拟内存</strong></li><li><strong>分页交换</strong> 把暂时不用的页面放到硬盘，使用页错误中断换回页面</li></ul><h3 id="1-11-地址翻译">1.11 地址翻译</h3><ul><li><strong>内存管理单元MMU</strong></li><li><strong>页目录索引</strong></li><li><strong>页表索引</strong></li><li><strong>页内偏移</strong></li><li><strong>地址翻译</strong> 从CR3寄存器中取出页目录地址，根据页目录索引找到页表，再根据页表索引找到物理内存页面，最后根据页内偏移，完成寻址</li><li><strong>地址翻译缓存</strong> 把翻译的虚拟地址和物理地址的映射关系放入缓存（局部性原理）</li><li><strong>地址转换后援缓冲器（快表）TLB</strong></li></ul><h3 id="1-12-GPU">1.12 GPU</h3><ul><li><strong>多计算电路，少逻辑控制电路</strong></li><li><strong>SIMT并行计算</strong> （批量计算算法固定）</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0007.png" alt=""></p><ul><li><strong>多ALU and 多执行上下文</strong> （充分利用计算资源，不让ALU闲置）</li></ul><h1>第二章 存储设备</h1><h3 id="2-1-缓存为什么快">2.1 缓存为什么快</h3><ul><li><strong>内存</strong> 动态随机存储器DRAM（1个DRAM单元——一个MOS晶体管和一个电容，可以存储1比特的信息）</li><li><strong>缓存</strong> 静态随机存储器SRAM</li><li>缓存因为为没有依靠电容充放电，全都是晶体管的导通与断开，比起内存的DRAM速度要快得多</li><li>缺点 成本高、占用空间大</li></ul><h3 id="2-2-内存条">2.2 内存条</h3><ul><li><strong>存储芯片</strong> 黑乎乎的东西8～16个</li><li><strong>PCB电路板</strong></li><li><strong>金手指</strong> 连接主板插槽的接触点</li><li><strong>RAM</strong> 随机存储器</li><li><strong>动态数据刷新</strong> DRAM“漏电”电容的电荷消失，需要周期性充电刷新来维持数据的稳定</li><li><strong>内存控制器</strong></li><li>指定芯片、分片、格子的行地址和列地址来访问比特位</li><li><strong>读写单元</strong> 一字节8个比特位</li></ul><h3 id="2-3-多个CPU共同访问内存">2.3 多个CPU共同访问内存</h3><ul><li>非一致性内存访问NUMA（Non Uniform Memory Access）<ul><li>16核拆分成两个CPU，组成两个NUMA节点Node</li><li>每个节点直接连接一部分内存</li><li><strong>内连接（inter-connect）通道</strong> 两个CPU之间的通道</li><li><strong>本地访问</strong></li><li><strong>远程访问</strong></li><li>远程访问效率高于页面置换，内存不够时优先远程访问</li></ul></li></ul><h3 id="2-4-硬盘">2.4 硬盘</h3><ul><li><strong>金属磁粒</strong> 机械硬盘盘面存储数据的东西</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0008.png" alt=""></p><ul><li><strong>读磁头</strong> 通过电磁检测磁粒的极性分辨0和1</li><li><strong>写磁头</strong> 通过磁场改变单元格中金属磁粒的极性，设定成0或1</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0009.png" alt=""></p><h3 id="2-5-磁盘管理">2.5 磁盘管理</h3><ul><li><strong>块block</strong> 读写的基本单位，把连续的扇区当成一个整体</li><li><strong>块位图</strong> 记录哪些块是空闲的，哪些块是被占用的（记录在第一个块）</li><li><strong>inode</strong> 记录每一个文件的大小、位置、权限、时间等，每一个都是128字节，并且每一个都有一个专属号码在<strong>inode表</strong></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0010.png" alt=""></p><ul><li><strong>目录</strong></li><li><strong>根目录</strong></li><li><strong>描述符</strong> 记录inode表、块位图、inode位图的位置信息</li><li><strong>超级块</strong> 记录硬盘总共用了多少块，还剩多少块</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0011.png" alt=""></p><ul><li><strong>启动扇区DBR</strong> 装载引导程序</li><li><strong>主引导扇区MBR</strong> 记录所有的分区信息，位于硬盘的第一个扇区</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0012.png" alt=""></p><h1>第三章 数据的输入与输出</h1><h3 id="3-1-总线">3.1 总线</h3><ul><li><strong>总线</strong> 包含传输数据的数据总线、传输地址的地址总线和进行控制管理的控制总线</li><li><strong>总线控制器</strong> 统一管理总线</li><li><strong>北桥芯片</strong> 集成内存控制器、总线控制器、图像控制器（访问内存和显卡）高速设备</li><li><strong>南桥芯片</strong> 集成各种IO外部设备的控制器（低速设备）</li><li>一条总线 → 多个层级总线组成的总线系统</li><li>NOW CPU集成内存控制器和图像控制器 重新变回一条总线</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0013.png" alt=""></p><h3 id="3-2-中断"><strong>3.2 中断</strong></h3><ul><li><strong>eflags寄存器</strong> 存储当前CPU是否可以被中断的值</li><li><strong>不可屏蔽的中断NMI</strong></li><li><strong>可编程中断控制器PIC</strong><ul><li>中断向量</li><li><strong>中断描述符表IDT</strong> 记录处理中断对应的函数地址</li><li><strong>idtr寄存器</strong> 指向中断描述符表IDT的内存地址</li><li><strong>异常处理</strong> 也是这个表，但异常需要立即处理</li><li>异常是同步的，中断是异步的</li></ul></li><li><strong>高级可编程中断控制器APIC</strong><ul><li>IO APIC</li><li>Local APIC</li><li><strong>处理器间中断Inter-Processor Interrupt IPI</strong></li></ul></li><li><strong>中断亲和性</strong></li><li><strong>亲和寄存器</strong></li></ul><h3 id="3-3-计算机启动">3.3 计算机启动</h3><ul><li><strong>自检工作</strong> 所有寄存器全部重置，如有错误记录到EAX寄存器</li><li><strong>引导处理器BSP</strong></li><li><strong>主引导记录MBR</strong> 512字节，检测最后两个合法字节是0x55和0xAA</li></ul><h3 id="3-4-数据搬运">3.4 数据搬运</h3><ul><li><strong>可编程输入输出模式PIO</strong> 执行in和out两条指令对外部设备读写数据</li><li><strong>直接存储器访问DMA</strong> 设置寄存器传输哪里的数据，从哪里到哪里，长度是多少</li><li><strong>DMA控制器DMAC</strong></li></ul><h3 id="3-5-零拷贝技术">3.5 零拷贝技术</h3><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0014.png" alt=""></p><ul><li>零拷贝技术 把从硬盘读取的数据缓冲区地址和长度给网络socket描述符</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0015.png" alt=""></p><h3 id="3-6-网卡">3.6 网卡</h3><ul><li><strong>集线器Hub</strong> 收到的信号做一个增强处理后发送给所有端口</li><li><strong>CSMA/CD 载波侦听多路访问/冲突检测</strong></li><li>以太网帧长度不能低于64字节，这样就算在最远两端发生的碰撞冲突都能及时传递回去被检测到</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0016.png" alt=""></p><ul><li><strong>ARP 地址解析协议</strong> 发送目的地址是FF:FF:FE:FF:FF:FF的广播，匹配的发送回去</li><li>ARP欺骗</li><li>网卡的<strong>混杂模式</strong> 把总线的全部数据帧抓取交给CPU处理</li><li><strong>交换机</strong> 记录对应的MAC地址和端口号，精准发送</li><li>全双工通信</li><li>冲突域</li><li><strong>数据帧校验</strong> 对帧检验序列FCS进行循环冗余码校验<strong>CRC</strong></li><li><strong>RX FIFO队列</strong> 网卡内部的接收队列缓冲区</li><li><strong>DMA控制器</strong> 传输网卡的数据</li><li><strong>硬中断</strong> 硬中断需要快速完成</li><li><strong>软中断</strong> 硬中断无法快速完成的调用软中断处理函数进行处理</li><li><strong>NAPI</strong> 数据包过多采用中断＋轮询<ul><li>第一部分 硬中断通知，关中断，但不处理数据包</li><li>第二部分 软中断轮询处理，不需要关中断</li></ul></li><li><strong>Netfilter</strong> Linux内核的一个子系统，允许实现各种与网络相关的操作</li><li><strong>协议栈</strong></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0017.png" alt=""></p><h3 id="3-7-直接收发数据包">3.7 直接收发数据包</h3><ul><li>每次中断都要保存上下文，从用户态切换到内核态</li><li>线程亲和性 网络监控软件的工作线程独占CPU核心，解决缓存失效问题</li><li><strong>DPDK</strong><ul><li>通过操作系统的用户态模式驱动UIO，在用户态通过轮询的方式读取网卡的数据包</li><li>直接在用户态读取，不用把数据包在内核态空间和用户态空间搬来搬去</li><li>读取后直接分析，不用走系统协议栈和netfilter</li></ul></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0018.png" alt=""></p><ul><li>大页内存技术 支持2MB和1GB管理内存页面</li><li><strong>Interrupt DPDK</strong><ul><li>没有数据包处理时就进入睡眠，改为中断通知</li><li>共享CPU核，不独占CPU</li><li>DPDK线程有更高的调度优先级</li><li>数据包多后变轮询模式，灵活切换</li></ul></li></ul><h1>第四章 操作系统</h1><h3 id="4-1-控制程序">4.1 控制程序</h3><ul><li><strong>多道程序处理</strong></li><li><strong>时间分片</strong></li><li><strong>时钟中断</strong></li><li><strong>任务状态</strong><ul><li><strong>创建</strong></li><li><strong>就绪</strong></li><li><strong>执行</strong></li><li><strong>阻塞</strong></li><li><strong>终止</strong></li></ul></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0019.png" alt=""></p><ul><li><strong>优先级</strong></li><li><strong>抢占</strong> 高优先级程序出现时，低优先级的程序未完成被剥夺执行机会</li><li><strong>多核时代 → 操作系统</strong></li></ul><h3 id="4-2-进程">4.2 进程</h3><ul><li>1号进程init</li><li><strong>PID</strong> 进程的身份证</li><li><strong>访问越界</strong></li><li><strong>内核地址空间</strong> 操作系统内核运行的空间</li><li><strong>进程调度</strong></li><li>一个进程里可以同时存在多个执行流，也就是多个线程，每一个线程都有自己的执行上下文和堆栈，互不影响</li><li><strong>线程</strong> 操作系统调度执行的单位</li><li><strong>并发执行</strong> 运行多个不同的线程</li></ul><h3 id="4-3-线程">4.3 线程</h3><ul><li><strong>完全公平调度算法CFS</strong> 红黑树管理线程</li><li>只要进程的其中一个线程挂掉，所有线程都会被结束掉</li><li><strong>权重</strong> 权重越高的线程越优先被运行</li><li><strong>等待队列</strong></li></ul><h3 id="4-4-系统调用">4.4 系统调用</h3><ul><li><strong>内核地址空间</strong> 操作系统内核所在的内存区域</li><li><strong>用户地址空间</strong> 应用程序访问的内存区域</li><li><strong>系统调用表</strong> sys_call_table</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0020.png" alt=""></p><ul><li><strong>系统调用</strong> 操作系统将管理文件、内存、进程、线程、网络、硬件等的在内核地址空间操作封装成函数接口方便应用程序调用</li><li><strong>内核栈</strong> 线程有两个栈，一个在用户态地址空间，一个在内核态地址空间，内核栈会小很多</li><li><strong>syscall sysret 一对的</strong></li></ul><h3 id="4-5-异常处理">4.5 异常处理</h3><ul><li><strong>中断描述符IDT</strong> 记录所有中断和异常需要处理的地方</li><li><strong>异常</strong> CPU在执行线程的代码指令时出现了错误</li><li>idtr寄存器记录中断描述符IDT</li><li><strong>信号投递</strong></li><li>触发异常时，CPU自动保存的现场（返回地址和一些其他关键寄存器的值）</li><li><strong>iret</strong>(interrept return) 专门用于被中断或异常打断的线程处理完毕后返回用户态地址空间</li></ul><h3 id="4-6-信号处理">4.6 信号处理</h3><ul><li><strong>可靠信号和不可靠信号</strong></li><li><strong>进程的描述符task_struct</strong></li><li>进程不能直接调用这些信号处理函数</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0021.png" alt=""></p><ul><li>调用<strong>sigprocmask函数</strong>屏蔽信号</li><li><strong>SIGKILL和SIGSTOP无法屏蔽</strong></li><li>一个进程实际就是一个线程组</li><li>task struct中原来的信号等待队列只存放各个线程自己的信号，另外再单独设置一个队列来存放进程的信号，让所有的线程共享</li><li>给线程投递信号（group=0 ）</li><li>给进程投递信号（group=1 ）</li><li>处理信号处理函数的表格是<strong>整个进程共享的</strong></li></ul><h3 id="4-7-锁">4.7 锁</h3><ul><li><strong>原子操作</strong></li><li><strong>自旋锁</strong> 获取锁的时候线程会一直循环检查状态</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0022.png" alt=""></p><ul><li><strong>互斥锁</strong> 获取锁的时候线程进入锁的等待队列，交出CPU执行权限进入睡眠，等待唤醒</li><li><strong>条件变量</strong>  等待条件变量的线程平时阻塞着，别的线程发现条件满足之后，就将条件变量激活</li><li><strong>信号量</strong> 升级版互斥锁，有计数器指定最多允许多少个线程同时获得它</li></ul><h3 id="4-8-Linux的权限管理">4.8 Linux的权限管理</h3><ul><li><strong>文件打开的过程</strong></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0023.png" alt=""></p><ul><li><strong>常规DAC检查</strong> genenric_permission函数</li><li>文件的归属用户id保存在文件索引inode</li><li>进程的用户id保存在进程的task_struct（task_struct-&gt;cred的fsuid）</li><li>Linux操作系统为所有文件针对所属的用户、所属的用户组和其他用户分别设置了访问权限</li><li><strong>读（Read ）、写（Write ）、可执行（Execute ）三种权限</strong></li><li><strong>UGO权限管理方式</strong> 权限信息和文件的归属信息记录在索引信息inode</li><li><strong>ACL访问控制列表</strong> 单独记录一些细粒度的权限信息（校验完进程所属用户和文件所属用户后，就会进入ACL的检查）</li><li><strong>Cgroup检查</strong> 是否有权访问对应的设备</li></ul><h3 id="4-9-Docker">4.9 Docker</h3><ul><li><strong>轻量级的虚拟容器</strong> 只提供一个运行环境，不用运行一个操作系统，所有容器的系统内核与宿主机共用</li><li><strong>chroot和pivot_root</strong> 可以将进程看到的根目录修改为一个新位置（“伪造一个文件系统欺骗容器的进程”）</li><li>操作系统镜像文件和进程依赖的目录和文件通过联合挂载的方式，挂载到容器进程的根目录下，变成容器的rootfs，和真实系统目录一模一样</li><li><strong>命名空间namespace</strong> 划定一个个的命名空间，把进程划分到这些命名空间中，每个命名空间都是独立存在的，命名空间里的进程都无法看到空间之外的进程、用户、网络等信息</li><li><strong>Cgroup</strong> 划定一个个分组，然后限制每个分组能够使用的资源，比如内存的上限值、CPU的使用率、硬盘空间总量等（系统内核会自动检查和限制这些分组中的进程资源使用量）</li></ul><h1>第五章 系统编程</h1><h3 id="5-1-进程">5.1 进程</h3><ul><li><strong>Linux 一切皆文件</strong></li><li><strong>fork函数</strong> 创建进程<ul><li>一次调用会返回两次</li><li>父进程返回进程号</li><li>子进程返回0</li><li>子进程和父进程共享内存空间</li></ul></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0024.png" alt=""></p><ul><li><strong>写时拷贝（COW）机制</strong> 允许只读，写入会触发异常分配新页面</li><li>fork创建子进程只拷贝当前线程，不拷贝其他线程</li></ul><h3 id="5-2-线程的栈">5.2 线程的栈</h3><ul><li><strong>后进先出LIFO</strong></li><li><strong>push和pop指令</strong> 压入数据和弹出数据</li><li><strong>call指令</strong> 调用函数（把call指令后面的那条指令地址保存到栈里面,等调用完函数后才能回来继续往后执行）</li><li><strong>ret指令</strong>  函数执行完后用来返回到调用它的地方的指令，CPU在执行ret指令的时候，就会把之前保存在这里的地址取出来，跳转过去</li><li>使用寄存器传参比使用线程栈传参快很多</li><li><code>ulimit -a</code> 查看线程栈的大小</li><li><strong>自动增长</strong> 缺页异常处理时发现是线程栈会分配新内存页面</li><li>但是如果超出上限的话会杀死进程</li><li><strong>内核栈</strong> 页面小（4KB～8KB）小心使用递归调用</li><li><strong>栈溢出攻击</strong> 将栈里保存的返回地址覆盖为恶意代码的地址</li></ul><h3 id="5-3-进程通信">5.3 进程通信</h3><ul><li><strong>信号</strong> Linux的一种软中断通信机制，总共64种信号，只能通知不能传输数据</li><li><code>kill -l</code> 查看所有信号</li><li><strong>socket套接字</strong></li><li><strong>127.0.0.1</strong> 本地回环地址，数据在协议栈转发，可以在虚拟的回环网卡lo抓取数字</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0025.png" alt=""></p><ul><li><strong>匿名管道</strong> 内核的一段缓冲区，提供读写两个端口，单向</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0026.png" alt=""></p><ul><li>消息队列 内核的一个消息链表，可以指定类型</li><li><strong>命名管道</strong> 有名字就不限制进程通道，只要使用名字都可以打开管道通信</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0027.png" alt=""></p><ul><li>共享内存</li></ul><h3 id="5-4-IO多路复用">5.4 IO多路复用</h3><ul><li><strong>select函数</strong> 遍历所有文件描述符，挂入相关联设备的等待队列后进入阻塞，如果设备有消息提供回调函数通知Web服务进程</li><li>select使用位图数组，最多同时处理1024个文件描述符</li><li><strong>poll模型</strong> 使用链表存储，可容纳更多文件描述符</li><li><strong>epoll模型</strong><ul><li>采用红黑树管理监听的文件描述符方便查找</li><li>采用双向链表管理队列，不需要遍历所有的文件描述符</li></ul></li></ul><h3 id="5-5-读写文件">5.5 读写文件</h3><ul><li><strong>数据结构</strong> 缓存文件数据块信息存到内存</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0028.png" alt=""></p><ul><li><strong>fsync函数</strong> 进行同步将缓存写入硬盘</li><li><strong>内存映射文件</strong> 将文件的数据缓存页映射到进程的用户台地址空间</li><li>把整个文件或者文件的一部分直接映射到应用程序的地址空间</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0029.png" alt=""></p><h3 id="5-6-协程">5.6 协程</h3><ul><li>线程可以在执行函数遇到阻塞后，保存执行的上下文，转而执行别处的代码。待阻塞的请求完成后，再回去继续执行</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0030.png" alt=""></p><ul><li><strong>协程</strong> 在一个线程中，可以抽象出多个执行流协程，由线程来统一调度管理</li><li>操作系统可以通过<strong>时钟中断</strong>和**系统调用（抢占式调度）**进入内核来剥夺线程的执行权</li><li>Golang 设计为支持协程，封装好系统调用方便协程调度器管理</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0031.png" alt=""></p><h3 id="5-7-调试器GDB">5.7 调试器GDB</h3><ul><li>ptrace函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="keyword">enum</span> __ptrace_requeset request, <span class="comment">// 第一个参数是一个枚举型的变量,表示要执行的操作</span></span></span><br><span class="line"><span class="params">    <span class="type">pid_t</span> pid,</span></span><br><span class="line"><span class="params">    <span class="type">void</span> *addr,</span></span><br><span class="line"><span class="params">    <span class="type">void</span> *data</span></span><br><span class="line"><span class="params">    )</span>;</span><br></pre></td></tr></table></figure><ul><li><code>break</code> <strong>设置断点</strong><ul><li>把被调试进程中那个位置的指令修改为0xCC</li><li>CPU执行这条特殊的指令会陷入内核态，然后取出中断描述符表IDT的3号表项中的处理函数来执行</li><li>系统内核拿到CPU的执行权，会发送一个SIGTRAP信号给被调试的进程</li><li>GDB截获信号，检查是不是设置的断点，显示断点触发</li><li>在没有下一步指示之前，被调试的进程都不会进入就绪队列被调度执行</li></ul></li><li><strong>单步执行</strong><ul><li><strong>eflags标志寄存器</strong> 包含了程序运行的一些状态和一些工作模式的设定</li><li><strong>TF标记</strong> 告诉CPU进入单步执行模式</li></ul></li><li><strong>内存断点</strong><ul><li><code>watch</code> 监视被调试进程中某个内存地址的数据变化</li><li><strong>调试寄存器</strong> DR0到DR7总共8个，在DRO〜DR3中设置要监控的内存地址，在DR7中设置要监控的模式（读或写）</li></ul></li></ul><h3 id="5-8-可执行文件ELF">5.8 可执行文件ELF</h3><ul><li><strong>do_execve_commo函数</strong> 启动可执行文件的函数</li><li><strong>prepare_binprm函数</strong> 读取文件头部的128字节数据，放入内存缓冲区</li><li><strong>search_binary_handler函数</strong> 在可执行文件处理节点的链表中寻找处理可执行文件的模块</li><li><strong>load_script函数</strong> 脚本类型程序的加载函数</li><li><strong>程序头表</strong> 结构数组，每一个结构都记录一个段（segment）的信息</li><li><strong>段</strong> 进程地址空间中的一块区域，由一个节（section ）或者多个节构成</li><li><strong>节</strong> 存放ELF文件的数据，比如静态数据、代码指令、调试信息</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0032.png" alt=""></p><ul><li>加载过程<ul><li><strong>load_elf_binary函数</strong></li><li>引用动态链接库需要解释器加载</li><li>静态编译则不需要</li><li>检查可执行栈</li><li>加上随机偏移 难以推算数据和函数的内存地址</li></ul></li></ul><h1>第六章 计算机攻击与安全</h1><h3 id="6-1-TCP序列号">6.1 TCP序列号</h3><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0033.png" alt=""></p><ul><li><strong>中间人攻击</strong> 监听网络通信拿到通信的序列号和确认号，伪造进行通信</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0034.png" alt=""></p><ul><li><strong>初始序列号INS</strong> 计数器，每4ms加1（不能直接发送，会被别人算出新的ISN）</li><li><strong>ISN = M + F(localhost, localport, remotehost, remoteport)</strong><ul><li>M 计数器</li><li>F MD5算法</li><li>F参数 通信双方的IP和端口</li></ul></li><li><strong>ISN = M + F(localhost, localport, remotehost, remoteport, secretkey)</strong></li><li>同名计数器 因为CPU为8核防止多个线程之间竞争</li><li><strong>TCP定时器</strong></li><li><strong>TCP计数器</strong> DelayedACKLost</li></ul><h3 id="6-2-TCP-SYN-Flood">6.2 TCP SYN Flood</h3><ul><li><strong>SYN洪水攻击</strong> 收到SYN数据包后，需要准备一个数据块来存储客户端的信息，发送大量SYN数据包需要分配大量数据块直到空间耗尽</li><li><strong>SYN Cookie</strong> 第二次发给客户端的序列号是一个哈希值，第三次握手时计算哈<code>希值+1=ACK</code> 为正常数据包，错误数据包直接丢弃</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0035.png" alt=""></p><h3 id="6-3-HHTPS">6.3 HHTPS</h3><ul><li>对称加密</li><li>非对称加密</li><li>非对称与对称加密结合 使用非对称加密算法传输加密内容的密钥</li><li>密钥计算</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0036.png" alt=""></p><ul><li><strong>中间人攻击</strong> 冒充服务器和客户端通信，冒充客户端和服务器通信</li><li><strong>数字证书</strong></li><li><strong>根证书</strong> 验证最终的签发者是否在根证书列表中</li></ul><h3 id="6-4-漏洞攻击">6.4 漏洞攻击</h3><ul><li><strong>栈金丝雀Stack Canary</strong>  抵御栈溢出攻击</li><li>虚函数攻击 覆盖虚函数表指针，指向一个假的虚函数表，表格写入恶意代码地址</li><li>虚函数表指针一般都是在对象的头部（最前面8个字节）</li><li><strong>KPTI内核页表隔离</strong> 线程运行在用户态和内核态时使用不同的页表</li><li><strong>侧信道</strong> 通过判断内存的访问速度来获知是否有被缓存</li></ul><h3 id="6-5-SGX">6.5 SGX</h3><ul><li><strong>安全访问级别</strong> Ring0-Ring3</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0037.png" alt=""></p><ul><li><strong>Enclave安全空间</strong><ul><li><strong>创建</strong> 通过执行ECREATE指令创建一个安全空间</li><li><strong>初始化</strong> 通过执行EINIT指令对安全空间进行初始化</li><li><strong>进入&amp;退出</strong> 通过执行EENTER/EEXIT指令进入和退出安全空间</li><li><strong>中断&amp;异常</strong> 通过执行AEX指令退出，将在安全空间执行的上下文保存起来</li><li><strong>系统调用</strong> 通过执行AEX指令退出，执行完系统调用再进来</li><li><strong>函数调用</strong> 安全空间和外部可以互相调用函数，普通空间调用安全空间函数叫ECALL,安全空间调用外部空间函数叫OCALL</li><li><strong>销毁</strong> 通过执行EREMOVE指令销毁一个安全空间</li></ul></li><li><strong>内存加密</strong>  内存加密引擎MEE(memory encryption engine)电路，对安全空间的数据进行透明的加解密，数据写入内存时加密，读取CPU内部时解密</li></ul><h3 id="6-6-挖矿病毒">6.6 挖矿病毒</h3><ul><li><strong>top命令</strong> 常用的实时系统监控工具，提供了一个动态的、交互式的实时视图，显示系统的整体性能信息以及正在运行的进程的相关信息</li><li><strong>ps命令</strong> 显示当前进程的状态</li><li><strong>netstat命令</strong> 打印所有的网络连接信息</li><li><strong>unhide</strong> 网络取证工具，能够发现那些借助 rootkit、LKM 及其它技术隐藏的进程和TCP/UDP 端口</li><li><strong>Redis持久化存储</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET <span class="built_in">dir</span> /root/.ssh <span class="comment"># 指定保存地址</span></span><br><span class="line">CONFIG SET dbfilename authorized_keys <span class="comment"># 指定保存的文件名</span></span><br><span class="line">SAVE <span class="comment"># 将数据保存到文件</span></span><br></pre></td></tr></table></figure><ul><li>原因 Redis默认没有密码，可以使用命令行或直接修改redis.conf文件设置密码</li></ul><h3 id="6-7-整数-1引发的内核攻击">6.7 整数+1引发的内核攻击</h3><ul><li><strong>IDT表项的结构图</strong></li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0038.png" alt=""></p><ul><li>无符号整数与有符号整数的切换</li></ul><ol><li>精心设计一个config值，从应用层传入内核空间的perf_swevent_init函数</li><li>利用内核漏洞，把一个64位无符号数赋值给一个int型变量，导致变量溢出为一个负数</li><li>禾ij用溢出的event_id越界访问perf_swevent_enabled,指向IDT的表项、将第四项中断处理函数的高32位进行+1</li><li>修改后的中断处理函数指向了用户空间，提前在此安排恶意代码。</li><li>应用层执行int 4汇编指令，触发4号中断，线程将进入内核空间，以内检权限执行提前安排的恶意代码</li></ol><h3 id="6-8-从虚拟机逃脱">6.8 从虚拟机逃脱</h3><ul><li>虚拟化技术</li><li>硬件辅助虚拟化 操作系统和程序的指令都是在真实的CPU上执行的，不再用软件来解释模拟</li><li>虚拟机监控程序HyperVisor</li><li><strong>虚拟机逃逸技术</strong> 虚拟机会和外面的真实计算机通信，抓住通信过程中的漏洞，把指令代码掺杂在通信数据中可以逃逸出去</li></ul><p><img src="../img/%E8%B6%A3%E8%AF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF/0039.png" alt=""></p><ul><li><strong>漏洞编号CVE</strong> Common Vulnerabilities and Exposures 显示年份和具体漏洞编号</li></ul>]]></content>
    
    
    <summary type="html">Interesting story Underlying computer technology</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计算机" scheme="https://agoni66.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
</feed>
