<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小黄鸭的窝窝✨</title>
  
  
  <link href="https://agoni66.github.io/atom.xml" rel="self"/>
  
  <link href="https://agoni66.github.io/"/>
  <updated>2024-12-02T14:46:34.334Z</updated>
  <id>https://agoni66.github.io/</id>
  
  <author>
    <name>小黄鸭的窝窝✨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习</title>
    <link href="https://agoni66.github.io/posts/1000142.html"/>
    <id>https://agoni66.github.io/posts/1000142.html</id>
    <published>2024-12-02T10:30:00.000Z</published>
    <updated>2024-12-02T14:46:34.334Z</updated>
    
    <content type="html"><![CDATA[<div class="note purple no-icon flat"><p><font size="4"><b>深度学习入门导航🚀🚀🚀</b></font></p><ol><li><p>🎉<a href="https://agoni66.github.io/posts/1000141.html">感知机</a> </p></li><li><p>🎈<a href="https://agoni66.github.io/posts/1000142.html">神经网络</a> ⇦ 当前位置🪂</p></li><li><p>🧨<a href="https://agoni66.github.io/posts/1000143.html">神经网络的学习</a></p></li><li><p>🎊<a href="https://agoni66.github.io/posts/1000144.html">误差反向传播法</a></p></li><li><p>🧧<a href="https://agoni66.github.io/posts/1000145.html">与学习相关的技巧</a></p></li><li><p>🎑<a href="https://agoni66.github.io/posts/1000146.html">卷积神经网络</a></p></li><li><p>🌈<a href="https://agoni66.github.io/posts/1000147.html">深度学习</a></p></li></ol></div><blockquote><p>感知机设置权重的工作还是人工进行的</p><p>神经网络的一个重要性质是它可以自动地从数据中学习到合适的权重参数</p></blockquote><p><img src="../img/机器学习/13.png" alt="image.png"></p><ul><li>输入层 第0层</li><li>中间层（隐藏层） 第1层</li><li>输出层 第2层</li></ul><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>将输入信号的总和转换为输出信号</p><p>比如感知机，h(x)就是<strong>激活函数</strong>：</p><script type="math/tex; mode=display">y=h(b+w_1x_1+w_2x_2)</script><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing="0.7em 0.4em"><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>⩽</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math><p><br></p><p><img src="../img/机器学习/14.png" alt="image.png"></p><p><br></p><script type="math/tex; mode=display">\begin{array}{c}a=b+w_1x_1+w_2x_2\\\\y=h(a)\end{array}</script><p><strong>表示神经元的○中明确显示了激活函数的计算过程</strong></p><ul><li>节点a <strong>信号的加权总和</strong></li><li>h() <strong>激活函数</strong></li></ul><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h3><script type="math/tex; mode=display">h(x)=\frac1{1+\exp(-x)}</script><ul><li>$exp(−x)$ 表示$e^{−x}$的意思</li><li>$e$ 纳皮尔常数2.7182</li></ul><p><img src="../img/机器学习/15.png" alt="image.png"></p><font color=orange>**图形**</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(-<span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">y = sigmoid(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-<span class="number">0.1</span>, <span class="number">1.1</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/机器学习/16.png" alt="image.png"></p><h3 id="阶跃函数"><a href="#阶跃函数" class="headerlink" title="阶跃函数"></a>阶跃函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step_function</span>(<span class="params">x</span>):</span><br><span class="line">    y = x &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> y.astype(np.<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.array(x&gt;<span class="number">0</span>, dtype=bp.int32)</span><br></pre></td></tr></table></figure><font color=orange>**图形**</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.array(x &gt; <span class="number">0</span>, dtype=np.int32)</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">y = step_function(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.ylim(-<span class="number">0.1</span>, <span class="number">1.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="../img/机器学习/17.png" alt="image.png"></p><h3 id="sigmoid函数和阶跃函数的比较"><a href="#sigmoid函数和阶跃函数的比较" class="headerlink" title="sigmoid函数和阶跃函数的比较"></a>sigmoid函数和阶跃函数的比较</h3><ul><li>平滑性</li><li>感知机中神经元之间流动的是0或1的二元信号（阶跃函数）</li><li>神经网络中流动的是连续的实数值信号（sigmoid函数）</li><li><strong>形状相似</strong></li><li><strong>非线性函数</strong> （$h(x)=cx$为线性函数）</li></ul><blockquote><p><font color=orange><strong>神经网络的激活函数必须使用非线性函数</strong></font><br>线性函数：不管如何加深层数，总是存在与之等效的“无隐藏层的神经网络”</p></blockquote><h3 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a>ReLU函数</h3><p><strong>ReLU函数在输入大于0时，直接输出该值；在输入小于等于0时，输出0</strong></p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing=".2em"><mtr><mtd><mi>x</mi></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><mi>x</mi><mo>⩽</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br></pre></td></tr></table></figure><h2 id="多维数组的运算"><a href="#多维数组的运算" class="headerlink" title="多维数组的运算"></a>多维数组的运算</h2><h3 id="神经网络的内积"><a href="#神经网络的内积" class="headerlink" title="神经网络的内积"></a>神经网络的内积</h3><p><img src="../img/机器学习/18.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = np.array([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">W = np.array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line">Y = np.dot(X, W)</span><br><span class="line"><span class="built_in">print</span>(Y)</span><br><span class="line"><span class="comment"># [ 5 11 17]</span></span><br></pre></td></tr></table></figure><h2 id="3层神经网络的实现"><a href="#3层神经网络的实现" class="headerlink" title="3层神经网络的实现"></a><strong>3层神经网络的实现</strong></h2><p><img src="../img/机器学习/19.png" alt="image.png"></p><p>符号：</p><p><img src="../img/机器学习/20.png" alt="image.png"></p><ul><li>右上角表示权重和神经元的层号（从输入层开始）</li><li>右下角前面对应后一层的神经元</li><li>右下角后面对应前一层的神经元</li></ul><p><strong>各层间信号传递的实现</strong></p><p><img src="../img/机器学习/21.png" alt="image.png"></p><ul><li>灰色的为表示偏置的神经元（右下角的神经元只有一个）</li></ul><p><strong>公式表达为</strong></p><script type="math/tex; mode=display">a_1^{(1)}=w_{11}^{(1)}x_1+w_{12}^{(1)}x_2+b_1^{(1)}</script><p><strong>矩阵乘法运算公式为</strong></p><script type="math/tex; mode=display">A^{(1)}=XW^{(1)}+B^{(1)}</script><p>其中，$A^(1)、X、B^(1)、W^(1)$如下所示</p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtable displaystyle="true" columnalign="right left right left right left right left right left right left" columnspacing="0em 2em 0em 2em 0em 2em 0em 2em 0em 2em 0em" rowspacing="3pt"><mtr><mtd><msup><mi mathvariant="bold-italic">A</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mtd><mtd><mi></mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msubsup><mi>a</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>a</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>a</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow><mo>,</mo><mi mathvariant="bold-italic">X</mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msub><mi>x</mi><mn>1</mn></msub></mtd><mtd><msub><mi>x</mi><mn>2</mn></msub></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow><mo>,</mo><msup><mi mathvariant="bold-italic">B</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msubsup><mi>b</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>b</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>b</mi><mn>3</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow></mtd></mtr><mtr><mtd><msup><mi mathvariant="bold-italic">W</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mtd><mtd><mi></mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">(</mo><mtable columnalign="center" columnspacing="1em" rowspacing="4pt"><mtr><mtd><msubsup><mi>w</mi><mrow><mn>11</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>21</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>31</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr><mtr><mtd><msubsup><mi>w</mi><mrow><mn>12</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>22</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd><mtd><msubsup><mi>w</mi><mrow><mn>32</mn></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE">)</mo></mrow></mtd></mtr></mtable></math><h3 id="具体代码和流程"><a href="#具体代码和流程" class="headerlink" title="具体代码和流程"></a>具体代码和流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.array([<span class="number">1.0</span>, <span class="number">0.5</span>])</span><br><span class="line">W1 = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>]])</span><br><span class="line">B1 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">A1 = np.dot(X, W1) + B1</span><br><span class="line">Z1 = sigmoid(A1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A1) <span class="comment"># [0.3 0.7 1.1]</span></span><br><span class="line"><span class="built_in">print</span>(Z1) <span class="comment"># [0.57444252 0.66818777 0.75026011]</span></span><br></pre></td></tr></table></figure><p><img src="../img/机器学习/22.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">W2 = np.array([[<span class="number">0.1</span>, <span class="number">0.4</span>], [<span class="number">0.2</span>, <span class="number">0.5</span>], [<span class="number">0.3</span>, <span class="number">0.6</span>]])</span><br><span class="line">B2 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line"><span class="built_in">print</span>(Z1.shape) <span class="comment"># (3,)</span></span><br><span class="line"><span class="built_in">print</span>(W2.shape) <span class="comment"># (3, 2)</span></span><br><span class="line"><span class="built_in">print</span>(B2.shape) <span class="comment"># (2,)</span></span><br><span class="line">A2 = np.dot(Z1, W2) + B2</span><br><span class="line">Z2 = sigmoid(A2)</span><br></pre></td></tr></table></figure><p><img src="../img/机器学习/23.png" alt="image.png"></p><blockquote><p>从第2层到输出层的信号传递的<strong>激活函数</strong>，一般地，回归问题可以使用恒等函数，二元分类问题可以使用sigmoid函数，多元分类问题可以使用softmax函数</p></blockquote><font color=orange>**代码总结**</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_network</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;数据导入&#x27;&#x27;&#x27;</span></span><br><span class="line">    network = &#123;&#125;</span><br><span class="line">    network[<span class="string">&#x27;W1&#x27;</span>] = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">&#x27;b1&#x27;</span>] = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line">    network[<span class="string">&#x27;W2&#x27;</span>] = np.array([[<span class="number">0.1</span>, <span class="number">0.4</span>], [<span class="number">0.2</span>, <span class="number">0.5</span>], [<span class="number">0.3</span>, <span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">&#x27;b2&#x27;</span>] = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line">    network[<span class="string">&#x27;W3&#x27;</span>] = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>]])</span><br><span class="line">    network[<span class="string">&#x27;b3&#x27;</span>] = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">network, x</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;神经网络计算&#x27;&#x27;&#x27;</span></span><br><span class="line">    W1, W2, W3 = network[<span class="string">&#x27;W1&#x27;</span>], network[<span class="string">&#x27;W2&#x27;</span>], network[<span class="string">&#x27;W3&#x27;</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">&#x27;b1&#x27;</span>], network[<span class="string">&#x27;b2&#x27;</span>], network[<span class="string">&#x27;b3&#x27;</span>]</span><br><span class="line">    a1 = np.dot(x, W1) + b1</span><br><span class="line">    z1 = sigmoid(a1)</span><br><span class="line">    a2 = np.dot(z1, W2) + b2</span><br><span class="line">    z2 = sigmoid(a2)</span><br><span class="line">    a3 = np.dot(z2, W3) + b3</span><br><span class="line">    y = identity_function(a3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identity_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;恒等函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;sigmoid函数&#x27;&#x27;&#x27;</span></span><br><span class="line">    e = <span class="number">2.718281828459045</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-n))</span><br><span class="line">    </span><br><span class="line">network = init_network()</span><br><span class="line">x = np.array([<span class="number">1.0</span>, <span class="number">0.5</span>])</span><br><span class="line">y = forward(network, x)</span><br><span class="line"><span class="built_in">print</span>(y) <span class="comment"># [ 0.31682708  0.69627909]</span></span><br></pre></td></tr></table></figure><h2 id="输出层的设计"><a href="#输出层的设计" class="headerlink" title="输出层的设计"></a>输出层的设计</h2><p>一般而言，回归问题用<strong>恒等函数</strong>，分类问题用<strong>softmax函数</strong></p><ul><li>分类问题是数据属于哪一个类别的问题</li><li>回归问题是根据某个输入预测一个（连续的）数值的问题</li></ul><h3 id="softmax函数"><a href="#softmax函数" class="headerlink" title="softmax函数"></a>softmax函数</h3><p><strong>softmax函数数学公式</strong></p><script type="math/tex; mode=display">y_k=\frac{\exp(a_k)}{\sum_{i=1}^n\exp(a_i)}</script><p>softmax函数的实现中要进行指数函数的运算，但是此时指数函数的值很容易变得非常大</p><p><strong>softmax函数数学公式改进</strong></p><script type="math/tex; mode=display">\begin{aligned}y_k=\frac{\exp(a_k)}{\sum_{i=1}^n\exp(a_i)} & =\frac{\mathrm{C}\exp(a_k)}{\mathrm{C}\sum_{i=1}^n\exp(a_i)} \\& =\frac{\exp(a_k+\log\mathrm{C})}{\sum_{i=1}^n\exp(a_i+\log\mathrm{C})} \\& =\frac{\exp(a_k+\mathrm{C}^{\prime})}{\sum_{i=1}^n\exp(a_i+\mathrm{C}^{\prime})}\end{aligned}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">a</span>):</span><br><span class="line">c = np.<span class="built_in">max</span>()</span><br><span class="line">exp_a = np.exp(a - c)</span><br><span class="line">sum_exp_a = np.<span class="built_in">sum</span>(exp_a)</span><br><span class="line">  y = exp_a / sum_exp_a</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p><strong>softmax函数特征</strong></p><ul><li>softmax函数的输出是0.0到1.0之间的实数</li><li>softmax函数的输出值的总和是1</li><li>可以把softmax函数的输出解释为“概率”</li></ul><p><strong>输出层的神经元数量需要根据待解决的问题来决定</strong></p><h2 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h2><blockquote><p><code>import sys,ossys.path.append(os.pardir)</code><br>sys.path.append(os.pardir)语句实际上是把父目录加入到sys.path（Python的搜索模块的路径集）中，从而可以导入父目录下的任何目录中的任何文件</p><p>Python有<code>pickle</code>这个便利的功能。这个功能可以将程序运行中的对象保存为文件。如果加载保存过的pickle文件，可以立刻复原之前程序运行中的对象</p></blockquote><h3 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># import sys, os</span></span><br><span class="line"><span class="comment"># sys.path.append(os.pardir)  # 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">img_show</span>(<span class="params">img</span>):</span><br><span class="line">    pil_img = Image.fromarray(np.uint8(img))</span><br><span class="line">    pil_img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line">(x_train, t_train), (x_test, t_test) = load_mnist(flatten=<span class="literal">True</span>, normalize=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 0~59999 共 60000 张训练图像</span></span><br><span class="line">img = x_train[<span class="number">59999</span>]</span><br><span class="line">label = t_train[<span class="number">59999</span>]</span><br><span class="line"><span class="built_in">print</span>(label)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flatten=True 使得输入的图像是一维的数组，所以需要把它变回 28 x 28 的图像</span></span><br><span class="line"><span class="built_in">print</span>(img.shape)  <span class="comment"># (784,) 即 784的一维数组</span></span><br><span class="line">img = img.reshape(<span class="number">28</span>, <span class="number">28</span>)  <span class="comment"># 把图像的形状变为原来的尺寸 28 x 28 的二维数组</span></span><br><span class="line"><span class="built_in">print</span>(img.shape)  <span class="comment"># (28, 28)</span></span><br><span class="line"></span><br><span class="line">img_show(img)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">&#x27;You should use Python 3.x&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">url_base = <span class="string">&#x27;https://ossci-datasets.s3.amazonaws.com/mnist/&#x27;</span>  <span class="comment"># mirror site</span></span><br><span class="line">key_file = &#123;</span><br><span class="line">    <span class="string">&#x27;train_img&#x27;</span>:<span class="string">&#x27;train-images-idx3-ubyte.gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;train_label&#x27;</span>:<span class="string">&#x27;train-labels-idx1-ubyte.gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;test_img&#x27;</span>:<span class="string">&#x27;t10k-images-idx3-ubyte.gz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;test_label&#x27;</span>:<span class="string">&#x27;t10k-labels-idx1-ubyte.gz&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">save_file = dataset_dir + <span class="string">&quot;/mnist.pkl&quot;</span></span><br><span class="line"></span><br><span class="line">train_num = <span class="number">60000</span></span><br><span class="line">test_num = <span class="number">10000</span></span><br><span class="line">img_dim = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">img_size = <span class="number">784</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_download</span>(<span class="params">file_name</span>):</span><br><span class="line">    file_path = dataset_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Downloading &quot;</span> + file_name + <span class="string">&quot; ... &quot;</span>)</span><br><span class="line">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_mnist</span>():</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> key_file.values():</span><br><span class="line">       _download(v)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_load_label</span>(<span class="params">file_name</span>):</span><br><span class="line">    file_path = dataset_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Converting &quot;</span> + file_name + <span class="string">&quot; to NumPy Array ...&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> gzip.<span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_load_img</span>(<span class="params">file_name</span>):</span><br><span class="line">    file_path = dataset_dir + <span class="string">&quot;/&quot;</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Converting &quot;</span> + file_name + <span class="string">&quot; to NumPy Array ...&quot;</span>)    </span><br><span class="line">    <span class="keyword">with</span> gzip.<span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = np.frombuffer(f.read(), np.uint8, offset=<span class="number">16</span>)</span><br><span class="line">    data = data.reshape(-<span class="number">1</span>, img_size)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_convert_numpy</span>():</span><br><span class="line">    dataset = &#123;&#125;</span><br><span class="line">    dataset[<span class="string">&#x27;train_img&#x27;</span>] =  _load_img(key_file[<span class="string">&#x27;train_img&#x27;</span>])</span><br><span class="line">    dataset[<span class="string">&#x27;train_label&#x27;</span>] = _load_label(key_file[<span class="string">&#x27;train_label&#x27;</span>])    </span><br><span class="line">    dataset[<span class="string">&#x27;test_img&#x27;</span>] = _load_img(key_file[<span class="string">&#x27;test_img&#x27;</span>])</span><br><span class="line">    dataset[<span class="string">&#x27;test_label&#x27;</span>] = _load_label(key_file[<span class="string">&#x27;test_label&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_mnist</span>():</span><br><span class="line">    download_mnist()</span><br><span class="line">    dataset = _convert_numpy()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Creating pickle file ...&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(dataset, f, -<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_change_one_hot_label</span>(<span class="params">X</span>):</span><br><span class="line">    T = np.zeros((X.size, <span class="number">10</span>))</span><br><span class="line">    <span class="keyword">for</span> idx, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(T):</span><br><span class="line">        row[X[idx]] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_mnist</span>(<span class="params">normalize=<span class="literal">True</span>, flatten=<span class="literal">True</span>, one_hot_label=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;读入MNIST数据集</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class="line"><span class="string">    one_hot_label : </span></span><br><span class="line"><span class="string">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class="line"><span class="string">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class="line"><span class="string">    flatten : 是否将图像展开为一维数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_file):</span><br><span class="line">        init_mnist()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(save_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">&#x27;train_img&#x27;</span>, <span class="string">&#x27;test_img&#x27;</span>):</span><br><span class="line">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class="line">            dataset[key] /= <span class="number">255.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> one_hot_label:</span><br><span class="line">        dataset[<span class="string">&#x27;train_label&#x27;</span>] = _change_one_hot_label(dataset[<span class="string">&#x27;train_label&#x27;</span>])</span><br><span class="line">        dataset[<span class="string">&#x27;test_label&#x27;</span>] = _change_one_hot_label(dataset[<span class="string">&#x27;test_label&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flatten:</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">&#x27;train_img&#x27;</span>, <span class="string">&#x27;test_img&#x27;</span>):</span><br><span class="line">            dataset[key] = dataset[key].reshape(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dataset[<span class="string">&#x27;train_img&#x27;</span>], dataset[<span class="string">&#x27;train_label&#x27;</span>]), (dataset[<span class="string">&#x27;test_img&#x27;</span>], dataset[<span class="string">&#x27;test_label&#x27;</span>]) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    init_mnist()</span><br></pre></td></tr></table></figure><h3 id="神经网络的推理处理"><a href="#神经网络的推理处理" class="headerlink" title="神经网络的推理处理"></a>神经网络的推理处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> common.functions <span class="keyword">import</span> sigmoid, softmax</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    (x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="literal">True</span>, flatten=<span class="literal">True</span>, one_hot_label=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> x_test, t_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_network</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sample_weight.pkl&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 使用 pickle 模块加载存储在文件中的网络参数（第一到第三层的权重和偏置）</span></span><br><span class="line">        network = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">network, x</span>):</span><br><span class="line">    W1, W2, W3 = network[<span class="string">&#x27;W1&#x27;</span>], network[<span class="string">&#x27;W2&#x27;</span>], network[<span class="string">&#x27;W3&#x27;</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">&#x27;b1&#x27;</span>], network[<span class="string">&#x27;b2&#x27;</span>], network[<span class="string">&#x27;b3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    a1 = np.dot(x, W1) + b1</span><br><span class="line">    z1 = sigmoid(a1)</span><br><span class="line">    a2 = np.dot(z1, W2) + b2</span><br><span class="line">    z2 = sigmoid(a2)</span><br><span class="line">    a3 = np.dot(z2, W3) + b3</span><br><span class="line">    y = softmax(a3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">x, t = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    y = predict(network, x[i])</span><br><span class="line">    p= np.argmax(y) <span class="comment"># np.argmax(x)函数取出数组中的最大值的索引，获取概率最高的元素的索引</span></span><br><span class="line">    <span class="keyword">if</span> p == t[i]:</span><br><span class="line">        accuracy_cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy:&quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(accuracy_cnt) / <span class="built_in">len</span>(x)))</span><br><span class="line"><span class="comment"># Accuracy:0.9352</span></span><br></pre></td></tr></table></figure><ul><li><code>np.argmax(x)</code>函数取出数组中的最大值的索引</li><li><strong>正规化</strong> 把数据限定到某个范围内的处理，最常规是0~1</li><li><strong>预处理</strong> 对神经网络的输入数据进行某种既定的转换，比如正规化</li></ul><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><ul><li><strong>批</strong> 打包式的输入数据</li><li>批处理一次性计算大型数组要比分开逐步计算各个小型数组速度更快</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">100</span> <span class="comment"># 批数量</span></span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), batch_size):</span><br><span class="line">    x_batch = x[i:i+batch_size]</span><br><span class="line">    y_batch = predict(network, x_batch)</span><br><span class="line">    p = np.argmax(y_batch, axis=<span class="number">1</span>)</span><br><span class="line">    accuracy_cnt += np.<span class="built_in">sum</span>(p == t[i:i+batch_size])</span><br></pre></td></tr></table></figure><p><strong>代码解释</strong></p><ul><li><code>range(start, end, step)</code> 生成的列表中的下一个元素会增加step指定的值</li><li><code>x[i:i+batch_size]</code> 切片抽取批数据</li><li><code>np.argmax(y_batch, axis=1)</code> 沿着第1维方向找到值最大的元素的索引</li></ul><blockquote><p><strong>矩阵的第0维是列方向，第1维是行方向</strong></p><p>对于数组或列表的比较，例如 <code>array1 == array2</code>，会返回一个布尔数组</p></blockquote>]]></content>
    
    
    <summary type="html">深度学习</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://agoni66.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://agoni66.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>感知机</title>
    <link href="https://agoni66.github.io/posts/1000141.html"/>
    <id>https://agoni66.github.io/posts/1000141.html</id>
    <published>2024-11-29T10:30:00.000Z</published>
    <updated>2024-12-02T14:47:45.064Z</updated>
    
    <content type="html"><![CDATA[<div class="note purple no-icon flat"><p><font size="4"><b>深度学习入门导航🚀🚀🚀</b></font></p><ol><li><p>🎉<a href="https://agoni66.github.io/posts/1000141.html">感知机</a> ⇦ 当前位置🪂</p></li><li><p>🎈<a href="https://agoni66.github.io/posts/1000142.html">神经网络</a></p></li><li><p>🧨<a href="https://agoni66.github.io/posts/1000143.html">神经网络的学习</a></p></li><li><p>🎊<a href="https://agoni66.github.io/posts/1000144.html">误差反向传播法</a></p></li><li><p>🧧<a href="https://agoni66.github.io/posts/1000145.html">与学习相关的技巧</a></p></li><li><p>🎑<a href="https://agoni66.github.io/posts/1000146.html">卷积神经网络</a></p></li><li><p>🌈<a href="https://agoni66.github.io/posts/1000147.html">深度学习</a></p></li></ol></div><blockquote><p>感知机(perceptron)是由美国学者Frank Rosenblatt在1957年提出来的</p></blockquote><p><strong>感知机接收多个输入信号，输出一个信号</strong></p><p><strong>感知机的信号只有“流/不流”( 1/0)两种取值</strong></p><h3 id="感知机是什么"><a href="#感知机是什么" class="headerlink" title="感知机是什么"></a>感知机是什么</h3><p><img src="../img/机器学习/1.png" alt="image.png"></p><ul><li>$x_1、x_2$ 输入信号</li><li>$y$ 输出信号</li><li>$w_1、w_2$ 权重</li><li>图中的圆圈○ 神经元|节点</li><li>输入信号被送往神经元时，会被分别乘以固定的权重（$w_1x_1、w_2x_2$）</li><li>神经元被激活 神经元会计算传送过来的信号的总和，只有当这个总和超过了<strong>某个界限值</strong>时，才会输出1</li><li>阈值$θ$ 这个界限值</li></ul><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN" fence="true" stretchy="true" symmetric="true"></mo><mi>y</mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing=".2em"><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>⩽</mo><mi>θ</mi><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>&gt;</mo><mi>θ</mi><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math><h2 id="简单逻辑电路"><a href="#简单逻辑电路" class="headerlink" title="简单逻辑电路"></a>简单逻辑电路</h2><h3 id="与门"><a href="#与门" class="headerlink" title="与门"></a>与门</h3><p><img src="../img/机器学习/2.png" alt="image.png"></p><p>满足与门（同时为1，信号的加权总和才会超过阈值$θ$）的参数例子：</p><ul><li>$(w_1,w_2, θ) = (0.5, 0.5, 0.7)$</li><li>$(w_1,w_2, θ) = (0.5, 0.5, 0.8)$</li><li>$(w_1,w_2, θ) = (1.0, 1.0, 1.0)$</li></ul><h3 id="与非门"><a href="#与非门" class="headerlink" title="与非门"></a>与非门</h3><p><img src="../img/机器学习/3.png" alt="image.png"></p><p>满足与非门（不同时为零，信号的加权总和就会超过阈值$θ$）的参数例子：$(w_1,w_2, θ) = (-0.5, -0.5, -0.7)$</p><blockquote><p>只要把实现与门的参数值的符号取反，就可以实现与非门</p></blockquote><h3 id="或门"><a href="#或门" class="headerlink" title="或门"></a>或门</h3><p><img src="../img/机器学习/4.png" alt="image.png"></p><p>满足或门（只要有一个 1 ，信号的加权总和就会超过阈值$θ$）的参数例子：$(w_1,w_2, θ) = (0.5, 0.5, 0.3)$</p><h2 id="感知机的实现"><a href="#感知机的实现" class="headerlink" title="感知机的实现"></a>感知机的实现</h2><h3 id="简单实现与门"><a href="#简单实现与门" class="headerlink" title="简单实现与门"></a>简单实现与门</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AND</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    w1, w2, theta = <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.7</span></span><br><span class="line">    tmp = x1*w1 + x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> tmp &gt; theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">AND(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 输出0</span></span><br><span class="line">AND(<span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 输出0</span></span><br><span class="line">AND(<span class="number">0</span>, <span class="number">1</span>) <span class="comment"># 输出0</span></span><br><span class="line">AND(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 输出1</span></span><br></pre></td></tr></table></figure><h3 id="导入权重和偏置"><a href="#导入权重和偏置" class="headerlink" title="导入权重和偏置"></a>导入权重和偏置</h3><p><img src="../img/机器学习/5.png" alt="image.png"></p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN" fence="true" stretchy="true" symmetric="true"></mo><mi>y</mi><mo>=</mo><mrow data-mjx-texclass="INNER"><mo data-mjx-texclass="OPEN">{</mo><mtable columnalign="left left" columnspacing="1em" rowspacing="0.83em 0.4em"><mtr><mtd><mn>0</mn></mtd><mtd><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>⩽</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr><mtr><mtd><mn>1</mn></mtd><mtd><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mtd></mtr></mtable><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow><mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo></mrow></math><ul><li>偏置的输入信号一直是1，为了区别会涂成<strong>灰色</strong></li><li>$θ$换成$−b$</li><li><strong>权重</strong> $w_1、w_2$</li><li><strong>偏置</strong> $b$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AND</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;与门实现&quot;&quot;&quot;</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = -<span class="number">0.7</span></span><br><span class="line">    tmp = np.<span class="built_in">sum</span>(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">NAND</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;与非门实现&quot;&quot;&quot;</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([-<span class="number">0.5</span>, -<span class="number">0.5</span>])</span><br><span class="line">    b = <span class="number">0.7</span></span><br><span class="line">    tmp = np.<span class="built_in">sum</span>(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">OR</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;或门实现&quot;&quot;&quot;</span></span><br><span class="line">    x = np.array([x1, x2])</span><br><span class="line">    w = np.array([<span class="number">0.5</span>, <span class="number">0.5</span>])</span><br><span class="line">    b = -<span class="number">0.2</span></span><br><span class="line">    tmp = np.<span class="built_in">sum</span>(w*x) + b</span><br><span class="line">    <span class="keyword">if</span> tmp &lt;= <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="感知机的局限性"><a href="#感知机的局限性" class="headerlink" title="感知机的局限性"></a>感知机的局限性</h2><h3 id="异或门"><a href="#异或门" class="headerlink" title="异或门"></a>异或门</h3><p><img src="../img/机器学习/6.png" alt="image.png"></p><p><img src="../img/机器学习/7.png" alt="image.png"></p><p>事实上，用一条直线是无法将○和△分开的</p><p><strong>单层感知机的局限性就在于它只能表示由一条直线分割的空间</strong></p><h3 id="线性和非线性"><a href="#线性和非线性" class="headerlink" title="线性和非线性"></a>线性和非线性</h3><ul><li>线性空间 由直线分割而成的空间</li><li>非线性空间 由曲线分割而成的空间</li></ul><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><h3 id="已有门电路的组合"><a href="#已有门电路的组合" class="headerlink" title="已有门电路的组合"></a>已有门电路的组合</h3><p><img src="../img/机器学习/8.png" alt="image.png"></p><p><img src="../img/机器学习/9.png" alt="image.png"></p><h3 id="异或门的实现"><a href="#异或门的实现" class="headerlink" title="异或门的实现"></a>异或门的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">XOR</span>(<span class="params">x1, x2</span>):</span><br><span class="line">s1 = NAND(x1, x2)</span><br><span class="line">  s2 = OR(x1, x2)</span><br><span class="line">  y = AND(s1, s2)</span><br><span class="line">  <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">XOR(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 输出0</span></span><br><span class="line">XOR(<span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 输出1</span></span><br><span class="line">XOR(<span class="number">0</span>, <span class="number">1</span>) <span class="comment"># 输出1</span></span><br><span class="line">XOR(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># 输出0</span></span><br></pre></td></tr></table></figure><p><img src="../img/机器学习/10.png" alt="image.png"></p><blockquote><p>拥有权重的层实质只有2层，称为 <strong>2层感知机</strong> ；其他也又文献称 <strong>3层感知机</strong></p></blockquote>]]></content>
    
    
    <summary type="html">深度学习</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://agoni66.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://agoni66.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>简单python100题</title>
    <link href="https://agoni66.github.io/posts/1000120.html"/>
    <id>https://agoni66.github.io/posts/1000120.html</id>
    <published>2024-11-26T14:00:00.000Z</published>
    <updated>2024-11-27T13:15:38.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-两数求和"><a href="#1-两数求和" class="headerlink" title="1.两数求和"></a>1.两数求和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个数字：&quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个数字：&quot;</span>))</span><br><span class="line"><span class="built_in">sum</span> = num1 + num2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两数之和为：&quot;</span>, <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="2-找出100以内偶数"><a href="#2-找出100以内偶数" class="headerlink" title="2.找出100以内偶数"></a>2.找出100以内偶数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">0</span>: <span class="comment"># if i is even</span></span><br><span class="line">        <span class="built_in">list</span>.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="3-找出100以内奇数并打印"><a href="#3-找出100以内奇数并打印" class="headerlink" title="3.找出100以内奇数并打印"></a>3.找出100以内奇数并打印</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> == <span class="number">1</span>: <span class="comment"># if i is odd</span></span><br><span class="line">        <span class="built_in">list</span>.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="4-判断素数"><a href="#4-判断素数" class="headerlink" title="4.判断素数"></a>4.判断素数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">flag = <span class="literal">True</span> <span class="comment"># flag variable to check if the number is prime or not, initially set to True and is prime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">    <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;is a prime number&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;is a composite  number&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-求阶乘"><a href="#5-求阶乘" class="headerlink" title="5.求阶乘"></a>5.求阶乘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import math</span></span><br><span class="line"><span class="comment"># num = int(input(&quot;请输入一个正整数：&quot;))</span></span><br><span class="line"><span class="comment"># print(f&quot;阶乘为：&#123;math.factorial(num)&#125;&quot;)</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个正整数：&quot;</span>))</span><br><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">    result *= i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>的阶乘为：<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="6-求圆的周长"><a href="#6-求圆的周长" class="headerlink" title="6.求圆的周长"></a>6.求圆的周长</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the radius of the circle: &quot;</span>))</span><br><span class="line">circumference = <span class="number">2</span> * <span class="number">3.14</span> * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The circumference of the circle is <span class="subst">&#123;circumference:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="7-求圆的面积"><a href="#7-求圆的面积" class="headerlink" title="7.求圆的面积"></a>7.求圆的面积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">radius = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the radius of the circle: &quot;</span>))</span><br><span class="line">area = <span class="number">3.14</span> * radius * radius</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The area of the circle is:&quot;</span>, area)</span><br></pre></td></tr></table></figure><h3 id="8-求直角三角形斜边长"><a href="#8-求直角三角形斜边长" class="headerlink" title="8.求直角三角形斜边长"></a>8.求直角三角形斜边长</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first side: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second side: &quot;</span>))</span><br><span class="line">c  = math.sqrt(a**<span class="number">2</span> + b**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The length of the third side is:&quot;</span>, c)</span><br></pre></td></tr></table></figure><h3 id="9-比较三个数大小"><a href="#9-比较三个数大小" class="headerlink" title="9.比较三个数大小"></a>9.比较三个数大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first number: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second number: &quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the third number: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [a, b, c]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;从小到大排序为:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="10-找出区间内的素数"><a href="#10-找出区间内的素数" class="headerlink" title="10.找出区间内的素数"></a>10.找出区间内的素数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the lower limit: &quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the upper limit: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(num1, num2+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> is_prime(num):</span><br><span class="line">        <span class="built_in">list</span>.append(num)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The prime numbers in the given range are: <span class="subst">&#123;<span class="built_in">list</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="11-组合数字"><a href="#11-组合数字" class="headerlink" title="11.组合数字"></a>11.组合数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有四个数字1 2 3 4 我们可以组成多少个不同且不重复的三位数？</span></span><br><span class="line">num = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> i!= j <span class="keyword">and</span> i!= k <span class="keyword">and</span> j!= k:</span><br><span class="line">                <span class="built_in">print</span>(i*<span class="number">100</span>+j*<span class="number">10</span>+k)</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;共有&quot;</span>, num, <span class="string">&quot;种不同且不重复的三位数&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="12-打印乘法口诀表"><a href="#12-打印乘法口诀表" class="headerlink" title="12.打印乘法口诀表"></a>12.打印乘法口诀表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="13-水仙花数"><a href="#13-水仙花数" class="headerlink" title="13.水仙花数"></a>13.水仙花数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">list</span> = [<span class="built_in">int</span>(j)**<span class="number">3</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>(i)]</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">sum</span>(<span class="built_in">list</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="14-反向输出四位数"><a href="#14-反向输出四位数" class="headerlink" title="14.反向输出四位数"></a>14.反向输出四位数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入四位数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">str</span>(a)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>的反向输出为：<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="15-判断字母"><a href="#15-判断字母" class="headerlink" title="15.判断字母"></a>15.判断字母</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">all_letters = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&quot;Enter a letter: &quot;</span>).isalpha():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The letter is a valid letter.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The letter is not a valid letter.&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="16-判断三角形"><a href="#16-判断三角形" class="headerlink" title="16.判断三角形"></a>16.判断三角形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first side: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second side: &quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the third side: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a&lt;=<span class="number">0</span> <span class="keyword">or</span> b&lt;=<span class="number">0</span> <span class="keyword">or</span> c&lt;=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入数据不合法&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三角形是合理的&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三角形是不合理的&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="17-完数"><a href="#17-完数" class="headerlink" title="17.完数"></a>17.完数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个数恰好等于除了它的所有因子的和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorization</span>(<span class="params">n</span>):</span><br><span class="line">    factors = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            factors.append(i)</span><br><span class="line">    <span class="keyword">return</span> factors</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">sum</span>(factorization(i)):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="18-找质数因子"><a href="#18-找质数因子" class="headerlink" title="18.找质数因子"></a>18.找质数因子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 质数只能被 1 和它自己整除</span></span><br><span class="line"><span class="comment"># 因此在遍历过程中，一旦找到能整除的数</span></span><br><span class="line"><span class="comment"># 就将其视为质数因子并继续减少 a 的值</span></span><br><span class="line"><span class="comment"># 直到 a 最终被完全分解为质数因子</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">y = <span class="number">2</span> </span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> a != y:</span><br><span class="line">    <span class="keyword">if</span> a % y == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(y)</span><br><span class="line">        a = a / y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line"><span class="built_in">list</span>.append(<span class="built_in">int</span>(a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="19-海伦公式求三角形面积"><a href="#19-海伦公式求三角形面积" class="headerlink" title="19.海伦公式求三角形面积"></a>19.海伦公式求三角形面积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first side: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second side: &quot;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the third side: &quot;</span>))</span><br><span class="line"></span><br><span class="line">p = (a + b + c) / <span class="number">2</span></span><br><span class="line">s = math.sqrt(p * (p - a) * (p - b) * (p - c))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The area of the triangle is:<span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="20-判断某年某天"><a href="#20-判断某年某天" class="headerlink" title="20.判断某年某天"></a>20.判断某年某天</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">year, month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;请输入年月日：&quot;</span>).split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">yuandan = datetime.date(year, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">now = datetime.date(year, month, day)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((now - yuandan).days)</span><br></pre></td></tr></table></figure><h3 id="21-斐波那契数列"><a href="#21-斐波那契数列" class="headerlink" title="21.斐波那契数列"></a>21.斐波那契数列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the number of terms: &quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(fibonacci(i),end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="22-复制列表"><a href="#22-复制列表" class="headerlink" title="22.复制列表"></a>22.复制列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line"><span class="keyword">import</span>  copy</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list_copy = copy.copy(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(list_copy)</span><br><span class="line"><span class="comment"># [5, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="23-暂停后输出"><a href="#23-暂停后输出" class="headerlink" title="23.暂停后输出"></a>23.暂停后输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="24-成绩if语句"><a href="#24-成绩if语句" class="headerlink" title="24.成绩if语句"></a>24.成绩if语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please give me your score:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="25-统计字符"><a href="#25-统计字符" class="headerlink" title="25.统计字符"></a>25.统计字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"></span><br><span class="line">char = <span class="number">0</span></span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">space = <span class="number">0</span></span><br><span class="line">other = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha():</span><br><span class="line">        char += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isdigit():</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isspace():</span><br><span class="line">        space += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;字母有<span class="subst">&#123;char&#125;</span>个，数字有<span class="subst">&#123;number&#125;</span>个，空格有<span class="subst">&#123;space&#125;</span>个，其他字符有<span class="subst">&#123;other&#125;</span>个。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="26-落体反弹问题"><a href="#26-落体反弹问题" class="headerlink" title="26.落体反弹问题"></a>26.落体反弹问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一球从100米高度自由落下，每次落地后反跳回原高度的一半</span></span><br><span class="line"><span class="comment"># 再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</span></span><br><span class="line">height = <span class="number">100</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(height)</span><br><span class="line">        height = height / <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">list</span>.append(<span class="number">2</span> * height)</span><br><span class="line">        height = height / <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;共经过&quot;</span>, <span class="built_in">sum</span>(<span class="built_in">list</span>), <span class="string">&quot;米&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第10次反弹多高&quot;</span>, height)</span><br></pre></td></tr></table></figure><h3 id="27-猴子吃桃问题"><a href="#27-猴子吃桃问题" class="headerlink" title="27.猴子吃桃问题"></a>27.猴子吃桃问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个</span></span><br><span class="line"><span class="comment"># 第二天早上又将剩下的桃子吃掉一半，又多吃了一个</span></span><br><span class="line"><span class="comment"># 以后每天早上都吃了前一天剩下的一半零一个</span></span><br><span class="line"><span class="comment"># 到第10天早上想再吃时，见只剩下一个桃子了</span></span><br><span class="line"><span class="comment"># 求第一天共摘了多少。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peach</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (peach(n+<span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i&#125;</span>天摘了<span class="subst">&#123;peach(i)&#125;</span>个桃子&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="28-求指定数列的和"><a href="#28-求指定数列的和" class="headerlink" title="28.求指定数列的和"></a>28.求指定数列的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2/1 + 3/2 + 5/3 + 8/5 + 13/8 + 21/13 + 34/21 + 55/34 + 89/55 + 144/89 + 233/144 + 377/233 + 610/377 + ···</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">up = <span class="number">2</span></span><br><span class="line">down = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">sum</span> += up / down</span><br><span class="line">    a = down</span><br><span class="line">    down = up</span><br><span class="line">    up += a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">sum</span>:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="29-求各个阶乘的和"><a href="#29-求各个阶乘的和" class="headerlink" title="29.求各个阶乘的和"></a>29.求各个阶乘的和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span> + <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span> += math.factorial(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1+2！+3！+...+20！=<span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="30-年龄急转弯"><a href="#30-年龄急转弯" class="headerlink" title="30.年龄急转弯"></a>30.年龄急转弯</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁</span></span><br><span class="line"><span class="comment"># 问第4个人岁数，他说比第3个人大2岁</span></span><br><span class="line"><span class="comment"># 问第三个人，又说比第2人大两岁</span></span><br><span class="line"><span class="comment"># 问第2个人，说比第一个人大两岁</span></span><br><span class="line"><span class="comment"># 最后问第一个人，他说是10岁。请问第五个人多大？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">age_turn_around</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> age_turn_around(n-<span class="number">1</span>) + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第五个人的年龄是<span class="subst">&#123;age_turn_around(<span class="number">5</span>)&#125;</span>岁。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="31-判断回文数"><a href="#31-判断回文数" class="headerlink" title="31.判断回文数"></a>31.判断回文数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>(num) == <span class="built_in">str</span>(num)[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;是回文数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;不是回文数&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="32-判断星期几"><a href="#32-判断星期几" class="headerlink" title="32.判断星期几"></a>32.判断星期几</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入星期几的英文&quot;</span>).lower()</span><br><span class="line"><span class="keyword">if</span> a[<span class="number">0</span>] == <span class="string">&quot;m&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期一&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> a[<span class="number">1</span>] == <span class="string">&quot;u&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期二&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期四&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;w&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期三&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;f&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期五&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a[<span class="number">0</span>] == <span class="string">&quot;s&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> a[<span class="number">1</span>] == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期六&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;星期日&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的英文日期&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="33-相反顺序输出列表"><a href="#33-相反顺序输出列表" class="headerlink" title="33.相反顺序输出列表"></a>33.相反顺序输出列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># using reversed() func</span></span><br><span class="line"><span class="built_in">list</span>.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># using slicing</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="34-对十个数进行排序"><a href="#34-对十个数进行排序" class="headerlink" title="34.对十个数进行排序"></a>34.对十个数进行排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">list</span>.append(random.randint(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original list:&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sorted list:&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># Original list: [52, 31, 61, 4, 19, 45, 85, 75, 11, 50]</span></span><br><span class="line"><span class="comment"># Sorted list: [4, 11, 19, 31, 45, 50, 52, 61, 75, 85]</span></span><br></pre></td></tr></table></figure><h3 id="35-求矩阵主对角线元素之和"><a href="#35-求矩阵主对角线元素之和" class="headerlink" title="35.求矩阵主对角线元素之和"></a>35.求矩阵主对角线元素之和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + matrix[i][i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The sum of the main diagonal elements of the matrix is: <span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="36-有序列表插入元素"><a href="#36-有序列表插入元素" class="headerlink" title="36.有序列表插入元素"></a>36.有序列表插入元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">list</span> = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original list:&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请给一个数字进行插入：&quot;</span>))</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="built_in">list</span>[i]:</span><br><span class="line">        <span class="built_in">list</span>.insert(i, num)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After insertion:&quot;</span>, <span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h3 id="37-变量值交换"><a href="#37-变量值交换" class="headerlink" title="37.变量值交换"></a>37.变量值交换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the value of a: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the value of b: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Before swapping: a =&quot;</span>, a, <span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line"></span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After swapping: a =&quot;</span>, a, <span class="string">&quot;b =&quot;</span>, b)</span><br><span class="line"><span class="comment"># Enter the value of a: 11</span></span><br><span class="line"><span class="comment"># Enter the value of b: 22</span></span><br><span class="line"><span class="comment"># Before swapping: a = 11 b = 22</span></span><br><span class="line"><span class="comment"># After swapping: a = 22 b = 11</span></span><br></pre></td></tr></table></figure><h3 id="38-产生随机数"><a href="#38-产生随机数" class="headerlink" title="38.产生随机数"></a>38.产生随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = random.random()</span><br><span class="line">b = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">c = random.randrange(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="39-lambda表达式"><a href="#39-lambda表达式" class="headerlink" title="39.lambda表达式"></a>39.lambda表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x,y: x*y</span><br><span class="line"><span class="built_in">print</span>(a(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="40-温度转换"><a href="#40-温度转换" class="headerlink" title="40.温度转换"></a>40.温度转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temperature = <span class="built_in">input</span>(<span class="string">&quot;请输入温度（单位是C或者F）：&quot;</span>).upper()</span><br><span class="line">temperature_number = <span class="built_in">float</span>(temperature[:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> temperature[-<span class="number">1</span>] == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">    fahrenheit = (temperature_number * <span class="number">9</span>/<span class="number">5</span>) + <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;此温度转换为华氏度是<span class="subst">&#123;fahrenheit&#125;</span>F&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> temperature[-<span class="number">1</span>] == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">    centigrade = (temperature_number - <span class="number">32</span>) * <span class="number">5</span>/<span class="number">9</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;此温度转换为摄氏度是<span class="subst">&#123;centigrade&#125;</span>C&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入正确的温度单位&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="41-按位与"><a href="#41-按位与" class="headerlink" title="41.按位与"></a>41.按位与</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 0&amp;0=0 0&amp;1=0 1&amp;0=0 1&amp;1=1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &amp; <span class="number">3</span>) <span class="comment"># 0101 &amp; 0011 = 0001(1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &amp; <span class="number">12</span>) <span class="comment"># 0100 &amp; 1100 = 0100(4)</span></span><br></pre></td></tr></table></figure><h3 id="42-按位或"><a href="#42-按位或" class="headerlink" title="42.按位或"></a>42.按位或</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 0|0=0 0|1=1 1|0=1 1|1=1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> | <span class="number">7</span>) <span class="comment"># 0011 | 0111 = 0111（7）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> | <span class="number">5</span>) <span class="comment"># 1010 | 0101 = 1111（15）</span></span><br></pre></td></tr></table></figure><h3 id="43-按位异或"><a href="#43-按位异或" class="headerlink" title="43.按位异或"></a>43.按位异或</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 0^0=0, 0^1=1, 1^0=1, 1^1=0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> ^ <span class="number">9</span>) <span class="comment"># 0011 ^ 1001 = 1010（10）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> ^ <span class="number">8</span>) <span class="comment"># 0100 ^ 1000 = 1100（12）</span></span><br></pre></td></tr></table></figure><h3 id="44-按位取反"><a href="#44-按位取反" class="headerlink" title="44.按位取反"></a>44.按位取反</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运算规则 ~x = -x - 1</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">9</span>) <span class="comment"># 00001001 -&gt; 11110110</span></span><br><span class="line"><span class="built_in">print</span>(~-<span class="number">3</span>) <span class="comment"># 11110111 -&gt; 00001000</span></span><br></pre></td></tr></table></figure><h3 id="45-计算字符串长度"><a href="#45-计算字符串长度" class="headerlink" title="45.计算字符串长度"></a>45.计算字符串长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="comment"># print(&quot;字符串长度为：&quot;, len(a))</span></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    length += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串长度为：&quot;</span>, length)</span><br></pre></td></tr></table></figure><h3 id="46-杨辉三角"><a href="#46-杨辉三角" class="headerlink" title="46.杨辉三角"></a>46.杨辉三角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_pascals_triangle</span>(<span class="params">n</span>):</span><br><span class="line">    triangle = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        row = [<span class="number">1</span>] * (i + <span class="number">1</span>)  <span class="comment"># 创建一行，先将所有元素都设置为1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):  <span class="comment"># 从第二个元素开始到倒数第二个元素</span></span><br><span class="line">            row[j] = triangle[i - <span class="number">1</span>][j - <span class="number">1</span>] + triangle[i - <span class="number">1</span>][j]  <span class="comment"># 上方两个元素相加</span></span><br><span class="line">        triangle.append(row)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> triangle</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">triangle = generate_pascals_triangle(n)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> triangle:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><h3 id="47-查找字符串"><a href="#47-查找字符串" class="headerlink" title="47.查找字符串"></a>47.查找字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">b = <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(b)) <span class="comment"># 没有找到就返回-1</span></span><br></pre></td></tr></table></figure><h3 id="48-猜数字游戏"><a href="#48-猜数字游戏" class="headerlink" title="48. 猜数字游戏"></a>48. 猜数字游戏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number</span>(<span class="params">num, traget</span>):</span><br><span class="line">    <span class="keyword">if</span> target == num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Congratulations! You guessed the number!&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; target:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The number is smaller than the target.&quot;</span>)</span><br><span class="line">        guess_number(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter a larger number: &quot;</span>)), target)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The number is larger than the target.&quot;</span>)</span><br><span class="line">        guess_number(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter a smaller number: &quot;</span>)), target)</span><br><span class="line"></span><br><span class="line">target = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m thinking of a number between 1 and 100. Can you guess it?&quot;</span>)</span><br><span class="line">guess_number(<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter your guess: &quot;</span>)), target)</span><br></pre></td></tr></table></figure><h3 id="49-第一个只出现一次的字符"><a href="#49-第一个只出现一次的字符" class="headerlink" title="49.第一个只出现一次的字符"></a>49.第一个只出现一次的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello WorldHello World&quot;</span></span><br><span class="line"></span><br><span class="line">mp = <span class="built_in">dict</span>()</span><br><span class="line">count = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> mp:</span><br><span class="line">        mp[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mp[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    <span class="keyword">if</span> mp[<span class="built_in">str</span>[i]] == <span class="number">1</span>:</span><br><span class="line">        count = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> count <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;There is no character that appears only once.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first character that appears only once is:&quot;</span>, <span class="built_in">str</span>[i])</span><br></pre></td></tr></table></figure><h3 id="50-最大公因数"><a href="#50-最大公因数" class="headerlink" title="50.最大公因数"></a>50.最大公因数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the first number: &quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the second number: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The greatest common divisor of <span class="subst">&#123;a&#125;</span> and <span class="subst">&#123;b&#125;</span> is:&quot;</span>, math.gcd(a, b))</span><br></pre></td></tr></table></figure><h3 id="51-数组中没有出现的数字"><a href="#51-数组中没有出现的数字" class="headerlink" title="51.数组中没有出现的数字"></a>51.数组中没有出现的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">upper_limit = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the range of the array: &quot;</span>))</span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter the number of elements in the array: &quot;</span>))</span><br><span class="line">nums = [random.randint(<span class="number">1</span>, upper_limit) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number)]</span><br><span class="line">nums.sort()</span><br><span class="line">comparasion = [j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, upper_limit+<span class="number">1</span>) <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> nums]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The array is:&quot;</span>, nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The number that is not in the array is:&quot;</span>, comparasion)</span><br></pre></td></tr></table></figure><h3 id="52-替换空格"><a href="#52-替换空格" class="headerlink" title="52.替换空格"></a>52.替换空格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str.replace(old, new[, count])</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="53-快乐数"><a href="#53-快乐数" class="headerlink" title="53.快乐数"></a>53.快乐数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        j = x = n % <span class="number">10</span></span><br><span class="line">        <span class="built_in">sum</span> += j ** <span class="number">2</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">happynumber</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">9</span>:</span><br><span class="line">        n = change(n)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> happynumber(n):</span><br><span class="line">    <span class="built_in">print</span>(n, <span class="string">&quot;is a happy number&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(n, <span class="string">&quot;is not a happy number&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="54-立方根"><a href="#54-立方根" class="headerlink" title="54.立方根"></a>54.立方根</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">root = math.floor(math.<span class="built_in">pow</span>(num, <span class="number">1</span>/<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The cube root of <span class="subst">&#123;num&#125;</span> is <span class="subst">&#123;root&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="55-最长公共前缀"><a href="#55-最长公共前缀" class="headerlink" title="55.最长公共前缀"></a>55.最长公共前缀</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_prefix</span>(<span class="params">strs</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(strs)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs[<span class="number">0</span>])):</span><br><span class="line">        temp = strs[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(strs[j]) <span class="keyword">or</span> strs[j][i]!= temp:</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">strs = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(longest_common_prefix(strs))</span><br></pre></td></tr></table></figure><h3 id="56-字符串变形"><a href="#56-字符串变形" class="headerlink" title="56.字符串变形"></a>56.字符串变形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串由空格隔开的单词反序，同时反转每个字符的大小写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    words = s.split()</span><br><span class="line">    words.reverse()</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        s += word.swapcase() + <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="string">&quot;Hello World&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="57-压缩字符串"><a href="#57-压缩字符串" class="headerlink" title="57.压缩字符串"></a>57.压缩字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">list</span>[-<span class="number">2</span>] != i: <span class="comment"># list 为空或者最后的字母元素和当前元素不同</span></span><br><span class="line">            <span class="built_in">list</span>.append(i)</span><br><span class="line">            <span class="built_in">list</span>.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 相同次数加一</span></span><br><span class="line">            <span class="built_in">list</span>[-<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span> <span class="keyword">if</span> x!= <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="string">&#x27;aaaabbbcc&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="58-三个数的最大乘积"><a href="#58-三个数的最大乘积" class="headerlink" title="58.三个数的最大乘积"></a>58.三个数的最大乘积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;给定数组的长度：&quot;</span>))</span><br><span class="line"><span class="built_in">list</span> = [random.randint(-<span class="number">100</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number)]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组为：&quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">max_product = <span class="built_in">max</span>(<span class="built_in">list</span>[<span class="number">0</span>] * <span class="built_in">list</span>[<span class="number">1</span>] * <span class="built_in">list</span>[-<span class="number">1</span>], <span class="built_in">list</span>[-<span class="number">1</span>] * <span class="built_in">list</span>[-<span class="number">2</span>] * <span class="built_in">list</span>[-<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大乘积为：&quot;</span>, max_product)</span><br></pre></td></tr></table></figure><h3 id="59-十进制转二进制"><a href="#59-十进制转二进制" class="headerlink" title="59.十进制转二进制"></a>59.十进制转二进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个十进制数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">bin</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十进制数&quot;</span>, a, <span class="string">&quot;的二进制数为&quot;</span>, b[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h3 id="60-判断字符串是否唯一"><a href="#60-判断字符串是否唯一" class="headerlink" title="60.判断字符串是否唯一"></a>60.判断字符串是否唯一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串：&quot;</span>)</span><br><span class="line"><span class="comment"># len() 转换为集合，集合的元素唯一</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(<span class="built_in">str</span>)) == <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串中没有重复的字符&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串中有重复的字符&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="61-IP地址转换"><a href="#61-IP地址转换" class="headerlink" title="61.IP地址转换"></a>61.IP地址转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ip_to_int</span>(<span class="params">ip</span>):</span><br><span class="line">    ip_list = ip.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    ip_int = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        ip_int = ip_int * <span class="number">256</span> + <span class="built_in">int</span>(ip_list[i])</span><br><span class="line">    <span class="keyword">return</span> ip_int</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ip_to_int(ip))</span><br></pre></td></tr></table></figure><h3 id="62-二分查找"><a href="#62-二分查找" class="headerlink" title="62.二分查找"></a>62.二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_list</span>(<span class="params">number</span>):</span><br><span class="line">    l = <span class="built_in">list</span>(<span class="built_in">set</span>([random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number)]))</span><br><span class="line">    l.sort()</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params"><span class="built_in">list</span>, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">list</span>[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">list</span>[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">l = generate_list(n)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">tar = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number to search: &quot;</span>))</span><br><span class="line">result = binary_search(l, tar)</span><br><span class="line"><span class="keyword">if</span> result == -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Found at index&quot;</span>, result)</span><br></pre></td></tr></table></figure><h3 id="63-二分查找（有重复版）"><a href="#63-二分查找（有重复版）" class="headerlink" title="63.二分查找（有重复版）"></a>63.二分查找（有重复版）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            temp = mid</span><br><span class="line">            <span class="keyword">while</span> temp &gt; <span class="number">0</span> <span class="keyword">and</span> arr[temp-<span class="number">1</span>] == target:</span><br><span class="line">                temp -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">target1 = <span class="number">1</span></span><br><span class="line">target2 = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(binary_search(arr, target1)) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(binary_search(arr, target2)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="64-移动0"><a href="#64-移动0" class="headerlink" title="64.移动0"></a>64.移动0</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个数组，将所有0移动到数组的末尾，并保持非0元素的相对顺序不变。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_zeros</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">if</span> arr[i] == <span class="number">0</span>:</span><br><span class="line">            arr.append(<span class="number">0</span>)</span><br><span class="line">            arr.pop(i)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(move_zeros(arr))  </span><br></pre></td></tr></table></figure><h3 id="65-字符串翻转"><a href="#65-字符串翻转" class="headerlink" title="65.字符串翻转"></a>65.字符串翻转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_string</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)!= <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bigA = a + a</span><br><span class="line">        result = b <span class="keyword">in</span> bigA</span><br><span class="line">        <span class="keyword">return</span> result   </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reverse_string(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;ohell&quot;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(reverse_string(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;olle&quot;</span>)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="66-判断子序列"><a href="#66-判断子序列" class="headerlink" title="66.判断子序列"></a>66.判断子序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_subsequence</span>(<span class="params">s, t</span>):</span><br><span class="line">    c = <span class="string">&quot;&quot;</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt; <span class="built_in">len</span>(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i == t[n]:</span><br><span class="line">            c += i</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> c == s: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(is_subsequence(<span class="string">&quot;hlo&quot;</span>, <span class="string">&quot;hello&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="67-数组中重复的数字"><a href="#67-数组中重复的数字" class="headerlink" title="67.数组中重复的数字"></a>67.数组中重复的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_repeat_num</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> nums.count(i) &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_repeat_num([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(find_repeat_num([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])) <span class="comment"># -1</span></span><br></pre></td></tr></table></figure><h3 id="68-字符串的相邻字符去重"><a href="#68-字符串的相邻字符去重" class="headerlink" title="68.字符串的相邻字符去重"></a>68.字符串的相邻字符去重</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove_adjacent_duplicates</span>(<span class="params">s</span>):</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> res ==<span class="string">&quot;&quot;</span>:</span><br><span class="line">            res += i</span><br><span class="line">        <span class="keyword">elif</span> res[-<span class="number">1</span>] == i:</span><br><span class="line">            res = res[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(remove_adjacent_duplicates(<span class="string">&quot;acbbc&quot;</span>)) <span class="comment"># &quot;a&quot;</span></span><br></pre></td></tr></table></figure><h3 id="69-2的幂"><a href="#69-2的幂" class="headerlink" title="69.2的幂"></a>69.2的幂</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_pow</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 2的幂按位与比它小1的数为0</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &amp; (n-<span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_pow(<span class="number">1024</span>)) </span><br></pre></td></tr></table></figure><h3 id="70-最长公共子串"><a href="#70-最长公共子串" class="headerlink" title="70.最长公共子串"></a>70.最长公共子串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lcs</span>(<span class="params">s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s1[left:i+<span class="number">1</span>] <span class="keyword">in</span> s2:</span><br><span class="line">            res = s1[left:i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lcs(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;helo wordl&#x27;</span>)) <span class="comment"># lo wor</span></span><br></pre></td></tr></table></figure><h3 id="71-冒泡排序"><a href="#71-冒泡排序" class="headerlink" title="71.冒泡排序"></a>71.冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n-i-<span class="number">1</span>): <span class="comment"># -i 是后面i个已经是最大的， -1是下面是比较i和i+1</span></span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>]</span><br><span class="line"><span class="built_in">print</span>(bubble_sort(arr))</span><br></pre></td></tr></table></figure><h3 id="72-选择排序"><a href="#72-选择排序" class="headerlink" title="72.选择排序"></a>72.选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        min_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_idx]:</span><br><span class="line">                min_idx = j</span><br><span class="line">        arr[i], arr[min_idx] = arr[min_idx], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(selection_sort(arr))  </span><br></pre></td></tr></table></figure><h3 id="73-插入排序"><a href="#73-插入排序" class="headerlink" title="73.插入排序"></a>73.插入排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        key = arr[i] <span class="comment"># 待插入的元素</span></span><br><span class="line">        j = i - <span class="number">1</span>    <span class="comment"># 待比较的元素</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> key &lt; arr[j]: <span class="comment"># 从后向前比较，找到比待插入元素小的元素，插入到该位置</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = key</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(insert_sort(arr))</span><br></pre></td></tr></table></figure><h3 id="74-字符删除"><a href="#74-字符删除" class="headerlink" title="74.字符删除"></a>74.字符删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定两个字符串str和sub，从str中完全删除sub中存在的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_chars</span>(<span class="params"><span class="built_in">str</span>, sub</span>):</span><br><span class="line">    sub = <span class="built_in">set</span>(sub)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> sub)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(delete_chars(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;lwr&#x27;</span>)) <span class="comment"># heo word</span></span><br></pre></td></tr></table></figure><h3 id="75-目标转移"><a href="#75-目标转移" class="headerlink" title="75.目标转移"></a>75.目标转移</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">move_target</span>(<span class="params">nums, target</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    left = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> nums[left] != target:</span><br><span class="line">            nums[right] = nums[left]</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        left -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        nums[i] = target</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"><span class="built_in">print</span>(move_target([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">10</span>], <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="76-柠檬水找ling"><a href="#76-柠檬水找ling" class="headerlink" title="76.柠檬水找ling"></a>76.柠檬水找ling</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每杯柠檬水5元，顾客只有5,10,20元面额的钞票，问能不能找零</span></span><br><span class="line"></span><br><span class="line">my_money = &#123;<span class="number">5</span>: <span class="number">0</span>, <span class="number">10</span>: <span class="number">0</span>, <span class="number">20</span>: <span class="number">0</span>&#125;  <span class="comment"># 使用字典来存储不同面额的钞票数量</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前钞票：&quot;</span>, my_money)</span><br><span class="line">    give_money = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;顾客付款金额（5 10 20）:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> give_money <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无效的金额&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否能找零</span></span><br><span class="line">    <span class="keyword">if</span> give_money == <span class="number">5</span>:</span><br><span class="line">        my_money[<span class="number">5</span>] += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找您0元&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> give_money == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">if</span> my_money[<span class="number">5</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            my_money[<span class="number">5</span>] -= <span class="number">1</span></span><br><span class="line">            my_money[<span class="number">10</span>] += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找您5元&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不能找零&quot;</span>)</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> give_money == <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">if</span> my_money[<span class="number">10</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> my_money[<span class="number">5</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            my_money[<span class="number">10</span>] -= <span class="number">1</span></span><br><span class="line">            my_money[<span class="number">5</span>] -= <span class="number">1</span></span><br><span class="line">            my_money[<span class="number">20</span>] += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找您15元&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> my_money[<span class="number">5</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">            my_money[<span class="number">5</span>] -= <span class="number">3</span></span><br><span class="line">            my_money[<span class="number">20</span>] += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;找您15元&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不能找零&quot;</span>)</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出最终的钞票信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最终钞票情况：&quot;</span>, my_money)</span><br></pre></td></tr></table></figure><h3 id="77-末尾的零"><a href="#77-末尾的零" class="headerlink" title="77.末尾的零"></a>77.末尾的零</h3><figure class="highlight plaintext"><figcaption><span>给定n，求n!末尾的0的个数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def count_zero(n):</span><br><span class="line">    count = 0</span><br><span class="line">    while n!= 0:</span><br><span class="line">        count += n // 5</span><br><span class="line">        n //= 5</span><br><span class="line">    return count</span><br><span class="line"></span><br><span class="line">n = int(input(&quot;请输入一个整数：&quot;))</span><br><span class="line">print(&quot;末尾的0的个数为：&quot;, count_zero(n))</span><br></pre></td></tr></table></figure><h3 id="78-统计数字"><a href="#78-统计数字" class="headerlink" title="78.统计数字"></a>78.统计数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func(1, 11) 1 10 11 一共4次</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">k, n</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        time = <span class="built_in">str</span>(i).count(<span class="built_in">str</span>(k))</span><br><span class="line">        count += time</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">1</span>, <span class="number">11</span>))</span><br></pre></td></tr></table></figure><h3 id="79-合并排序数字"><a href="#79-合并排序数字" class="headerlink" title="79.合并排序数字"></a>79.合并排序数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sortArray</span>(<span class="params">nums1, nums2</span>):</span><br><span class="line">    nums = []</span><br><span class="line">    <span class="keyword">while</span> nums1 <span class="keyword">and</span> nums2:</span><br><span class="line">        <span class="keyword">if</span> nums1[<span class="number">0</span>] &lt; nums2[<span class="number">0</span>]:</span><br><span class="line">            nums.append(nums1.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums.append(nums2.pop(<span class="number">0</span>))</span><br><span class="line">    nums += nums1 + nums2</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(sortArray(nums1, nums2))</span><br></pre></td></tr></table></figure><h3 id="80-插入5"><a href="#80-插入5" class="headerlink" title="80.插入5"></a>80.插入5</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_five</span>(<span class="params">num</span>):</span><br><span class="line">    num_str = <span class="built_in">str</span>(num)</span><br><span class="line">    max_num = num_str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(num_str) + <span class="number">1</span>):</span><br><span class="line">            new_num = num_str[:i] + <span class="string">&#x27;5&#x27;</span> + num_str[i:]</span><br><span class="line">            <span class="keyword">if</span> i ==<span class="number">1</span>:</span><br><span class="line">                max_num = new_num</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">int</span>(new_num) &gt; <span class="built_in">int</span>(max_num):</span><br><span class="line">                max_num = new_num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_str) + <span class="number">1</span>):</span><br><span class="line">            new_num = num_str[:i] + <span class="string">&#x27;5&#x27;</span> + num_str[i:]</span><br><span class="line">            <span class="keyword">if</span> new_num &gt; max_num:</span><br><span class="line">                max_num = new_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_num</span><br><span class="line"></span><br><span class="line">given_num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(insert_five(given_num))</span><br></pre></td></tr></table></figure><h3 id="81-字符串置换"><a href="#81-字符串置换" class="headerlink" title="81.字符串置换"></a>81.字符串置换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">string_permutation</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(str1) == <span class="built_in">sorted</span>(str2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(string_permutation(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bca&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">basic python programming questions and answers</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://agoni66.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>第四章 数组与链表</title>
    <link href="https://agoni66.github.io/posts/1000124.html"/>
    <id>https://agoni66.github.io/posts/1000124.html</id>
    <published>2024-11-16T14:00:00.000Z</published>
    <updated>2024-11-16T17:25:21.122Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hello-algo.com/assets/covers/chapter_array_and_linkedlist.jpg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a> </p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a> </p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a></p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a> ⇦ 当前位置🪂</p></li></ol></div><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>「数组 array」是一种线性数据结构，其将<strong>相同类型元素</strong>存储在连续的内存空间中。<strong>元素在数组中的位置称为该元素的「索引 index」</strong></p><p><strong>初始化数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>访问数组</strong></p><p>本质：索引<code>index</code>，索引的含义本质上是内存地址的偏移量。首个元素的地址偏移量是 <strong>0</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_1 = arr[index]</span><br><span class="line">num_2 = nums[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_access</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机访问元素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 在区间 [0, len(nums)-1] 中随机抽取一个数字</span></span><br><span class="line">    random_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 获取并返回随机元素</span></span><br><span class="line">    random_num = nums[random_index]</span><br><span class="line">    <span class="keyword">return</span> random_num</span><br></pre></td></tr></table></figure><p><strong>插入元素</strong></p><ol><li>把索引 index 及以后的所有元素向后移动一位</li><li>把插入的元素赋值给 索引处 index</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], num: <span class="built_in">int</span>, index: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在数组的索引 index 处插入元素 num&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 把索引 index 以及之后的所有元素向后移动一位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>, index, -<span class="number">1</span>):</span><br><span class="line">        nums[i] = nums[i - <span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 将 num 赋给 index 处的元素</span></span><br><span class="line">    nums[index] = num</span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><p>把索引 index 及以后的所有元素向前移动一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], index: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除索引 index 处的元素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 把索引 index 之后的所有元素向前移动一位</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index, <span class="built_in">len</span>(nums) - <span class="number">1</span>):</span><br><span class="line">        nums[i] = nums[i + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>遍历数组</strong></p><ol><li>通过索引</li><li>直接遍历</li><li>同时遍历索引和数据 <code>enumerate()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">traverse</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;遍历数组&quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 通过索引遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        count += nums[i]</span><br><span class="line">    <span class="comment"># 直接遍历数组元素</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        count += num</span><br><span class="line">    <span class="comment"># 同时遍历数据索引和元素</span></span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        count += nums[i]</span><br><span class="line">        count += num</span><br></pre></td></tr></table></figure><p><strong>查找元素</strong></p><p>遍历+判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在数组中查找指定元素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>扩容数组</strong></p><p>原因：数组的长度是不可变的</p><p>初始化+复制粘贴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>], enlarge: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展数组长度&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化一个扩展长度后的数组</span></span><br><span class="line">    res = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + enlarge)</span><br><span class="line">    <span class="comment"># 将原数组中的所有元素复制到新数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        res[i] = nums[i]</span><br><span class="line">    <span class="comment"># 返回扩展后的新数组</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>优点</p><ul><li>空间效率高</li><li>支持随机访问</li><li>缓存局部性</li></ul><p>缺点</p><ul><li>插入与删除效率低</li><li>长度不可变</li><li>空间浪费</li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>「链表 linked list」是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。 引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点</p><p><strong>链表=节点（值和指向下一个的引用）的总和</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;链表节点类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val: <span class="built_in">int</span></span>):</span><br><span class="line">        self.val: <span class="built_in">int</span> = val               <span class="comment"># 节点值</span></span><br><span class="line">        self.<span class="built_in">next</span>: ListNode | <span class="literal">None</span> = <span class="literal">None</span> <span class="comment"># 指向下一节点的引用</span></span><br></pre></td></tr></table></figure><p>头节点：首个节点</p><p>尾节点：最后节点 →None</p><p><strong>初始化链表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化链表 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span></span><br><span class="line"><span class="comment"># 初始化各个节点</span></span><br><span class="line">n0 = ListNode(<span class="number">1</span>)</span><br><span class="line">n1 = ListNode(<span class="number">2</span>)</span><br><span class="line">n2 = ListNode(<span class="number">3</span>)</span><br><span class="line">n3 = ListNode(<span class="number">4</span>)</span><br><span class="line">n4 = ListNode(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 构建节点之间的引用</span></span><br><span class="line">n0.<span class="built_in">next</span> = n1</span><br><span class="line">n1.<span class="built_in">next</span> = n2</span><br><span class="line">n2.<span class="built_in">next</span> = n3</span><br><span class="line">n3.<span class="built_in">next</span> = n4</span><br></pre></td></tr></table></figure><p><strong>插入节点</strong></p><p>P先指向后面的，前面的指向P</p><p><img src="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list.assets/linkedlist_insert_node.png" alt="Untitled"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">n0: ListNode, P: ListNode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在链表的节点 n0 之后插入节点 P&quot;&quot;&quot;</span></span><br><span class="line">    n1 = n0.<span class="built_in">next</span></span><br><span class="line">    P.<span class="built_in">next</span> = n1</span><br><span class="line">    n0.<span class="built_in">next</span> = P</span><br></pre></td></tr></table></figure><p><strong>删除节点</strong></p><p>index 前面的直接指向后面的</p><p><img src="https://www.hello-algo.com/chapter_array_and_linkedlist/linked_list.assets/linkedlist_remove_node.png" alt="PNG image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">n0: ListNode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除链表的节点 n0 之后的首个节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n0.<span class="built_in">next</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># n0 -&gt; P -&gt; n1</span></span><br><span class="line">    P = n0.<span class="built_in">next</span></span><br><span class="line">    n1 = P.<span class="built_in">next</span> <span class="comment"># 就算P是None也可以</span></span><br><span class="line">    n0.<span class="built_in">next</span> = n1</span><br></pre></td></tr></table></figure><p><strong>访问节点</strong></p><p>遍历</p><blockquote><p><strong><code>_</code></strong> 为占位符，用于迭代不需要这个值时</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">access</span>(<span class="params">head: ListNode, index: <span class="built_in">int</span></span>) -&gt; ListNode | <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;访问链表中索引为 index 的节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="comment"># 检查当前的 head 节点是否为 None，链表末尾或者链表为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        head = head.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p><strong>查找节点</strong></p><p>遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">head: ListNode, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在链表中查找值为 target 的首个节点&quot;&quot;&quot;</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> head: <span class="comment"># head = None 不进行循环</span></span><br><span class="line">        <span class="keyword">if</span> head.val == target:</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        head = head.<span class="built_in">next</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>链表分类</p><ul><li>单向链表</li><li>环形链表</li><li>双向链表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表节点类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val: <span class="built_in">int</span></span>):</span><br><span class="line">        self.val: <span class="built_in">int</span> = val                <span class="comment"># 节点值</span></span><br><span class="line">        self.<span class="built_in">next</span>: ListNode | <span class="literal">None</span> = <span class="literal">None</span>  <span class="comment"># 指向后继节点的引用</span></span><br><span class="line">        self.prev: ListNode | <span class="literal">None</span> = <span class="literal">None</span>  <span class="comment"># 指向前驱节点的引用</span></span><br><span class="line">        <span class="comment"># 实际上是self.prev = None 要这样看</span></span><br></pre></td></tr></table></figure><p><strong>数组与链表的效率对比</strong></p><div class="table-container"><table><thead><tr><th></th><th><strong>数组</strong></th><th><strong>链表</strong></th></tr></thead><tbody><tr><td>存储方式</td><td>连续内存空间</td><td>分散内存空间</td></tr><tr><td>容量扩展</td><td>长度不可变</td><td>可灵活扩展</td></tr><tr><td>内存效率</td><td>元素占用内存少、但可能浪费空间</td><td>元素占用内存多</td></tr><tr><td>访问元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>添加元素</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除元素</td><td>O(n)</td><td>O(1)</td></tr></tbody></table></div><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong><code>list.clear()</code> 清空列表</strong></p><p><strong><code>list.append(number)</code> 尾部添加元素</strong></p><p><strong><code>list.insert(index, number)</code> 在索引处插入元素</strong></p><p><strong><code>list.pop(index)</code> 删除索引处元素</strong> </p><p><strong><code>len(list)</code> 返回列表的长度</strong></p><p><strong><code>list1 + list2</code> 列表拼接</strong></p><p><strong><code>list.sort()</code> 列表排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 以单个下划线 _ 开头的属性或方法被视为受保护的（protected），这意味着它们是类内部使用的，不应该被外部直接访问</span></span><br><span class="line">        self._capacity: <span class="built_in">int</span> = <span class="number">10</span>  <span class="comment"># 列表容量</span></span><br><span class="line">        self._arr: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">0</span>] * self._capacity  <span class="comment"># 数组（存储列表元素）</span></span><br><span class="line">        self._size: <span class="built_in">int</span> = <span class="number">0</span>  <span class="comment"># 列表长度（当前元素数量）</span></span><br><span class="line">        self._extend_ratio: <span class="built_in">int</span> = <span class="number">2</span>  <span class="comment"># 每次列表扩容的倍数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取列表长度（当前元素数量）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">capacity</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取列表容量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;访问元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 索引如果越界，则抛出异常，下同</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self._arr[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, num: <span class="built_in">int</span>, index: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        self._arr[index] = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, num: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部添加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 元素数量超出容量时，触发扩容机制</span></span><br><span class="line">        <span class="keyword">if</span> self.size() == self.capacity():</span><br><span class="line">            self.extend_capacity()</span><br><span class="line">        self._arr[self._size] = num</span><br><span class="line">        self._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, num: <span class="built_in">int</span>, index: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在中间插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        <span class="comment"># 元素数量超出容量时，触发扩容机制</span></span><br><span class="line">        <span class="keyword">if</span> self._size == self.capacity():</span><br><span class="line">            self.extend_capacity()</span><br><span class="line">        <span class="comment"># 将索引 index 以及之后的元素都向后移动一位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self._size - <span class="number">1</span>, index - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self._arr[j + <span class="number">1</span>] = self._arr[j]</span><br><span class="line">        self._arr[index] = num</span><br><span class="line">        <span class="comment"># 更新元素数量</span></span><br><span class="line">        self._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self._size:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;索引越界&quot;</span>)</span><br><span class="line">        num = self._arr[index]</span><br><span class="line">        <span class="comment"># 将索引 index 之后的元素都向前移动一位</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(index, self._size - <span class="number">1</span>):</span><br><span class="line">            self._arr[j] = self._arr[j + <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 更新元素数量</span></span><br><span class="line">        self._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 返回被删除的元素</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend_capacity</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;列表扩容&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建一个长度为原数组 _extend_ratio 倍的新数组，并将原数组复制到新数组</span></span><br><span class="line">        self._arr = self._arr + [<span class="number">0</span>] * self.capacity() * (self._extend_ratio - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 更新列表容量</span></span><br><span class="line">        self._capacity = <span class="built_in">len</span>(self._arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_array</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回有效长度的列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self._arr[: self._size]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">第四章 数组与链表</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第三章 数据结构</title>
    <link href="https://agoni66.github.io/posts/1000123.html"/>
    <id>https://agoni66.github.io/posts/1000123.html</id>
    <published>2024-11-15T14:00:00.000Z</published>
    <updated>2024-11-16T17:23:34.138Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hello-algo.com/assets/covers/chapter_data_structure.jpg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a> </p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a> </p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a> ⇦ 当前位置🪂</p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a> </p></li></ol></div><h2 id="数组、链表、栈、队列、哈希表、树、堆、图"><a href="#数组、链表、栈、队列、哈希表、树、堆、图" class="headerlink" title="数组、链表、栈、队列、哈希表、树、堆、图"></a>数组、链表、栈、队列、哈希表、树、堆、图</h2><p>按逻辑结构分为：线性与非线性</p><ul><li>线性数据结构 <font color='gold'><strong>（一对一）</strong></font><ul><li>数组</li><li>链表</li><li>栈</li><li>队列</li><li>哈希表</li></ul></li><li>非线性数据结构 <font color='gold'><strong>（树状结构，一对多，除了图）</strong></font><ul><li>树</li><li>堆</li><li>图 <font color='gold'><strong>（网状结构，多对多）</strong></font></li><li>哈希表</li></ul></li></ul><p>按物理结构分为：连续与分散</p><hr><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><strong>基本数据类型是 CPU 可以直接进行运算的类型</strong>，在算法中直接被使用，主要包括以下几种：</p><ul><li>整数类型 <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>浮点数类型 <code>float</code>、<code>double</code> ，用于表示小数</li><li>字符类型 <code>char</code> ，用于表示各种语言的字母、标点符号甚至表情符号等</li><li>布尔类型 <code>bool</code> ，用于表示“是”与“否”判断</li></ul><hr><h2 id="数字编码"><a href="#数字编码" class="headerlink" title="数字编码"></a>数字编码</h2><h3 id="原码、反码与补码"><a href="#原码、反码与补码" class="headerlink" title="原码、反码与补码"></a>原码、反码与补码</h3><p><img src="../img/算法/0023.png" alt="Untitled"></p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><img src="../img/算法/0024.png" alt="Untitled"></p>]]></content>
    
    
    <summary type="html">第三章 数据结构</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第二章 复杂度分析</title>
    <link href="https://agoni66.github.io/posts/1000122.html"/>
    <id>https://agoni66.github.io/posts/1000122.html</id>
    <published>2024-11-14T14:00:00.000Z</published>
    <updated>2024-11-16T17:20:27.564Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../img/算法/0018.jpeg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a> </p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a> ⇦ 当前位置🪂</p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a></p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a> </p></li></ol></div><h2 id="迭代与递归"><a href="#迭代与递归" class="headerlink" title="迭代与递归"></a>迭代与递归</h2><p>「迭代 iteration」是一种重复执行某个任务的控制结构。在迭代中，程序会在满足一定的条件下重复执行某段代码，直到这个条件不再满足</p><blockquote><p><strong>for 循环的代码更加紧凑，while 循环更加灵活</strong></p></blockquote><p>每一次嵌套都是一次“升维”，有关时间复杂度</p><p>「递归 recursion」是一种算法策略，通过函数调用自身来解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recur</span>(<span class="params">n:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"><span class="string">&quot;&quot;&quot; 递归，1+2+3+……+n &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 终止条件</span></span><br><span class="line"><span class="keyword">if</span> n = <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 递:递归调用</span></span><br><span class="line">  res = recur(n - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 归:返回结果 </span></span><br><span class="line"><span class="keyword">return</span> n + res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n, source, target, auxiliary</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 汉诺塔 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;source&#125;</span> -&gt; <span class="subst">&#123;target&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    hanoi(n - <span class="number">1</span>, source, auxiliary, target)</span><br><span class="line">    hanoi(<span class="number">1</span>, source, target, auxiliary)</span><br><span class="line">    hanoi(n - <span class="number">1</span>, auxiliary, target, source)</span><br></pre></td></tr></table></figure><p>迭代：自下而上，不断重复</p><p>递归：自上而下，划分为更小的子问题</p><p><img src="../img/算法/0019.png" alt="Untitled"></p><hr><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><img src="../img/算法/0020.png" alt="Untitled"></p><p><img src="../img/算法/0021.png" alt="Untitled"></p>]]></content>
    
    
    <summary type="html">第二章 复杂度分析</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一章 初始算法</title>
    <link href="https://agoni66.github.io/posts/1000121.html"/>
    <id>https://agoni66.github.io/posts/1000121.html</id>
    <published>2024-11-13T14:00:00.000Z</published>
    <updated>2024-11-16T17:20:34.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../img/算法/0016.jpeg" alt="JPEG image.jpeg"></p><div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️ <a href="https://agoni66.github.io/posts/1000121.html">第一章 初始算法</a> ⇦ 当前位置🪂</p></li><li><p>🦝 <a href="https://agoni66.github.io/posts/1000122.html">第二章 复杂度分析</a> </p></li><li><p>🐳 <a href="https://agoni66.github.io/posts/1000123.html">第三章 数据结构</a></p></li><li><p>🐼 <a href="https://agoni66.github.io/posts/1000124.html">第四章 数组与链表</a></p></li></ol></div><p>「算法 algorithm」是在有限时间内解决特定问题的一组指令或操作步骤，它具有以下特性。</p><ul><li>问题是明确的，包含清晰的<strong>输入</strong>和<strong>输出</strong>定义。</li><li>具有可行性，能够在有限步骤、时间和内存空间下完成。</li><li>各步骤都有确定的含义，在相同的输入和运行条件下，输出始终相同。</li></ul><p>「数据结构 data structure」是计算机中组织和存储数据的方式，具有以下设计目标。</p><ul><li>空间占用尽量少，以节省计算机内存。</li><li>数据操作尽可能快速，涵盖数据访问、添加、删除、更新等。</li><li>提供简洁的数据表示和逻辑信息，以便算法高效运行。</li></ul><p><strong><font color="blue">数据结构与算法的关系</font></strong></p><ul><li>数据结构是算法的基石。数据结构为算法提供了结构化存储的数据，以及操作数据的方法。</li><li>算法是数据结构发挥作用的舞台。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li>算法通常可以基于不同的数据结构实现，但执行效率可能相差很大，选择合适的数据结构是关键。</li></ul><div class="table-container"><table><thead><tr><th><strong>数据结构与算法</strong></th><th><strong>拼装积木</strong></th></tr></thead><tbody><tr><td>输入数据</td><td>未拼装的积木</td></tr><tr><td>数据结构</td><td>积木组织形式，包括形状、大小、连接方式等</td></tr><tr><td>算法</td><td>把积木拼成目标形态的一系列操作步骤</td></tr><tr><td>输出数据</td><td>积木模型</td></tr></tbody></table></div><p><img src="../img/算法/0017.png" alt=""></p>]]></content>
    
    
    <summary type="html">第一章 初始算法</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://agoni66.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git基本操作</title>
    <link href="https://agoni66.github.io/posts/1000013.html"/>
    <id>https://agoni66.github.io/posts/1000013.html</id>
    <published>2024-11-12T07:00:00.000Z</published>
    <updated>2024-11-12T07:08:37.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="克隆下仓库"><a href="#克隆下仓库" class="headerlink" title="克隆下仓库"></a>克隆下仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:&#123;username&#125;/&#123;repository&#125;.git</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/12.png" alt="image.png"></p><h3 id="显示工作目录状态"><a href="#显示工作目录状态" class="headerlink" title="显示工作目录状态"></a>显示工作目录状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status </span><br></pre></td></tr></table></figure><ol><li>当前分支是哪个</li><li>自上次提交以来，哪些文件被修改了（modified）</li><li>哪些文件是新的（untracked），即还没有加入到 Git 版本控制中</li><li>哪些文件当前被暂存（staged），即将被提交</li></ol><p><img src="../img/看漫画学Python/13.png" alt="image.png"></p><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello_world.php</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;Add hello world script by php&quot;</span></span><br></pre></td></tr></table></figure><ol><li>git add 加入暂存区</li><li>git commit 提交</li></ol><p><img src="../img/看漫画学Python/14.png" alt="image.png"></p><h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/15.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=<span class="type">short</span></span><br></pre></td></tr></table></figure><ul><li>只显示提交的第一行</li></ul><p><img src="../img/看漫画学Python/16.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> README.md</span><br></pre></td></tr></table></figure><ul><li>只显示指定目录、文件的日志</li></ul><p><img src="../img/看漫画学Python/17.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure><ul><li>显示文件的改动</li></ul><p><img src="../img/看漫画学Python/18.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><ul><li>查看操作日志</li></ul><p><img src="../img/看漫画学Python/19.png" alt="image.png"></p><h3 id="进行PUSH更新仓库"><a href="#进行PUSH更新仓库" class="headerlink" title="进行PUSH更新仓库"></a>进行PUSH更新仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/20.png" alt="image.png"></p><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/21.png" alt="image.png"></p><h3 id="提交保存仓库的历史记录"><a href="#提交保存仓库的历史记录" class="headerlink" title="提交保存仓库的历史记录"></a>提交保存仓库的历史记录</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;First commit&quot;</span></span><br></pre></td></tr></table></figure><ul><li>-m 后面的是提交信息，用于概述本次提交</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><ul><li>提交详细信息</li><li>第一行：用一行文字简述提交的更改内容</li><li>第二行：空行</li><li>第三行以后：记述更改的原因和详细内容</li><li><h1 id="（井号）标为注释的内容，不需要更改和删除"><a href="#（井号）标为注释的内容，不需要更改和删除" class="headerlink" title="（井号）标为注释的内容，不需要更改和删除"></a>（井号）标为注释的内容，不需要更改和删除</h1></li><li><code>:qa</code>  编辑器终止提交</li></ul><p><img src="../img/看漫画学Python/22.png" alt="image.png"></p><h3 id="查看工作树和暂存区的差别"><a href="#查看工作树和暂存区的差别" class="headerlink" title="查看工作树和暂存区的差别"></a>查看工作树和暂存区的差别</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><ul><li>查看工作区（还没有add和commit）与暂存区的差别（<strong>没有差别不显示</strong>）</li></ul><p><img src="../img/看漫画学Python/23.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure><ul><li>查看与最新提交的区别</li></ul><p><img src="../img/看漫画学Python/24.png" alt="image.png"></p><h3 id="显示分支一览表"><a href="#显示分支一览表" class="headerlink" title="显示分支一览表"></a>显示分支一览表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/25.png" alt="image.png"></p><ul><li><code>*</code> 为当前分支</li></ul><h3 id="创建、切换分支"><a href="#创建、切换分支" class="headerlink" title="创建、切换分支"></a>创建、切换分支</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-A</span><br></pre></td></tr></table></figure><ul><li>创建名为feature-A的分支</li></ul><p><img src="../img/看漫画学Python/26.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout main</span><br></pre></td></tr></table></figure><ul><li>切换分支</li></ul><p><img src="../img/看漫画学Python/27.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -</span><br></pre></td></tr></table></figure><ul><li>切换回上一个分支</li></ul><p><img src="../img/看漫画学Python/28.png" alt="image.png"></p><h3 id="分支类型"><a href="#分支类型" class="headerlink" title="分支类型"></a>分支类型</h3><ol><li><strong>特性（Topic）分支</strong><ol><li>集中实现单一特性（主题）</li><li>除此之外不进行任何作业的分支</li></ol></li><li><strong>主干分支</strong><ol><li>通常是master分支为主干分支</li><li>特性分支的原点，也是合并的终点</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff feature-A</span><br></pre></td></tr></table></figure><ul><li>合并分支</li></ul><p><img src="../img/看漫画学Python/29.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure><ul><li>以图表形式查看分支</li></ul><p><img src="../img/看漫画学Python/30.png" alt="image.png"></p><h3 id="更改提交"><a href="#更改提交" class="headerlink" title="更改提交"></a>更改提交</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &#123;目标时间点的哈希值&#125;</span><br></pre></td></tr></table></figure><ul><li>回溯到目标时间点（哈希值，通过<code>git log</code>取得）</li></ul><p><img src="../img/看漫画学Python/31.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff fix-C</span><br></pre></td></tr></table></figure><ul><li>推进历史</li><li>发生了冲突，不解决冲突就无法完成合并</li><li>做出修改即可</li></ul><p><img src="../img/看漫画学Python/32.png" alt="image.png"></p><p><img src="../img/看漫画学Python/33.png" alt="image.png"></p><p><img src="../img/看漫画学Python/34.png" alt="image.png"></p><h3 id="修改提交信息"><a href="#修改提交信息" class="headerlink" title="修改提交信息"></a>修改提交信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><ul><li>进入编辑器修改提交信息</li></ul><p><img src="../img/看漫画学Python/35.png" alt="image.png"></p><h3 id="压缩历史"><a href="#压缩历史" class="headerlink" title="压缩历史"></a>压缩历史</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am</span><br></pre></td></tr></table></figure><ul><li>add命令和commit命令的结合</li></ul><ol><li>创建feature-C分支<code>$ git checkout -b feature-C</code></li><li>提交文件<code>$ git commit -am &quot;Add feature-C”</code></li><li>修改错误（使用<code>$ git diff</code>进行修正）（错误漏字等失误统称<code>typo</code>）</li></ol><p><img src="../img/看漫画学Python/36.png" alt="image.png"></p><ol><li>不希望在历史记录中看到失误类的提交，更改历史</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>选定当前分支中包含HEAD（最新提交）在内的两个最新历史记录为对象，进入编辑器修改</li></ul><p><img src="../img/看漫画学Python/37.png" alt="image.png"></p><p>可以看到没有Fix Typo（这个已经合并到Add feature-D，而且Add feature-D的哈希值已经被修改）</p><p><img src="../img/看漫画学Python/38.png" alt="image.png"></p><h3 id="获取远程仓库"><a href="#获取远程仓库" class="headerlink" title="获取远程仓库"></a>获取远程仓库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:github-book/git-tutorial.git</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/39.png" alt="image.png"></p><p>默认是master分支</p><p><code>remotes/origin/feature-D</code> 证明我们的远程仓库中已经有了feature-D 分支</p><p><img src="../img/看漫画学Python/40.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-D origin/feature-D</span><br></pre></td></tr></table></figure><ul><li>获取远程的feature-D分支</li><li><code>-b</code> 本地仓库中新建分支的名称</li></ul><p><img src="../img/看漫画学Python/41.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure><ul><li>推送回远程仓库（现在是推送D分支）</li></ul><p><img src="../img/看漫画学Python/42.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin feature-D</span><br></pre></td></tr></table></figure><ul><li>将本地的feature-D分支更新到最新状态</li></ul><p><img src="../img/看漫画学Python/43.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">呜呼起飞</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="工具" scheme="https://agoni66.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="科普" scheme="https://agoni66.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>看漫画学Python</title>
    <link href="https://agoni66.github.io/posts/1000012.html"/>
    <id>https://agoni66.github.io/posts/1000012.html</id>
    <published>2024-11-08T03:00:00.000Z</published>
    <updated>2024-11-08T02:50:35.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ul><li>容器类可以存储任意类型的数据</li><li>方法属于类；函数可以直接调用</li><li><code>break</code>语句强行退出循环体，不再执行循环体中剩余的语句</li><li>短路设计<ul><li>与 一False全False</li><li>或 一True全True</li><li>会不计算后面的表达式</li></ul></li><li>set 集合<ul><li>add(elem)</li><li>remove(elem)</li><li>clear()</li></ul></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>string 字符串<ul><li>普通字符串</li><li>原始字符串 <code>r</code></li><li>长字符串（还是需要转义）</li></ul></li><li>转义符<ul><li>\t 水平制表符</li><li>\n 换行</li><li>\r 回车</li></ul></li><li>默认下，int()函数将字符串参数当作<strong>十进制</strong>数字进行转换</li><li>format() 格式化字符串<ul><li><code>s</code> 字符串</li><li><code>d</code> 十进制整数</li><li><code>f</code> 十进制浮点数</li><li><code>g</code> 十进制整数或浮点数</li><li><code>o</code> 八进制整数</li><li><code>x</code> 十六进制整数</li></ul></li><li>字符串查找 <code>find()</code> 返回索引</li><li>字符串替换 <code>replace(old, new[, count])</code></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>函数的可变参数</p><ul><li><p>*可变参数在函数中被组装成一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">*numbers</span>):</span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        total += number</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">100.0</span>, <span class="number">20.0</span>, <span class="number">30.0</span>)) <span class="comment"># 150.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">30.0</span>, <span class="number">80.0</span>))        <span class="comment"># 110.0</span></span><br></pre></td></tr></table></figure></li><li><p>**可变参数在函数中被组装成一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_info</span>(<span class="params">**info</span>):</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span> -- <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">show_info(name= <span class="string">&quot;Ben&quot;</span>, age = <span class="number">18</span>, sex = <span class="literal">True</span>)</span><br><span class="line">show_info(student_name = <span class="string">&quot;Ben&quot;</span>, student_no = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># name -- Ben</span></span><br><span class="line"><span class="comment"># age -- 18</span></span><br><span class="line"><span class="comment"># sex -- True</span></span><br><span class="line"><span class="comment"># student_name -- Ben</span></span><br><span class="line"><span class="comment"># student_no -- 1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>global x</code> 修改成全局变量</p></li><li><strong>过滤函数</strong><ul><li><code>filter(function, iterable)</code></li><li>返回值不是列表，需要用<code>list()</code></li><li><strong>条件判断</strong></li></ul></li><li><strong>映射函数</strong><ul><li><code>map(function, iterable)</code></li><li>返回值不是列表，需要用<code>list()</code></li><li><strong>操作变换</strong></li></ul></li><li><p><strong>匿名函数</strong></p><ul><li><p><code>lambda 参数列表: lambda体</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">lamdba函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">opr</span>):</span><br><span class="line">    <span class="keyword">if</span> opr == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> a, b: (a + b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> a, b: (a - b)</span><br><span class="line"></span><br><span class="line">f1 = calc(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">f2 = calc(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 + 5 = <span class="subst">&#123;f1(<span class="number">10</span>, <span class="number">5</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;10 - 5 = <span class="subst">&#123;f2(<span class="number">10</span>, <span class="number">5</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">data1 = [<span class="number">66</span>, <span class="number">15</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">80</span>, <span class="number">99</span>]</span><br><span class="line"></span><br><span class="line">filtered = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: (x &gt; <span class="number">50</span>), data1)</span><br><span class="line">data2 = <span class="built_in">list</span>(filtered)</span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line">mapped = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x * <span class="number">2</span>), data1)</span><br><span class="line">data3 = <span class="built_in">list</span>(mapped)</span><br><span class="line"><span class="built_in">print</span>(data3)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul><li><p>类</p><ul><li><p>成员变量</p><ul><li><p>实例变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self···</span>):</span><br></pre></td></tr></table></figure></li><li><p>类变量 理解为通用数据即可</p></li></ul></li><li><p>成员方法</p><ul><li><p>实例方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">self···</span>):</span><br></pre></td></tr></table></figure></li><li><p>类方法</p><ul><li>@修饰函数、方法和类</li><li><code>def function(cls,···):</code></li></ul></li></ul></li><li>构造方法 <code>__init__()</code></li><li>属性</li></ul></li><li>私有变量<ul><li>前面加上 <code>__</code> 双下划线</li><li>默认类的变量是公有的，可以在类的外部访问</li></ul></li><li>私有方法 前面加上 <code>__</code> 双下划线</li><li>get（取值）和set（赋值）函数来访问私有变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get（取值）和set（赋值）函数来访问私有变量</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">property</span>(<span class="params">self</span>)</span><br><span class="line"><span class="comment"># get() property</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@属性.setter()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">property</span>(<span class="params">self, <span class="built_in">property</span></span>):</span><br><span class="line">self.__<span class="built_in">property</span>= <span class="built_in">property</span></span><br><span class="line"><span class="comment"># set() property</span></span><br></pre></td></tr></table></figure><ul><li>继承 父类 <strong>只有公有的成员变量和方法才可以被继承</strong></li><li><strong><code>super().__init__()</code></strong> 初始化父类成员变量</li><li>多继承 继承多个父类</li><li>方法重写 子类的方法会重写Override父类的同名方法</li><li><p><strong>封装 继承 多态</strong></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2></li><li><p><code>try-except</code> try代码块发生异常执行except代码块</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 多重异常捕获</span></span><br><span class="line"><span class="keyword">except</span> (Error1, Error) <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;异常是<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>无论try代码块执不执行，<strong>finally代码块都会执行</strong></li><li><code>raise</code> 引发异常</li></ul><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><ul><li><strong>datetime库</strong><ul><li><strong>datetime类</strong><ul><li><code>datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None)</code> 构造datetime类</li><li><code>datetime.today()</code> 返回当前的本地日期和时间</li><li><code>datetime.now(tz=None)</code> 返回指定时区的当前日期和时间（tz设置时区）</li><li><code>datetime.fromtimestamp(timestamp, tz=None)</code> 返回与UNIX时间戳对应的本地日期和时间（单位是秒）</li></ul></li><li><strong>date类</strong><ul><li><code>datetime.date(year, month, day)</code> 构造date类</li><li><code>date.today()</code> 返回当前的本地日期</li><li><code>date.fromtimestamp(timestamp)</code> 返回与UNIX时间戳对应的本地日期</li></ul></li><li><strong>time类</strong><ul><li><code>datetime.time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None)</code> 构造time类</li></ul></li><li><strong>timedelta</strong><ul><li>计算时间跨度</li><li><code>datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)</code> 构造timedelta类</li></ul></li><li><code>strftime(format)</code> <strong>日期时间对象转字符串</strong><ul><li>%m 两位月份表示</li><li>%y 两位年份表示</li><li>%Y 四位年份表示</li><li>%d 两位表示月中的一天</li><li>%H 两位小时表示（24小时制）</li><li>%I 两位小时表示（12小时制）</li><li>%p AM或PM区域性设置</li><li>%M 两位分钟表示</li><li>%S 两位秒表示</li><li>%f 以六位数表示微秒</li><li>%z +HHMM或-HHMM形式的UTC偏移</li><li>%Z 时区名称</li></ul></li><li><code>strptime(format)</code> <strong>字符串转日期时间对象</strong></li></ul></li><li><strong>re正则表达式</strong><ul><li><code>re.match(p, text)</code> 返回一个·Match匹配对象，否则返回None</li><li><code>re.search(p, text)</code> 返回第一个匹配对象，否则返回None</li><li><code>re.findall(p, text)</code> 返回所有匹配字符串列表，，否则返回None</li><li><code>re.sub(pattern, repl, string, count=0)</code> 字符串替换<ul><li>pattern 正则表达式</li><li>repl 替换的新字符串</li><li>string 被替换的旧字符串</li><li>count 替换的最大数量，默认为零</li></ul></li><li><code>re.split(pattern, string, maxsplit=0)</code> 字符串分割<ul><li>pattern 正则表达式</li><li>string 分割的字符串</li><li>maxsplit最大分割次数，默认为零</li></ul></li></ul></li><li><code>open(file, mode=‘r’, encoding=None, errors=None)</code> 打开文件<ul><li>file 要打开的文件</li><li>mode 文件打开模式<ul><li>t 文本文件模式</li><li>b 二进制文件模式</li><li>r 只读模式</li><li>w 只写模式</li><li>x 独占创建模式（文件不存在则创建；文件存在则FileExistsError异常）</li><li>a 追加模式（文件不存在则创建，文件存在则末尾追加）</li><li><ul><li>更新读写模式（必须与r、w或a组合使用）</li></ul></li></ul></li><li>encoding 打开文件的文件编码，默认是UTF编码</li><li>errors 指定文本文件发生编码错误时如何处理</li></ul></li><li><code>close()</code> 关闭文件</li><li><code>with open(filename) as file:</code> 自动释放资源（关闭文件）<ul><li>filename 文件名</li><li>file 打开的文件对象</li></ul></li><li>读写文本文件（或二进制文件）<ul><li><code>read(size=-1)</code> size限制读取的字符数，size=-1对读取的字符数没有限制</li><li><code>readline(size=-1)</code> 返回单行字符串，size限制读取的字符数</li><li><code>readlines()</code> 读取文件到一个字符串列表，每一行数据都是列表的一个元素</li><li><code>write(s)</code> 将字符串s写入文件并返回写入的字符数</li><li><code>writelines(lines)</code> 向文件中写入一个字符串列表（每一行末尾都提供分隔符）</li><li><code>flush()</code> 刷新写缓冲区，在文件没关闭的情况下将数据写入文件</li></ul></li></ul><h2 id="⭐⭐图形用户界面"><a href="#⭐⭐图形用户界面" class="headerlink" title="⭐⭐图形用户界面"></a>⭐⭐图形用户界面</h2><ul><li>应用程序</li><li>窗口</li><li>面板</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">the first wxPython program</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a app object</span></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create window object(pos=position)</span></span><br><span class="line">frm = wx.Frame(<span class="literal">None</span>, title=<span class="string">&#x27;the first wxPython program&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># show window(hide by default)</span></span><br><span class="line">frm.Show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get into the main event loop</span></span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>事件循环是一种事件或消息分发处理机制，大部分GUI在界面的现实及相应用户事件的处理都是通过主事件循环实现的</li><li>自定义窗口类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;the first wxPython program&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># your own code</span></span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>在窗口中添加控件（面板Panel和静态文本StaticText）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;the first wxPython program&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># create panel object</span></span><br><span class="line">panel = wx.Panel(parent=self)</span><br><span class="line"><span class="comment"># create statictext object</span></span><br><span class="line">statictext = wx.StaticText(parent=panel, label=<span class="string">&quot;Hello World&quot;</span>, pos=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li>事件处理<ul><li>事件源（控件）</li><li>事件</li><li>事件处理程序</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;event handing&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment"># create panel object</span></span><br><span class="line">panel = wx.Panel(parent=self)</span><br><span class="line"><span class="comment"># create statictext object</span></span><br><span class="line">self.statictext = wx.StaticText(parent=panel, label=<span class="string">&quot;please click ok button&quot;</span>, pos=(<span class="number">110</span>,<span class="number">20</span>))</span><br><span class="line">b = wx.Button(parent=panel, label=<span class="string">&#x27;OK&#x27;</span>, pos=(<span class="number">100</span>, <span class="number">50</span>))</span><br><span class="line"><span class="comment"># bind event，wx.EVT_BUTTON is the kind of event(按钮单击事件), on_click is event handing </span></span><br><span class="line">self.Bind(wx.EVT_BUTTON, self.on_click, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">self.statictext.SetLableText(<span class="string">&quot;Hello, World.&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><ul><li><p>布局管理</p><ul><li><strong>创建对象</strong><ul><li><code>wx.BoxSizer(wx.HORIZONTAL)</code> 创建水平方向盒子对象</li><li><code>wx.BoxSizer(wx.VERTICAL)</code> 创建垂直方向盒子对象</li><li>默认是水平方向</li></ul></li><li><p><strong>添加到父窗口</strong></p><ul><li><code>Add(window, proportion=0, flag=0, border=0)</code> 添加到父窗口</li><li>proportion 设置当前占父窗口的空间比例</li><li><p>flag 布局标志（对齐、边框、调整尺寸）</p><p><img src="../img/看漫画学Python/1.png" alt="image.png"></p><p><img src="../img/看漫画学Python/2.png" alt="image.png"></p><p><img src="../img/看漫画学Python/3.png" alt="image.png"></p></li><li><p>border 边框宽度</p></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;event handing&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># create panel object</span></span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        <span class="comment"># create statictext object</span></span><br><span class="line">        self.statictext = wx.StaticText(parent=panel, label=<span class="string">&quot;please click ok button&quot;</span>, pos=(<span class="number">110</span>,<span class="number">20</span>))</span><br><span class="line">        b = wx.Button(parent=panel, label=<span class="string">&#x27;OK&#x27;</span>, pos=(<span class="number">100</span>, <span class="number">50</span>))</span><br><span class="line">        <span class="comment"># bind event，wx.EVT_BUTTON is the kind of event(按钮单击事件), on_click is event handing </span></span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, b)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># create a layout manager box vbox </span></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        <span class="comment"># add statictext into vbox</span></span><br><span class="line">        vbox.Add(self.statictext, proportion=<span class="number">1</span>, flag=wx.ALIGN_CENTER_HORIZONTAL|wx.FIXED_MINSIZE|wx.TOP, border=<span class="number">30</span>)</span><br><span class="line">        <span class="comment"># add button b into vbox</span></span><br><span class="line">        vbox.Add(b, proportion=<span class="number">1</span>, flag=wx.EXPAND|wx.BOTTOM, border=<span class="number">10</span>)</span><br><span class="line">        panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.statictext.SetLabelText(<span class="string">&quot;Hello, World.&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/4.png" alt="image.png"></p><ul><li>控件<ul><li><strong>wx.TextCtrl() 文本输入控件</strong></li><li><code>wx.TextCtrl(panel)</code></li><li><code>wx.TextCtrl(panel, style=wx.TE_PASSWORD)</code></li><li><code>wx.TextCtrl(panel, style=wx.TE_MULTILINE)</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;文本输入控件&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        tc1 = wx.TextCtrl(panel)</span><br><span class="line">        tc2 = wx.TextCtrl(panel, style=wx.TE_PASSWORD)</span><br><span class="line">        tc3 = wx.TextCtrl(panel, style=wx.TE_MULTILINE)</span><br><span class="line"></span><br><span class="line">        userid = wx.StaticText(panel, label=<span class="string">&quot;用户ID:&quot;</span>)</span><br><span class="line">        pwd = wx.StaticText(panel, label=<span class="string">&quot;密码:&quot;</span>)</span><br><span class="line">        content = wx.StaticText(panel, label=<span class="string">&quot;多行文本:&quot;</span>)</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(userid, flag=wx.EXPAND|wx.LEFT, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(tc1, flag=wx.EXPAND|wx.ALL, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(pwd, flag=wx.EXPAND|wx.LEFT, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(tc2, flag=wx.EXPAND|wx.ALL, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(content, flag=wx.EXPAND|wx.LEFT, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(tc3, flag=wx.EXPAND|wx.ALL, border=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set panel</span></span><br><span class="line">        panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.statictext.SetLabelText(<span class="string">&quot;Hello, World.&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/5.png" alt="image.png"></p><ul><li>复选框和单选按钮</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment"># user-defined windows MyFrame</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;复选框和单选按钮&#x27;</span>, size=(<span class="number">400</span>, <span class="number">300</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line"></span><br><span class="line">        st1 = wx.StaticText(panel, label=<span class="string">&quot;select one your favorite language&quot;</span>)</span><br><span class="line">        cb1 = wx.CheckBox(panel, <span class="built_in">id</span>=<span class="number">1</span>, label=<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">        cb2 = wx.CheckBox(panel, <span class="built_in">id</span>=<span class="number">2</span>, label=<span class="string">&quot;Java&quot;</span>)</span><br><span class="line">        cb2.SetValue(<span class="literal">True</span>) <span class="comment"># 设置cb2初始状态为选中</span></span><br><span class="line">        cb3 = wx.CheckBox(panel, <span class="built_in">id</span>=<span class="number">3</span>, label=<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">        self.Bind(wx.EVT_CHECKBOX, self.on_checkbox_click, <span class="built_in">id</span>=<span class="number">1</span>, id2=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        st2 = wx.StaticText(panel, label=<span class="string">&quot;选择性别:&quot;</span>)</span><br><span class="line">        radio1 = wx.RadioButton(panel, <span class="built_in">id</span>=<span class="number">4</span>, label=<span class="string">&quot;男&quot;</span>, style=wx.RB_GROUP)</span><br><span class="line">        radio2 = wx.RadioButton(panel, <span class="built_in">id</span>=<span class="number">5</span>, label=<span class="string">&quot;女&quot;</span>)</span><br><span class="line">        self.Bind(wx.EVT_CHECKBOX, self.on_radio1_click, <span class="built_in">id</span>=<span class="number">4</span>, id2=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        hbox1 = wx.BoxSizer()</span><br><span class="line">        hbox1.Add(st1, flag=wx.Left|wx.Right, border=<span class="number">5</span>)</span><br><span class="line">        hbox1.Add(cb1)</span><br><span class="line">        hbox1.Add(cb2)</span><br><span class="line">        hbox1.Add(cb3)</span><br><span class="line"></span><br><span class="line">        hbox2 = wx.BoxSizer()</span><br><span class="line">        hbox2.Add(st2, flag=wx.Left|wx.Right, border=<span class="number">5</span>)</span><br><span class="line">        hbox2.Add(radio1)</span><br><span class="line">        hbox2.Add(radio2)</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(hbox1, flag=wx.ALL, border=<span class="number">10</span>)</span><br><span class="line">        vbox.Add(hbox2, flag=wx.ALL, border=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set panel</span></span><br><span class="line">        panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_checkbox_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        cb = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;选择<span class="subst">&#123;cb.GetLabel()&#125;</span>，状态<span class="subst">&#123;event.IsChecked()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_radio1_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        rb = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第一组<span class="subst">&#123;rb.GetLabel()&#125;</span>被选中&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/6.png" alt="image.png"></p><ul><li>列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&quot;列表&quot;</span>, size=(<span class="number">350</span>, <span class="number">175</span>))</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line"></span><br><span class="line">        st1 = wx.StaticText(panel, label=<span class="string">&quot;选择你喜欢的编程语言：&quot;</span>)</span><br><span class="line">        list1 = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>]</span><br><span class="line">        lb1 = wx.ListBox(panel, choices=list1, style=wx.LB_SINGLE)</span><br><span class="line">        self.Bind(wx.EVT_LISTBOX, self.on_listbox1, lb1)</span><br><span class="line"></span><br><span class="line">        st2 = wx.StaticText(panel, label=<span class="string">&quot;选择你喜欢吃的水果：&quot;</span>)</span><br><span class="line">        list2 = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;香蕉&quot;</span>]</span><br><span class="line">        lb2 = wx.ListBox(panel, choices=list2, style=wx.LB_EXTENDED)</span><br><span class="line">        self.Bind(wx.EVT_LISTBOX, self.on_listbox2, lb2)</span><br><span class="line"></span><br><span class="line">        hbox1 = wx.BoxSizer()</span><br><span class="line">        hbox1.Add(st1, proportion=<span class="number">1</span>, flag=wx.LEFT|wx.RIGHT, border=<span class="number">5</span>)</span><br><span class="line">        hbox1.Add(lb1, proportion=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        hbox2 = wx.BoxSizer()</span><br><span class="line">        hbox2.Add(st2, proportion=<span class="number">1</span>, flag=wx.LEFT|wx.RIGHT, border=<span class="number">5</span>)</span><br><span class="line">        hbox2.Add(lb2, proportion=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(hbox1, flag=wx.ALL|wx.EXPAND, border=<span class="number">5</span>)</span><br><span class="line">        vbox.Add(hbox2, flag=wx.ALL|wx.EXPAND, border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        panel.SetSizer(vbox)   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_listbox1</span>(<span class="params">self, event</span>):</span><br><span class="line">        listbox = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选择（0)&quot;</span>.<span class="built_in">format</span>(listbox.GetSelection()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_listbox2</span>(<span class="params">self, event</span>):</span><br><span class="line">        listbox = event.GetEventObject()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选择（0)&quot;</span>.<span class="built_in">format</span>(listbox.GetSelections()))   </span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/7.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="literal">None</span>, title=<span class="string">&#x27;静态图片控件&#x27;</span>, size=(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        self.panel = wx.Panel(parent=self)</span><br><span class="line"></span><br><span class="line">        self.bmps = [</span><br><span class="line">            wx.Bitmap(<span class="string">&#x27;T:/MY WORLD/chasing stars/一起走花路吧.png&#x27;</span>, wx.BITMAP_TYPE_ANY),</span><br><span class="line">            wx.Bitmap(<span class="string">&#x27;T:/MY WORLD/chasing stars/海源1.png&#x27;</span>, wx.BITMAP_TYPE_ANY),</span><br><span class="line">            wx.Bitmap(<span class="string">&#x27;T:/MY WORLD/chasing stars/一起走花路吧.png&#x27;</span>, wx.BITMAP_TYPE_ANY)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        b1 = wx.Button(self.panel, <span class="built_in">id</span>=<span class="number">1</span>, label=<span class="string">&#x27;Button1&#x27;</span>)</span><br><span class="line">        b2 = wx.Button(self.panel, <span class="built_in">id</span>=<span class="number">2</span>, label=<span class="string">&#x27;Button2&#x27;</span>)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, <span class="built_in">id</span>=<span class="number">1</span>, id2=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.image = wx.StaticBitmap(self.panel, bitmap=self.bmps[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line">        vbox.Add(b1, proportion=<span class="number">1</span>, flag=wx.EXPAND)</span><br><span class="line">        vbox.Add(b2, proportion=<span class="number">1</span>, flag=wx.EXPAND)</span><br><span class="line">        vbox.Add(self.image, proportion=<span class="number">3</span>, flag=wx.EXPAND)</span><br><span class="line"></span><br><span class="line">        self.panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        event_id = event.GetId()</span><br><span class="line">        <span class="keyword">if</span> event_id == <span class="number">1</span>:</span><br><span class="line">            self.image.SetBitmap(self.bmps[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.image.SetBitmap(self.bmps[<span class="number">2</span>])</span><br><span class="line">        self.panel.Layout()</span><br><span class="line"></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line">frm = MyFrame()</span><br><span class="line">frm.Show()</span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/8.png" alt="image.png"></p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;发送GET请求&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://agoni66.github.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">    data = response.read()</span><br><span class="line">    json_data = data.decode()</span><br><span class="line">    <span class="built_in">print</span>(json_data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;发送POST请求&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://agoni66.github.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">params_dict = &#123;<span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>:<span class="string">&#x27;10&#x27;</span>&#125;</span><br><span class="line">params_str = urllib.parse.urlencode(params_dict)</span><br><span class="line"><span class="built_in">print</span>(params_str)</span><br><span class="line"></span><br><span class="line">params_bytes = params_str.encode()</span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">    data = response.read()</span><br><span class="line">    json_data = data.decode()</span><br><span class="line">    <span class="built_in">print</span>(json_data)</span><br></pre></td></tr></table></figure><ul><li>JSON(JavaScript Object Notation)</li><li>JSON文档<ul><li>JSON对象</li><li>JSON数组</li></ul></li><li>下载文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;下载文件&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://wkphoto.cdn.bcebos.com/37d3d539b6003af3156af430252ac65c1138b689.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> response:</span><br><span class="line">    data = response.read()</span><br><span class="line">    f_name = <span class="string">&#x27;download.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(f_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;下载文件成功&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>JSON对象解码——字典</li><li>JSON数组解码——列表</li></ul><h2 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h2><ul><li>数据类型<ul><li>INTEGER 有符号的整数类型</li><li>REAL 浮点类型</li><li>TEXT 字符串类型（UTF-8、UTF-16）</li><li>BLOB 二进制大对象类型，能够存放任意二进制数据</li></ul></li><li>Python数据类型与SQLite数据类型的映射</li></ul><div class="table-container"><table><thead><tr><th>Python数据类型</th><th>SQLite数据类型</th></tr></thead><tbody><tr><td>None</td><td>NULL</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>float</td><td>REAL</td></tr><tr><td>str</td><td>TEXT</td></tr><tr><td>bytes</td><td>BLOB</td></tr></tbody></table></div><ul><li>数据库连接对象Connection<ul><li>connect(database) 打开数据库连接，database是数据库的文件路径</li><li>close() 关闭数据库连接</li><li>commit() 提交数据库事务</li><li>rollback() 回滚数据库事务</li><li>cursor() 获得Cursor游标对象</li></ul></li><li>游标cursor操作<ul><li>execute(sql[, parameters]) 执行一条SQL语句</li><li>execute(sql[, seq_of_params]) 执行批量SQL语句</li><li>fetchone() 从结果中返回只有一条记录的序列</li><li>fetchmany(size=cursor.arraysize) 从结果中返回小于等于size记录数的序列</li><li>fetchall() 从结果集中返回所有数据</li></ul></li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li><p>线程模块——threading</p><ul><li><code>active_count()</code> 返回当前处于活动状态的线程个数</li><li><code>current_thread()</code> 返回当前的线程对象</li><li><code>main_thread()</code> 返回主线程对象</li><li><code>Thread(target=None, name=None,args=())</code> 创建线程Thread对象<ul><li>target参数指向线程体函数</li><li>name参数可以设置线程名</li><li>args是为线程体函数提供的参数</li></ul></li><li><p><strong>有休眠和没有休眠的区别</strong></p><p><img src="../img/看漫画学Python/9.png" alt="image.png"></p></li></ul></li><li><p>自定义线程函数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程体函数，该函数可以使得当前线程休眠两秒。只有当前线程休眠,其他线程才有机会执行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_body</span>():</span><br><span class="line">    <span class="comment"># 当前线程对象</span></span><br><span class="line">    t = threading.current_thread()</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># 当前线程名</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#123;0&#125;次执行线程&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(n, t.name))</span><br><span class="line">        <span class="comment"># 线程休眠</span></span><br><span class="line">        <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;线程&#123;0&#125;执行完成!&#x27;</span>.<span class="built_in">format</span>(t.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 创建线程对象t1</span></span><br><span class="line">t1 = threading.Thread(target=thread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象t2</span></span><br><span class="line">t2 = threading.Thread(target=thread_body, name=<span class="string">&#x27;MyThread&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t1</span></span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t2</span></span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><ul><li>自定义线程类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义线程类的构造方法, name参数是线程名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name=name)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 线程体函数，重写父类Thread的run()方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 当前线程对象</span></span><br><span class="line">        t = threading.current_thread()</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="comment"># 当前线程名</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第&#123;0&#125;次执行线程&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(n, t.name))</span><br><span class="line">            <span class="comment"># 线程休眠</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;线程&#123;0&#125;执行完成!&#x27;</span>.<span class="built_in">format</span>(t.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 通过自定义线程类，创建线程对象</span></span><br><span class="line"><span class="comment"># 创建线程对象t1</span></span><br><span class="line">t1 = SmallThread()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象t2</span></span><br><span class="line">t2 = SmallThread(name=<span class="string">&#x27;MyThread&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t1</span></span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t2</span></span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><ul><li>线程管理<ul><li>线程创建</li><li>线程启动</li><li>线程休眠</li><li>等待线程结束</li><li>线程停止</li></ul></li><li>等待线程结束</li></ul><p><code>join(timeout=None)</code> timeout用于设置超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 共享变量</span></span><br><span class="line">value = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程体函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thread_body</span>():</span><br><span class="line">    <span class="comment"># 在子线程体中修改变量value的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t1子线程开始...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;t1子线程执行...&#x27;</span>)</span><br><span class="line">        value.append(n)</span><br><span class="line">        <span class="comment"># 线程休眠</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;t1子线程结束。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程开始执行...</span></span><br><span class="line"><span class="comment"># 创建线程对象t1</span></span><br><span class="line">t1 = threading.Thread(target=thread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程t1</span></span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程被阻塞，等待t1线程结束</span></span><br><span class="line">t1.join()</span><br><span class="line"></span><br><span class="line"><span class="comment"># t1线程结束，继续执行，访问并输出变量value</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;value=&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程继续执行...&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/10.png" alt="image.png"></p><ul><li>线程停止</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程停止变量</span></span><br><span class="line">isrunning = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作线程体函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">workthread_body</span>():</span><br><span class="line">    <span class="keyword">global</span> isrunning</span><br><span class="line">    <span class="keyword">while</span> isrunning:</span><br><span class="line">        <span class="comment"># 线程开始工作</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作线程执行中...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 线程休眠</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作线程结束。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制线程体函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">controlthread_body</span>():</span><br><span class="line">    <span class="keyword">global</span> isrunning</span><br><span class="line">    <span class="keyword">while</span> isrunning:</span><br><span class="line">        <span class="comment"># 从键盘输入停止指令exit</span></span><br><span class="line">        command = <span class="built_in">input</span>(<span class="string">&#x27;请输入停止指令:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">            isrunning = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;控制线程结束。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 创建工作线程对象workthread</span></span><br><span class="line">workthread = threading.Thread(target=workthread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程workthread</span></span><br><span class="line">workthread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建控制线程对象controlthread</span></span><br><span class="line">controlthread = threading.Thread(target=controlthread_body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程controlthread</span></span><br><span class="line">controlthread.start()</span><br></pre></td></tr></table></figure><p><img src="../img/看漫画学Python/11.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">再次启航</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="工具" scheme="https://agoni66.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="科普" scheme="https://agoni66.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
    <category term="漫画" scheme="https://agoni66.github.io/tags/%E6%BC%AB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>趣话计算机底层技术</title>
    <link href="https://agoni66.github.io/posts/1000011.html"/>
    <id>https://agoni66.github.io/posts/1000011.html</id>
    <published>2024-10-31T17:00:00.000Z</published>
    <updated>2024-11-01T16:57:47.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-中央处理器CPU"><a href="#第一章-中央处理器CPU" class="headerlink" title="第一章 中央处理器CPU"></a>第一章 中央处理器CPU</h1><h3 id="1-1-1-逻辑门"><a href="#1-1-1-逻辑门" class="headerlink" title="1.1.1 逻辑门"></a>1.1.1 逻辑门</h3><p><img src="../img/趣话计算机底层技术/0001.png" alt=""></p><h3 id="1-1-2-加法器"><a href="#1-1-2-加法器" class="headerlink" title="1.1.2 加法器"></a>1.1.2 加法器</h3><p><img src="../img/趣话计算机底层技术/0002.png" alt=""></p><h3 id="1-1-3-算术逻辑单元ALU"><a href="#1-1-3-算术逻辑单元ALU" class="headerlink" title="1.1.3 算术逻辑单元ALU"></a>1.1.3 算术逻辑单元ALU</h3><ul><li>既可以<strong>算术运算</strong>，也可以<strong>逻辑运算</strong></li><li>本质都是通过输入控制的<strong>开关</strong></li><li>乘法转换成加法</li><li>除法转换成减法</li><li>减法转换成加法</li></ul><h3 id="1-2-1-指令集"><a href="#1-2-1-指令集" class="headerlink" title="1.2.1 指令集"></a>1.2.1 指令集</h3><ul><li><strong>指令机器码</strong> CPU支持的所有指令的编码（比特流）</li><li><strong>CPU的指令集</strong> 所有的指令</li><li><strong>RISC</strong> 一条指令只完成一个基本操作的精简指令集，指令长度基本固定</li><li><strong>CISC</strong> 一个指令可以完成一个复杂功能的复杂指令集，指令长度基本不固定</li></ul><h3 id="1-2-2-寄存器"><a href="#1-2-2-寄存器" class="headerlink" title="1.2.2 寄存器"></a>1.2.2 寄存器</h3><ul><li><strong>原因</strong> 存储在内存不安全，读写效率慢</li><li><strong>寄存器</strong> CPU内部保存数据的存储电路</li><li>有指令操作寄存器</li></ul><h3 id="1-2-3-汇编语言"><a href="#1-2-3-汇编语言" class="headerlink" title="1.2.3 汇编语言"></a>1.2.3 汇编语言</h3><ul><li><strong>汇编语言</strong> 用<strong>助记符</strong>来编程的语言</li></ul><h3 id="1-2-4-高级语言"><a href="#1-2-4-高级语言" class="headerlink" title="1.2.4 高级语言"></a>1.2.4 高级语言</h3><ul><li><strong>高级语言</strong> 接近人类的自然语言来编程的语言</li><li><strong>编译器</strong></li><li><strong>编译</strong> 高级语言转换成机器指令</li></ul><h3 id="1-2-5-指令执行过程"><a href="#1-2-5-指令执行过程" class="headerlink" title="1.2.5 指令执行过程"></a>1.2.5 指令执行过程</h3><ol><li>读取指令</li><li>指令译码</li><li>指令执行</li><li>数据会写</li></ol><h3 id="1-3-1-指令流水集"><a href="#1-3-1-指令流水集" class="headerlink" title="1.3.1 指令流水集"></a>1.3.1 指令流水集</h3><ul><li>改进执行指令的流程，提升性能</li></ul><p><img src="../img/趣话计算机底层技术/0003.png" alt=""></p><h3 id="1-3-2-流水线的级数"><a href="#1-3-2-流水线的级数" class="headerlink" title="1.3.2 流水线的级数"></a>1.3.2 流水线的级数</h3><ul><li>将指令执行过程拆分更细</li><li>进一步减少CPU电路资源的浪费</li><li>但是级数过多会增加额外的电路设备，产生额外的功耗，造成额外的时间开销</li></ul><h3 id="1-3-3-流水线里的冒险"><a href="#1-3-3-流水线里的冒险" class="headerlink" title="1.3.3 流水线里的冒险"></a>1.3.3 流水线里的冒险</h3><ul><li><strong>原因</strong><ul><li>访问同一电路（内存、输出）导致流水线停顿</li><li>指令所需数据来自前一指令</li></ul></li><li><strong>结构冒险</strong> 流水线中出现硬件资源竞争</li><li><strong>数据冒险</strong> 流水线中后面的指令需要等待前面指令完成数据的读写</li><li><strong>控制冒险</strong> 流水线需要根据前面的指令的执行结果来决定下一步去哪里执行</li></ul><h3 id="1-4-缓存"><a href="#1-4-缓存" class="headerlink" title="1.4 缓存"></a>1.4 缓存</h3><ul><li><strong>缓存</strong> 保存从内存的数据和指令</li><li><strong>缓存行</strong> 管理内存的单元</li><li><strong>取模映射</strong> 内存中的数据只能存在缓存中的固定位置，方便存储和访问</li><li><strong>二路组相联</strong> 每个cache分成两组，即两个缓存行<ul><li>降低冲突——允许多个具有相同索引但不同标记的数据同时被缓存</li><li>提高命中率——每个组有两个缓存行，它可以存储更多的数据</li></ul></li><li><strong>指令缓存</strong> 存储指令</li><li><strong>数据缓存</strong> 存储数据</li><li><strong>三级缓存技术</strong><ul><li>一级缓存</li><li>二级缓存</li><li>三级缓存（<strong>CPU多核共用</strong>）</li></ul></li></ul><h3 id="1-5-多核缓存不一致问题"><a href="#1-5-多核缓存不一致问题" class="headerlink" title="1.5 多核缓存不一致问题"></a>1.5 多核缓存不一致问题</h3><ul><li><strong>原子操作</strong> 不可切分的动作</li><li><strong>片内总线</strong> 多核之间进行信息沟通</li><li><strong>缓存一致性协议（缓存行的四种状态）</strong><ul><li>已修改(Modified, M)</li><li>独占(Exclusive, E)</li><li>共享(Shared, S)</li><li>无效(Invalid, I)</li></ul></li></ul><p><img src="../img/趣话计算机底层技术/0004.png" alt=""></p><ul><li>规定一个内存被多个核缓存，不允许多个核同时修改缓存❎</li></ul><h3 id="1-6-指令乱序执行"><a href="#1-6-指令乱序执行" class="headerlink" title="1.6 指令乱序执行"></a>1.6 指令乱序执行</h3><ul><li>数据冒险与流水线停顿</li><li><strong>数据冒险</strong> 流水线中后面的指令需要等待前面指令完成数据的读写</li><li><strong>乱序执行</strong> 先执行不需要依赖前面数据的指令，打乱指令执行的顺序</li><li><strong>保留站</strong> 一个缓冲区登记指令是否有数据依赖、具体依赖什么数据、需要用到的执行部件有哪些、当前是否繁忙、以及需要读写的寄存器</li></ul><p><img src="../img/趣话计算机底层技术/0005.png" alt=""></p><h3 id="1-7-控制冒险与跳转指令"><a href="#1-7-控制冒险与跳转指令" class="headerlink" title="1.7 控制冒险与跳转指令"></a>1.7 控制冒险与跳转指令</h3><ul><li><strong>静态预测</strong> 不管前面结果，直接<strong>假定分支不会跳转</strong>继续把后续的指令载入流水线处理</li><li><strong>分支预测</strong> 记录最近跳转的次数，根据最近多次跳转的结果再来预测</li></ul><h3 id="1-8-一条指令同时处理多个数据"><a href="#1-8-一条指令同时处理多个数据" class="headerlink" title="1.8 一条指令同时处理多个数据"></a>1.8 一条指令同时处理多个数据</h3><ul><li><strong>MMO〜MM7</strong> 64位寄存器，同时存储两个32位的整数和8个8位的整数（借用用浮点数运算单元FPU的寄存器）</li><li><strong>XMMO〜XMM7</strong> 128位寄存器</li><li><strong>单指令多数据流SIMD</strong> 在一条指令中同时处理多个数据的技术</li></ul><h3 id="1-9-一个核同时执行两个线程"><a href="#1-9-一个核同时执行两个线程" class="headerlink" title="1.9 一个核同时执行两个线程"></a>1.9 一个核同时执行两个线程</h3><ul><li><strong>资源闲置</strong> 比如整数运算时浮点数运算电路会闲置</li><li><strong>超线程</strong> 单线程改多线程，效率不能翻倍但有提升</li></ul><p><img src="../img/趣话计算机底层技术/0006.png" alt=""></p><h3 id="1-10-管理内存"><a href="#1-10-管理内存" class="headerlink" title="1.10 管理内存"></a>1.10 管理内存</h3><ul><li><strong>分段式存储管理</strong> 寄存器16位，最大64KB的段</li><li><strong>访问内存</strong> 段地址+段内偏移地址</li><li><strong>OS划分时间片</strong></li><li><strong>虚拟内存</strong></li><li><strong>分页交换</strong> 把暂时不用的页面放到硬盘，使用页错误中断换回页面</li></ul><h3 id="1-11-地址翻译"><a href="#1-11-地址翻译" class="headerlink" title="1.11 地址翻译"></a>1.11 地址翻译</h3><ul><li><strong>内存管理单元MMU</strong></li><li><strong>页目录索引</strong></li><li><strong>页表索引</strong></li><li><strong>页内偏移</strong></li><li><strong>地址翻译</strong> 从CR3寄存器中取出页目录地址，根据页目录索引找到页表，再根据页表索引找到物理内存页面，最后根据页内偏移，完成寻址</li><li><strong>地址翻译缓存</strong> 把翻译的虚拟地址和物理地址的映射关系放入缓存（局部性原理）</li><li><strong>地址转换后援缓冲器（快表）TLB</strong></li></ul><h3 id="1-12-GPU"><a href="#1-12-GPU" class="headerlink" title="1.12 GPU"></a>1.12 GPU</h3><ul><li><strong>多计算电路，少逻辑控制电路</strong></li><li><strong>SIMT并行计算</strong> （批量计算算法固定）</li></ul><p><img src="../img/趣话计算机底层技术/0007.png" alt=""></p><ul><li><strong>多ALU and 多执行上下文</strong> （充分利用计算资源，不让ALU闲置）</li></ul><h1 id="第二章-存储设备"><a href="#第二章-存储设备" class="headerlink" title="第二章 存储设备"></a>第二章 存储设备</h1><h3 id="2-1-缓存为什么快"><a href="#2-1-缓存为什么快" class="headerlink" title="2.1 缓存为什么快"></a>2.1 缓存为什么快</h3><ul><li><strong>内存</strong> 动态随机存储器DRAM（1个DRAM单元——一个MOS晶体管和一个电容，可以存储1比特的信息）</li><li><strong>缓存</strong> 静态随机存储器SRAM</li><li>缓存因为为没有依靠电容充放电，全都是晶体管的导通与断开，比起内存的DRAM速度要快得多</li><li>缺点 成本高、占用空间大</li></ul><h3 id="2-2-内存条"><a href="#2-2-内存条" class="headerlink" title="2.2 内存条"></a>2.2 内存条</h3><ul><li><strong>存储芯片</strong> 黑乎乎的东西8～16个</li><li><strong>PCB电路板</strong></li><li><strong>金手指</strong> 连接主板插槽的接触点</li><li><strong>RAM</strong> 随机存储器</li><li><strong>动态数据刷新</strong> DRAM“漏电”电容的电荷消失，需要周期性充电刷新来维持数据的稳定</li><li><strong>内存控制器</strong></li><li>指定芯片、分片、格子的行地址和列地址来访问比特位</li><li><strong>读写单元</strong> 一字节8个比特位</li></ul><h3 id="2-3-多个CPU共同访问内存"><a href="#2-3-多个CPU共同访问内存" class="headerlink" title="2.3 多个CPU共同访问内存"></a>2.3 多个CPU共同访问内存</h3><ul><li>非一致性内存访问NUMA（Non Uniform Memory Access）<ul><li>16核拆分成两个CPU，组成两个NUMA节点Node</li><li>每个节点直接连接一部分内存</li><li><strong>内连接（inter-connect）通道</strong> 两个CPU之间的通道</li><li><strong>本地访问</strong></li><li><strong>远程访问</strong></li><li>远程访问效率高于页面置换，内存不够时优先远程访问</li></ul></li></ul><h3 id="2-4-硬盘"><a href="#2-4-硬盘" class="headerlink" title="2.4 硬盘"></a>2.4 硬盘</h3><ul><li><strong>金属磁粒</strong> 机械硬盘盘面存储数据的东西</li></ul><p><img src="../img/趣话计算机底层技术/0008.png" alt=""></p><ul><li><strong>读磁头</strong> 通过电磁检测磁粒的极性分辨0和1</li><li><strong>写磁头</strong> 通过磁场改变单元格中金属磁粒的极性，设定成0或1</li></ul><p><img src="../img/趣话计算机底层技术/0009.png" alt=""></p><h3 id="2-5-磁盘管理"><a href="#2-5-磁盘管理" class="headerlink" title="2.5 磁盘管理"></a>2.5 磁盘管理</h3><ul><li><strong>块block</strong> 读写的基本单位，把连续的扇区当成一个整体</li><li><strong>块位图</strong> 记录哪些块是空闲的，哪些块是被占用的（记录在第一个块）</li><li><strong>inode</strong> 记录每一个文件的大小、位置、权限、时间等，每一个都是128字节，并且每一个都有一个专属号码在<strong>inode表</strong></li></ul><p><img src="../img/趣话计算机底层技术/0010.png" alt=""></p><ul><li><strong>目录</strong></li><li><strong>根目录</strong></li><li><strong>描述符</strong> 记录inode表、块位图、inode位图的位置信息</li><li><strong>超级块</strong> 记录硬盘总共用了多少块，还剩多少块</li></ul><p><img src="../img/趣话计算机底层技术/0011.png" alt=""></p><ul><li><strong>启动扇区DBR</strong> 装载引导程序</li><li><strong>主引导扇区MBR</strong> 记录所有的分区信息，位于硬盘的第一个扇区</li></ul><p><img src="../img/趣话计算机底层技术/0012.png" alt=""></p><h1 id="第三章-数据的输入与输出"><a href="#第三章-数据的输入与输出" class="headerlink" title="第三章 数据的输入与输出"></a>第三章 数据的输入与输出</h1><h3 id="3-1-总线"><a href="#3-1-总线" class="headerlink" title="3.1 总线"></a>3.1 总线</h3><ul><li><strong>总线</strong> 包含传输数据的数据总线、传输地址的地址总线和进行控制管理的控制总线</li><li><strong>总线控制器</strong> 统一管理总线</li><li><strong>北桥芯片</strong> 集成内存控制器、总线控制器、图像控制器（访问内存和显卡）高速设备</li><li><strong>南桥芯片</strong> 集成各种IO外部设备的控制器（低速设备）</li><li>一条总线 → 多个层级总线组成的总线系统</li><li>NOW CPU集成内存控制器和图像控制器 重新变回一条总线</li></ul><p><img src="../img/趣话计算机底层技术/0013.png" alt=""></p><h3 id="3-2-中断"><a href="#3-2-中断" class="headerlink" title="3.2 中断"></a><strong>3.2 中断</strong></h3><ul><li><strong>eflags寄存器</strong> 存储当前CPU是否可以被中断的值</li><li><strong>不可屏蔽的中断NMI</strong></li><li><strong>可编程中断控制器PIC</strong><ul><li>中断向量</li><li><strong>中断描述符表IDT</strong> 记录处理中断对应的函数地址</li><li><strong>idtr寄存器</strong> 指向中断描述符表IDT的内存地址</li><li><strong>异常处理</strong> 也是这个表，但异常需要立即处理</li><li>异常是同步的，中断是异步的</li></ul></li><li><strong>高级可编程中断控制器APIC</strong><ul><li>IO APIC</li><li>Local APIC</li><li><strong>处理器间中断Inter-Processor Interrupt IPI</strong></li></ul></li><li><strong>中断亲和性</strong></li><li><strong>亲和寄存器</strong></li></ul><h3 id="3-3-计算机启动"><a href="#3-3-计算机启动" class="headerlink" title="3.3 计算机启动"></a>3.3 计算机启动</h3><ul><li><strong>自检工作</strong> 所有寄存器全部重置，如有错误记录到EAX寄存器</li><li><strong>引导处理器BSP</strong></li><li><strong>主引导记录MBR</strong> 512字节，检测最后两个合法字节是0x55和0xAA</li></ul><h3 id="3-4-数据搬运"><a href="#3-4-数据搬运" class="headerlink" title="3.4 数据搬运"></a>3.4 数据搬运</h3><ul><li><strong>可编程输入输出模式PIO</strong> 执行in和out两条指令对外部设备读写数据</li><li><strong>直接存储器访问DMA</strong> 设置寄存器传输哪里的数据，从哪里到哪里，长度是多少</li><li><strong>DMA控制器DMAC</strong></li></ul><h3 id="3-5-零拷贝技术"><a href="#3-5-零拷贝技术" class="headerlink" title="3.5 零拷贝技术"></a>3.5 零拷贝技术</h3><p><img src="../img/趣话计算机底层技术/0014.png" alt=""></p><ul><li>零拷贝技术 把从硬盘读取的数据缓冲区地址和长度给网络socket描述符</li></ul><p><img src="../img/趣话计算机底层技术/0015.png" alt=""></p><h3 id="3-6-网卡"><a href="#3-6-网卡" class="headerlink" title="3.6 网卡"></a>3.6 网卡</h3><ul><li><strong>集线器Hub</strong> 收到的信号做一个增强处理后发送给所有端口</li><li><strong>CSMA/CD 载波侦听多路访问/冲突检测</strong></li><li>以太网帧长度不能低于64字节，这样就算在最远两端发生的碰撞冲突都能及时传递回去被检测到</li></ul><p><img src="../img/趣话计算机底层技术/0016.png" alt=""></p><ul><li><strong>ARP 地址解析协议</strong> 发送目的地址是FF:FF:FE:FF:FF:FF的广播，匹配的发送回去</li><li>ARP欺骗</li><li>网卡的<strong>混杂模式</strong> 把总线的全部数据帧抓取交给CPU处理</li><li><strong>交换机</strong> 记录对应的MAC地址和端口号，精准发送</li><li>全双工通信</li><li>冲突域</li><li><strong>数据帧校验</strong> 对帧检验序列FCS进行循环冗余码校验<strong>CRC</strong></li><li><strong>RX FIFO队列</strong> 网卡内部的接收队列缓冲区</li><li><strong>DMA控制器</strong> 传输网卡的数据</li><li><strong>硬中断</strong> 硬中断需要快速完成</li><li><strong>软中断</strong> 硬中断无法快速完成的调用软中断处理函数进行处理</li><li><strong>NAPI</strong> 数据包过多采用中断＋轮询<ul><li>第一部分 硬中断通知，关中断，但不处理数据包</li><li>第二部分 软中断轮询处理，不需要关中断</li></ul></li><li><strong>Netfilter</strong> Linux内核的一个子系统，允许实现各种与网络相关的操作</li><li><strong>协议栈</strong></li></ul><p><img src="../img/趣话计算机底层技术/0017.png" alt=""></p><h3 id="3-7-直接收发数据包"><a href="#3-7-直接收发数据包" class="headerlink" title="3.7 直接收发数据包"></a>3.7 直接收发数据包</h3><ul><li>每次中断都要保存上下文，从用户态切换到内核态</li><li>线程亲和性 网络监控软件的工作线程独占CPU核心，解决缓存失效问题</li><li><strong>DPDK</strong><ul><li>通过操作系统的用户态模式驱动UIO，在用户态通过轮询的方式读取网卡的数据包</li><li>直接在用户态读取，不用把数据包在内核态空间和用户态空间搬来搬去</li><li>读取后直接分析，不用走系统协议栈和netfilter</li></ul></li></ul><p><img src="../img/趣话计算机底层技术/0018.png" alt=""></p><ul><li>大页内存技术 支持2MB和1GB管理内存页面</li><li><strong>Interrupt DPDK</strong><ul><li>没有数据包处理时就进入睡眠，改为中断通知</li><li>共享CPU核，不独占CPU</li><li>DPDK线程有更高的调度优先级</li><li>数据包多后变轮询模式，灵活切换</li></ul></li></ul><h1 id="第四章-操作系统"><a href="#第四章-操作系统" class="headerlink" title="第四章 操作系统"></a>第四章 操作系统</h1><h3 id="4-1-控制程序"><a href="#4-1-控制程序" class="headerlink" title="4.1 控制程序"></a>4.1 控制程序</h3><ul><li><strong>多道程序处理</strong></li><li><strong>时间分片</strong></li><li><strong>时钟中断</strong></li><li><strong>任务状态</strong><ul><li><strong>创建</strong></li><li><strong>就绪</strong></li><li><strong>执行</strong></li><li><strong>阻塞</strong></li><li><strong>终止</strong></li></ul></li></ul><p><img src="../img/趣话计算机底层技术/0019.png" alt=""></p><ul><li><strong>优先级</strong></li><li><strong>抢占</strong> 高优先级程序出现时，低优先级的程序未完成被剥夺执行机会</li><li><strong>多核时代 → 操作系统</strong></li></ul><h3 id="4-2-进程"><a href="#4-2-进程" class="headerlink" title="4.2 进程"></a>4.2 进程</h3><ul><li>1号进程init</li><li><strong>PID</strong> 进程的身份证</li><li><strong>访问越界</strong></li><li><strong>内核地址空间</strong> 操作系统内核运行的空间</li><li><strong>进程调度</strong></li><li>一个进程里可以同时存在多个执行流，也就是多个线程，每一个线程都有自己的执行上下文和堆栈，互不影响</li><li><strong>线程</strong> 操作系统调度执行的单位</li><li><strong>并发执行</strong> 运行多个不同的线程</li></ul><h3 id="4-3-线程"><a href="#4-3-线程" class="headerlink" title="4.3 线程"></a>4.3 线程</h3><ul><li><strong>完全公平调度算法CFS</strong> 红黑树管理线程</li><li>只要进程的其中一个线程挂掉，所有线程都会被结束掉</li><li><strong>权重</strong> 权重越高的线程越优先被运行</li><li><strong>等待队列</strong></li></ul><h3 id="4-4-系统调用"><a href="#4-4-系统调用" class="headerlink" title="4.4 系统调用"></a>4.4 系统调用</h3><ul><li><strong>内核地址空间</strong> 操作系统内核所在的内存区域</li><li><strong>用户地址空间</strong> 应用程序访问的内存区域</li><li><strong>系统调用表</strong> sys_call_table</li></ul><p><img src="../img/趣话计算机底层技术/0020.png" alt=""></p><ul><li><strong>系统调用</strong> 操作系统将管理文件、内存、进程、线程、网络、硬件等的在内核地址空间操作封装成函数接口方便应用程序调用</li><li><strong>内核栈</strong> 线程有两个栈，一个在用户态地址空间，一个在内核态地址空间，内核栈会小很多</li><li><strong>syscall sysret 一对的</strong></li></ul><h3 id="4-5-异常处理"><a href="#4-5-异常处理" class="headerlink" title="4.5 异常处理"></a>4.5 异常处理</h3><ul><li><strong>中断描述符IDT</strong> 记录所有中断和异常需要处理的地方</li><li><strong>异常</strong> CPU在执行线程的代码指令时出现了错误</li><li>idtr寄存器记录中断描述符IDT</li><li><strong>信号投递</strong></li><li>触发异常时，CPU自动保存的现场（返回地址和一些其他关键寄存器的值）</li><li><strong>iret</strong>(interrept return) 专门用于被中断或异常打断的线程处理完毕后返回用户态地址空间</li></ul><h3 id="4-6-信号处理"><a href="#4-6-信号处理" class="headerlink" title="4.6 信号处理"></a>4.6 信号处理</h3><ul><li><strong>可靠信号和不可靠信号</strong></li><li><strong>进程的描述符task_struct</strong></li><li>进程不能直接调用这些信号处理函数</li></ul><p><img src="../img/趣话计算机底层技术/0021.png" alt=""></p><ul><li>调用<strong>sigprocmask函数</strong>屏蔽信号</li><li><strong>SIGKILL和SIGSTOP无法屏蔽</strong></li><li>一个进程实际就是一个线程组</li><li>task struct中原来的信号等待队列只存放各个线程自己的信号，另外再单独设置一个队列来存放进程的信号，让所有的线程共享</li><li>给线程投递信号（group=0 ）</li><li>给进程投递信号（group=1 ）</li><li>处理信号处理函数的表格是<strong>整个进程共享的</strong></li></ul><h3 id="4-7-锁"><a href="#4-7-锁" class="headerlink" title="4.7 锁"></a>4.7 锁</h3><ul><li><strong>原子操作</strong></li><li><strong>自旋锁</strong> 获取锁的时候线程会一直循环检查状态</li></ul><p><img src="../img/趣话计算机底层技术/0022.png" alt=""></p><ul><li><strong>互斥锁</strong> 获取锁的时候线程进入锁的等待队列，交出CPU执行权限进入睡眠，等待唤醒</li><li><strong>条件变量</strong>  等待条件变量的线程平时阻塞着，别的线程发现条件满足之后，就将条件变量激活</li><li><strong>信号量</strong> 升级版互斥锁，有计数器指定最多允许多少个线程同时获得它</li></ul><h3 id="4-8-Linux的权限管理"><a href="#4-8-Linux的权限管理" class="headerlink" title="4.8 Linux的权限管理"></a>4.8 Linux的权限管理</h3><ul><li><strong>文件打开的过程</strong></li></ul><p><img src="../img/趣话计算机底层技术/0023.png" alt=""></p><ul><li><strong>常规DAC检查</strong> genenric_permission函数</li><li>文件的归属用户id保存在文件索引inode</li><li>进程的用户id保存在进程的task_struct（task_struct-&gt;cred的fsuid）</li><li>Linux操作系统为所有文件针对所属的用户、所属的用户组和其他用户分别设置了访问权限</li><li><strong>读（Read ）、写（Write ）、可执行（Execute ）三种权限</strong></li><li><strong>UGO权限管理方式</strong> 权限信息和文件的归属信息记录在索引信息inode</li><li><strong>ACL访问控制列表</strong> 单独记录一些细粒度的权限信息（校验完进程所属用户和文件所属用户后，就会进入ACL的检查）</li><li><strong>Cgroup检查</strong> 是否有权访问对应的设备</li></ul><h3 id="4-9-Docker"><a href="#4-9-Docker" class="headerlink" title="4.9 Docker"></a>4.9 Docker</h3><ul><li><strong>轻量级的虚拟容器</strong> 只提供一个运行环境，不用运行一个操作系统，所有容器的系统内核与宿主机共用</li><li><strong>chroot和pivot_root</strong> 可以将进程看到的根目录修改为一个新位置（“伪造一个文件系统欺骗容器的进程”）</li><li>操作系统镜像文件和进程依赖的目录和文件通过联合挂载的方式，挂载到容器进程的根目录下，变成容器的rootfs，和真实系统目录一模一样</li><li><strong>命名空间namespace</strong> 划定一个个的命名空间，把进程划分到这些命名空间中，每个命名空间都是独立存在的，命名空间里的进程都无法看到空间之外的进程、用户、网络等信息</li><li><strong>Cgroup</strong> 划定一个个分组，然后限制每个分组能够使用的资源，比如内存的上限值、CPU的使用率、硬盘空间总量等（系统内核会自动检查和限制这些分组中的进程资源使用量）</li></ul><h1 id="第五章-系统编程"><a href="#第五章-系统编程" class="headerlink" title="第五章 系统编程"></a>第五章 系统编程</h1><h3 id="5-1-进程"><a href="#5-1-进程" class="headerlink" title="5.1 进程"></a>5.1 进程</h3><ul><li><strong>Linux 一切皆文件</strong></li><li><strong>fork函数</strong> 创建进程<ul><li>一次调用会返回两次</li><li>父进程返回进程号</li><li>子进程返回0</li><li>子进程和父进程共享内存空间</li></ul></li></ul><p><img src="../img/趣话计算机底层技术/0024.png" alt=""></p><ul><li><strong>写时拷贝（COW）机制</strong> 允许只读，写入会触发异常分配新页面</li><li>fork创建子进程只拷贝当前线程，不拷贝其他线程</li></ul><h3 id="5-2-线程的栈"><a href="#5-2-线程的栈" class="headerlink" title="5.2 线程的栈"></a>5.2 线程的栈</h3><ul><li><strong>后进先出LIFO</strong></li><li><strong>push和pop指令</strong> 压入数据和弹出数据</li><li><strong>call指令</strong> 调用函数（把call指令后面的那条指令地址保存到栈里面,等调用完函数后才能回来继续往后执行）</li><li><strong>ret指令</strong>  函数执行完后用来返回到调用它的地方的指令，CPU在执行ret指令的时候，就会把之前保存在这里的地址取出来，跳转过去</li><li>使用寄存器传参比使用线程栈传参快很多</li><li><code>ulimit -a</code> 查看线程栈的大小</li><li><strong>自动增长</strong> 缺页异常处理时发现是线程栈会分配新内存页面</li><li>但是如果超出上限的话会杀死进程</li><li><strong>内核栈</strong> 页面小（4KB～8KB）小心使用递归调用</li><li><strong>栈溢出攻击</strong> 将栈里保存的返回地址覆盖为恶意代码的地址</li></ul><h3 id="5-3-进程通信"><a href="#5-3-进程通信" class="headerlink" title="5.3 进程通信"></a>5.3 进程通信</h3><ul><li><strong>信号</strong> Linux的一种软中断通信机制，总共64种信号，只能通知不能传输数据</li><li><code>kill -l</code> 查看所有信号</li><li><strong>socket套接字</strong></li><li><strong>127.0.0.1</strong> 本地回环地址，数据在协议栈转发，可以在虚拟的回环网卡lo抓取数字</li></ul><p><img src="../img/趣话计算机底层技术/0025.png" alt=""></p><ul><li><strong>匿名管道</strong> 内核的一段缓冲区，提供读写两个端口，单向</li></ul><p><img src="../img/趣话计算机底层技术/0026.png" alt=""></p><ul><li>消息队列 内核的一个消息链表，可以指定类型</li><li><strong>命名管道</strong> 有名字就不限制进程通道，只要使用名字都可以打开管道通信</li></ul><p><img src="../img/趣话计算机底层技术/0027.png" alt=""></p><ul><li>共享内存</li></ul><h3 id="5-4-IO多路复用"><a href="#5-4-IO多路复用" class="headerlink" title="5.4 IO多路复用"></a>5.4 IO多路复用</h3><ul><li><strong>select函数</strong> 遍历所有文件描述符，挂入相关联设备的等待队列后进入阻塞，如果设备有消息提供回调函数通知Web服务进程</li><li>select使用位图数组，最多同时处理1024个文件描述符</li><li><strong>poll模型</strong> 使用链表存储，可容纳更多文件描述符</li><li><strong>epoll模型</strong><ul><li>采用红黑树管理监听的文件描述符方便查找</li><li>采用双向链表管理队列，不需要遍历所有的文件描述符</li></ul></li></ul><h3 id="5-5-读写文件"><a href="#5-5-读写文件" class="headerlink" title="5.5 读写文件"></a>5.5 读写文件</h3><ul><li><strong>数据结构</strong> 缓存文件数据块信息存到内存</li></ul><p><img src="../img/趣话计算机底层技术/0028.png" alt=""></p><ul><li><strong>fsync函数</strong> 进行同步将缓存写入硬盘</li><li><strong>内存映射文件</strong> 将文件的数据缓存页映射到进程的用户台地址空间</li><li>把整个文件或者文件的一部分直接映射到应用程序的地址空间</li></ul><p><img src="../img/趣话计算机底层技术/0029.png" alt=""></p><h3 id="5-6-协程"><a href="#5-6-协程" class="headerlink" title="5.6 协程"></a>5.6 协程</h3><ul><li>线程可以在执行函数遇到阻塞后，保存执行的上下文，转而执行别处的代码。待阻塞的请求完成后，再回去继续执行</li></ul><p><img src="../img/趣话计算机底层技术/0030.png" alt=""></p><ul><li><strong>协程</strong> 在一个线程中，可以抽象出多个执行流协程，由线程来统一调度管理</li><li>操作系统可以通过<strong>时钟中断</strong>和<strong>系统调用（抢占式调度）</strong>进入内核来剥夺线程的执行权</li><li>Golang 设计为支持协程，封装好系统调用方便协程调度器管理</li></ul><p><img src="../img/趣话计算机底层技术/0031.png" alt=""></p><h3 id="5-7-调试器GDB"><a href="#5-7-调试器GDB" class="headerlink" title="5.7 调试器GDB"></a>5.7 调试器GDB</h3><ul><li>ptrace函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="keyword">enum</span> __ptrace_requeset request, <span class="comment">// 第一个参数是一个枚举型的变量,表示要执行的操作</span></span></span><br><span class="line"><span class="params"><span class="type">pid_t</span> pid,</span></span><br><span class="line"><span class="params"><span class="type">void</span> *addr,</span></span><br><span class="line"><span class="params"><span class="type">void</span> *data</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>break</code> <strong>设置断点</strong><ul><li>把被调试进程中那个位置的指令修改为0xCC</li><li>CPU执行这条特殊的指令会陷入内核态，然后取出中断描述符表IDT的3号表项中的处理函数来执行</li><li>系统内核拿到CPU的执行权，会发送一个SIGTRAP信号给被调试的进程</li><li>GDB截获信号，检查是不是设置的断点，显示断点触发</li><li>在没有下一步指示之前，被调试的进程都不会进入就绪队列被调度执行</li></ul></li><li><strong>单步执行</strong><ul><li><strong>eflags标志寄存器</strong> 包含了程序运行的一些状态和一些工作模式的设定</li><li><strong>TF标记</strong> 告诉CPU进入单步执行模式</li></ul></li><li><strong>内存断点</strong><ul><li><code>watch</code> 监视被调试进程中某个内存地址的数据变化</li><li><strong>调试寄存器</strong> DR0到DR7总共8个，在DRO〜DR3中设置要监控的内存地址，在DR7中设置要监控的模式（读或写）</li></ul></li></ul><h3 id="5-8-可执行文件ELF"><a href="#5-8-可执行文件ELF" class="headerlink" title="5.8 可执行文件ELF"></a>5.8 可执行文件ELF</h3><ul><li><strong>do_execve_commo函数</strong> 启动可执行文件的函数</li><li><strong>prepare_binprm函数</strong> 读取文件头部的128字节数据，放入内存缓冲区</li><li><strong>search_binary_handler函数</strong> 在可执行文件处理节点的链表中寻找处理可执行文件的模块</li><li><strong>load_script函数</strong> 脚本类型程序的加载函数</li><li><strong>程序头表</strong> 结构数组，每一个结构都记录一个段（segment）的信息</li><li><strong>段</strong> 进程地址空间中的一块区域，由一个节（section ）或者多个节构成</li><li><strong>节</strong> 存放ELF文件的数据，比如静态数据、代码指令、调试信息</li></ul><p><img src="../img/趣话计算机底层技术/0032.png" alt=""></p><ul><li>加载过程<ul><li><strong>load_elf_binary函数</strong></li><li>引用动态链接库需要解释器加载</li><li>静态编译则不需要</li><li>检查可执行栈</li><li>加上随机偏移 难以推算数据和函数的内存地址</li></ul></li></ul><h1 id="第六章-计算机攻击与安全"><a href="#第六章-计算机攻击与安全" class="headerlink" title="第六章 计算机攻击与安全"></a>第六章 计算机攻击与安全</h1><h3 id="6-1-TCP序列号"><a href="#6-1-TCP序列号" class="headerlink" title="6.1 TCP序列号"></a>6.1 TCP序列号</h3><p><img src="../img/趣话计算机底层技术/0033.png" alt=""></p><ul><li><strong>中间人攻击</strong> 监听网络通信拿到通信的序列号和确认号，伪造进行通信</li></ul><p><img src="../img/趣话计算机底层技术/0034.png" alt=""></p><ul><li><strong>初始序列号INS</strong> 计数器，每4ms加1（不能直接发送，会被别人算出新的ISN）</li><li><strong>ISN = M + F(localhost, localport, remotehost, remoteport)</strong><ul><li>M 计数器</li><li>F MD5算法</li><li>F参数 通信双方的IP和端口</li></ul></li><li><strong>ISN = M + F(localhost, localport, remotehost, remoteport, secretkey)</strong></li><li>同名计数器 因为CPU为8核防止多个线程之间竞争</li><li><strong>TCP定时器</strong></li><li><strong>TCP计数器</strong> DelayedACKLost</li></ul><h3 id="6-2-TCP-SYN-Flood"><a href="#6-2-TCP-SYN-Flood" class="headerlink" title="6.2 TCP SYN Flood"></a>6.2 TCP SYN Flood</h3><ul><li><strong>SYN洪水攻击</strong> 收到SYN数据包后，需要准备一个数据块来存储客户端的信息，发送大量SYN数据包需要分配大量数据块直到空间耗尽</li><li><strong>SYN Cookie</strong> 第二次发给客户端的序列号是一个哈希值，第三次握手时计算哈<code>希值+1=ACK</code> 为正常数据包，错误数据包直接丢弃</li></ul><p><img src="../img/趣话计算机底层技术/0035.png" alt=""></p><h3 id="6-3-HHTPS"><a href="#6-3-HHTPS" class="headerlink" title="6.3 HHTPS"></a>6.3 HHTPS</h3><ul><li>对称加密</li><li>非对称加密</li><li>非对称与对称加密结合 使用非对称加密算法传输加密内容的密钥</li><li>密钥计算</li></ul><p><img src="../img/趣话计算机底层技术/0036.png" alt=""></p><ul><li><strong>中间人攻击</strong> 冒充服务器和客户端通信，冒充客户端和服务器通信</li><li><strong>数字证书</strong></li><li><strong>根证书</strong> 验证最终的签发者是否在根证书列表中</li></ul><h3 id="6-4-漏洞攻击"><a href="#6-4-漏洞攻击" class="headerlink" title="6.4 漏洞攻击"></a>6.4 漏洞攻击</h3><ul><li><strong>栈金丝雀Stack Canary</strong>  抵御栈溢出攻击</li><li>虚函数攻击 覆盖虚函数表指针，指向一个假的虚函数表，表格写入恶意代码地址</li><li>虚函数表指针一般都是在对象的头部（最前面8个字节）</li><li><strong>KPTI内核页表隔离</strong> 线程运行在用户态和内核态时使用不同的页表</li><li><strong>侧信道</strong> 通过判断内存的访问速度来获知是否有被缓存</li></ul><h3 id="6-5-SGX"><a href="#6-5-SGX" class="headerlink" title="6.5 SGX"></a>6.5 SGX</h3><ul><li><strong>安全访问级别</strong> Ring0-Ring3</li></ul><p><img src="../img/趣话计算机底层技术/0037.png" alt=""></p><ul><li><strong>Enclave安全空间</strong><ul><li><strong>创建</strong> 通过执行ECREATE指令创建一个安全空间</li><li><strong>初始化</strong> 通过执行EINIT指令对安全空间进行初始化</li><li><strong>进入&amp;退出</strong> 通过执行EENTER/EEXIT指令进入和退出安全空间</li><li><strong>中断&amp;异常</strong> 通过执行AEX指令退出，将在安全空间执行的上下文保存起来</li><li><strong>系统调用</strong> 通过执行AEX指令退出，执行完系统调用再进来</li><li><strong>函数调用</strong> 安全空间和外部可以互相调用函数，普通空间调用安全空间函数叫ECALL,安全空间调用外部空间函数叫OCALL</li><li><strong>销毁</strong> 通过执行EREMOVE指令销毁一个安全空间</li></ul></li><li><strong>内存加密</strong>  内存加密引擎MEE(memory encryption engine)电路，对安全空间的数据进行透明的加解密，数据写入内存时加密，读取CPU内部时解密</li></ul><h3 id="6-6-挖矿病毒"><a href="#6-6-挖矿病毒" class="headerlink" title="6.6 挖矿病毒"></a>6.6 挖矿病毒</h3><ul><li><strong>top命令</strong> 常用的实时系统监控工具，提供了一个动态的、交互式的实时视图，显示系统的整体性能信息以及正在运行的进程的相关信息</li><li><strong>ps命令</strong> 显示当前进程的状态</li><li><strong>netstat命令</strong> 打印所有的网络连接信息</li><li><strong>unhide</strong> 网络取证工具，能够发现那些借助 rootkit、LKM 及其它技术隐藏的进程和TCP/UDP 端口</li><li><strong>Redis持久化存储</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET <span class="built_in">dir</span> /root/.ssh <span class="comment"># 指定保存地址</span></span><br><span class="line">CONFIG SET dbfilename authorized_keys <span class="comment"># 指定保存的文件名</span></span><br><span class="line">SAVE <span class="comment"># 将数据保存到文件</span></span><br></pre></td></tr></table></figure><ul><li>原因 Redis默认没有密码，可以使用命令行或直接修改redis.conf文件设置密码</li></ul><h3 id="6-7-整数-1引发的内核攻击"><a href="#6-7-整数-1引发的内核攻击" class="headerlink" title="6.7 整数+1引发的内核攻击"></a>6.7 整数+1引发的内核攻击</h3><ul><li><strong>IDT表项的结构图</strong></li></ul><p><img src="../img/趣话计算机底层技术/0038.png" alt=""></p><ul><li>无符号整数与有符号整数的切换</li></ul><ol><li>精心设计一个config值，从应用层传入内核空间的perf_swevent_init函数</li><li>利用内核漏洞，把一个64位无符号数赋值给一个int型变量，导致变量溢出为一个负数</li><li>禾ij用溢出的event_id越界访问perf_swevent_enabled,指向IDT的表项、将第四项中断处理函数的高32位进行+1 </li><li>修改后的中断处理函数指向了用户空间，提前在此安排恶意代码。</li><li>应用层执行int 4汇编指令，触发4号中断，线程将进入内核空间，以内检权限执行提前安排的恶意代码</li></ol><h3 id="6-8-从虚拟机逃脱"><a href="#6-8-从虚拟机逃脱" class="headerlink" title="6.8 从虚拟机逃脱"></a>6.8 从虚拟机逃脱</h3><ul><li>虚拟化技术</li><li>硬件辅助虚拟化 操作系统和程序的指令都是在真实的CPU上执行的，不再用软件来解释模拟</li><li>虚拟机监控程序HyperVisor</li><li><strong>虚拟机逃逸技术</strong> 虚拟机会和外面的真实计算机通信，抓住通信过程中的漏洞，把指令代码掺杂在通信数据中可以逃逸出去</li></ul><p><img src="../img/趣话计算机底层技术/0039.png" alt=""></p><ul><li><strong>漏洞编号CVE</strong> Common Vulnerabilities and Exposures 显示年份和具体漏洞编号</li></ul>]]></content>
    
    
    <summary type="html">Interesting story Underlying computer technology</summary>
    
    
    
    <category term="编程学习" scheme="https://agoni66.github.io/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="计算机" scheme="https://agoni66.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>活着</title>
    <link href="https://agoni66.github.io/posts/1000010.html"/>
    <id>https://agoni66.github.io/posts/1000010.html</id>
    <published>2024-10-30T17:00:00.000Z</published>
    <updated>2024-10-31T15:40:58.766Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger flat"><p><strong>“活着”在我们中国的语言里充满了力量，它的力量不是来自于喊叫，也不是来自于进攻，而是忍受，去忍受生命赋予我们的责任，去忍受现实给予我们的幸福和苦难、无聊和平庸</strong></p></div><ul><li>当我望着到处都充满绿色的土地时，我就进一步明白庄稼为何长得如此旺盛</li><li>两个垂暮的生命将那块古板的田地耕得哗哗翻动，犹如水面上掀起的波浪</li><li>做人呵，一旦嫖上以后，也就免不了要去赌。这个嫖和赌，就像是胳膊和肩膀连在一起，怎么都分不开</li><li>女人看上去各不相同，到下面都是一样的</li><li>男人都是馋嘴的猫🐈</li><li>做人不能忘记四条，话不要说错，床不要睡错，门槛不要踏错，口袋不要摸错</li></ul><hr><ul><li>第一章 福贵赌没全家爹掉了</li><li>第二章 家珍被老丈人接回家</li><li>第三章 进城请郎中被送上战场</li><li>第四章 回到家乡，凤霞聋哑，娘掉了，送子上学，送女又回来</li><li>第五章 人民公社化运动和大炼钢 家珍软骨病</li><li>第六章 有庆因抽血掉了</li><li>第七章 凤霞嫁掉</li><li>第八章 文革时期 春生上吊</li><li>第九章 凤霞生娃大出血掉了 家珍隔三个月掉了</li><li>第十章 二喜掉了 故事结束了</li></ul>]]></content>
    
    
    <summary type="html">活着</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="活着" scheme="https://agoni66.github.io/tags/%E6%B4%BB%E7%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>抱住棒棒的自己</title>
    <link href="https://agoni66.github.io/posts/1000009.html"/>
    <id>https://agoni66.github.io/posts/1000009.html</id>
    <published>2024-10-24T15:00:00.000Z</published>
    <updated>2024-10-24T11:17:54.111Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>不久前的综艺你也是这样抱抱棒棒的haewon小白熊，这就是缘分吧</strong></p></div><h3 id="情绪"><a href="#情绪" class="headerlink" title="情绪"></a>情绪</h3><div class="note default simple"><p>我们有意识地压抑消极情绪、自我批判，只会让情绪更加强化</p></div><div class="note primary simple"><p>自我批判的人更容易认输放弃</p></div><div class="note success simple"><p>改变分第一序列和第二序列。问题，是第一序列；而应对问题的方式，是第二序列</p></div><div class="note info simple"><p>比起和问题硬碰硬，有什么不躲避、更容易接纳的应对方式</p></div><div class="note warning simple"><p>用一种怜悯的心态，理解和照顾情绪</p></div><div class="note danger simple"><p>每个人都是解决自己问题的唯一人选</p></div><div class="note default simple"><p>遇到困难，回过头看看，自己曾经做了什么，怎么做的</p></div><div class="note primary simple"><p>唯有心流带来的快乐，是自己塑造所得，对个人意识的拓展于成长才有助益</p></div><div class="note success simple"><p>当沉浸到某个事物里面时，我们不仅能感受到愉悦、成就感，还能和自己好好相处，对内在的感受也会有更深刻的认识</p></div><div class="note info simple"><p>改变就好像多米诺骨牌，最重要的是找到第一个小小的改变，再一个接一个地推动</p></div><div class="note warning simple"><p>人生不是一条线，是一连串的刹那（连续的向上螺旋线也不错）</p></div><div class="note danger simple"><p>人生不如意十有八九，但就算是这样的人生，也会有闪闪发亮的东西</p></div><div class="note default simple"><p>拼命守护自己珍视的东西，谁敢碰我的最后一块奶油蛋糕，我怎么能不跟他们玩命？</p></div><div class="note primary simple"><p>别忘了，漆黑的夜，你的星星口袋发着光</p></div><div class="note success simple"><p>我们讲述的故事，揭示了我们自己，构建了我们自己，在人生的旅途中支撑着我们</p></div><h3 id="自我成长"><a href="#自我成长" class="headerlink" title="自我成长"></a>自我成长</h3><div class="note info simple"><p>个体为了回避自己的不佳表现所带来的负面影响，可能会采取一些行为，增大将失败原因外化的机会</p></div><div class="note warning simple"><p>失败，歧视没有那么可怕，它只是人生千百万种体验的一种</p></div><div class="note danger simple"><p>当我们不再把“失败”和“我很差劲”紧密捆绑在一起时，或许会发掘出自己未知的潜能</p></div><div class="note default simple"><p>停下自我指责，问问自己：我期待自己变成什么样子</p></div><div class="note primary simple"><p>终其一生，我们不会因为“保持正确”而被爱，我们只会因为我是我而被喜欢</p></div><div class="note success simple"><p>少一点向外界标准寻求答案，多一点向内心问问自己的想法</p></div><div class="note info simple"><p>我到底应该怎么做才能变得更好？其实你可以带着问题生活</p></div><div class="note warning simple"><p><strong>自律不是约束自己，而是提升自己，表现为更爱自己</strong></p></div><div class="note danger simple"><p>自律，是一种怀揣着变好的期待、主动施行的、更健康的生活方式</p></div><h3 id="亲密关系"><a href="#亲密关系" class="headerlink" title="亲密关系"></a>亲密关系</h3><div class="note default simple"><p>亲密关系中，更多的自我决定，会带来更少的负面情绪和更多的积极行为，提升关系的整体幸福感</p></div><div class="note primary simple"><p>坚持发出自己的声音，坚持优先看见、尊重和照顾自己的感受</p></div><div class="note success simple"><p>舒服的关系可以留下，不舒服的关系可以尝试沟通和解决，但没必要勉强和委屈自己去苦苦维持</p></div><div class="note info simple"><p>应该思维：头脑中已有一套规则，试图让全世界和他人都按照这套规则运转（对应控制欲）</p></div><h3 id="亲子关系"><a href="#亲子关系" class="headerlink" title="亲子关系"></a>亲子关系</h3><div class="note warning simple"><p>没有回应的话，家也是绝境</p></div><div class="note danger simple"><p>父母：我不想强制你，我给你自由；但我又希望你跟我一条心，自觉地如我所愿</p></div><div class="note default simple"><p>在理解孩子，也在理解自己的基础上，父母和孩子才能真诚地沟通，满足彼此的需求</p></div><div class="note primary simple"><p>在一段两人关系里，当他们无法处理问题和矛盾时，会很自然地利用第三方，来缓解双方的情绪冲击</p></div><div class="note success simple"><p>敏感是一种性格特点，不是什么需要修正的毛病。对于养育者来说，接纳、适应、顺其自然就是最好的办法</p></div>]]></content>
    
    
    <summary type="html">haewon欧尼，你是最棒的</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="温情" scheme="https://agoni66.github.io/tags/%E6%B8%A9%E6%83%85/"/>
    
    <category term="漫画" scheme="https://agoni66.github.io/tags/%E6%BC%AB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>你也走了很远的路吧</title>
    <link href="https://agoni66.github.io/posts/1000008.html"/>
    <id>https://agoni66.github.io/posts/1000008.html</id>
    <published>2024-10-22T15:00:00.000Z</published>
    <updated>2024-10-22T14:48:29.793Z</updated>
    
    <content type="html"><![CDATA[<div class="tip warning faa-horizontal animated-hover"><p>你要忍，忍到春暖花开；你要走，走到灯火通明；你要看过世界辽阔，再评判是好是坏</p></div><div class="tip warning faa-horizontal animated-hover"><p>我们不停告别，又不停重新出发，有些话还来不及讲，就已经分道扬镳</p></div><div class="tip warning faa-horizontal animated-hover"><p>只有在最深的夜里，你才能够允许自己难过</p></div><div class="tip warning faa-horizontal animated-hover"><p>孤独是，某天突然下雨，你走在街上，只有你一个人没有带伞；加班到深夜的你饥饿难耐，却发现周边所有便利店都关门；期待很多年的电影今天上映，怎么也找不到人陪你去看；深夜想要找一个人聊天，翻遍通讯录却找不到人说话。走过了那么远的路，再也找不到人分享风景</p></div><div class="tip warning faa-horizontal animated-hover"><p>我们成长，我们遗忘，我们弄丢回忆，我们无能为力。可日升日落，潮退潮涨，永远有前路，等待前行的人。</p></div><div class="tip warning faa-horizontal animated-hover"><p>我的所有坚持，都是因为热爱。没办法三分钟热度，做不到对自己敷衍</p></div><div class="tip warning faa-horizontal animated-hover"><p>我张开了手，却只能抱住风</p></div><div class="tip warning faa-horizontal animated-hover"><p>当你很喜欢一个人的时候，你会希望他能参与你的生活，你会希望你的所有情绪他都能有回应</p></div><div class="tip warning faa-horizontal animated-hover"><p>告别就是看到所有美好的东西，也不会再和你说了</p></div><div class="tip warning faa-horizontal animated-hover"><p>生活的本质就是这样，希望和失望共存，美好与丑恶共生。而我们能做的，是从失望中看到希望</p></div><div class="tip warning faa-horizontal animated-hover"><p>那时的我自然不明白，生活的本质就是这样，希望和失望共存，美好与丑恶共生。有多少好的，就有多少坏的，付出从来不等于回报，不公平就是生活本身。而我们能做的，是从失望中看到希望。真正的乐观，不是因为没见过世界的黑暗，恰恰是因为见过之后，才懂得生活的珍贵</p></div><div class="tip warning faa-horizontal animated-hover"><p>永远年轻，永远热泪盈眶</p></div><div class="tip warning faa-horizontal animated-hover"><p>我的朋友就这么多，不多不少，每一个都很重要，每一个都要幸福。一个都不能少</p></div><div class="tip warning faa-horizontal animated-hover"><p>友情更像是一种不需要常常惦记，但都保持着关心，不需要时常保持联系，但聊起天来感觉时间就像没走，不需要陪伴在身边，但有困难时可以第一时间到你身边的感情</p></div><div class="tip warning faa-horizontal animated-hover"><p>我早就不是那个相信友谊天长地久的少年，也知道这世上更多的是分道扬镳</p></div><div class="tip warning faa-horizontal animated-hover"><p>因为半山腰总是最挤的，你得到山顶看看</p></div><div class="tip warning faa-horizontal animated-hover"><p>让你难过的事情太多了，你只是想要调整好自己给别人一个好状态，可有人偏僻抓住你的痛脚，说你是没心没肺</p></div><div class="tip warning faa-horizontal animated-hover"><p>你想要去得地方你真的在认真打算，可有人偏偏要冷嘲热讽</p></div><div class="tip warning faa-horizontal animated-hover"><p>你的所有成绩所有努力无法得到认可，当然不甘心</p></div><div class="tip warning faa-horizontal animated-hover"><p>可我怕你久而久之习惯了，你开始怀疑真诚，你开始怀疑热血，你开始怀疑努力，你开始怀疑所有美好的意义</p></div><div class="tip warning faa-horizontal animated-hover"><p>是因为我们都太了解自己了，了解自己内心那团火一直燃着，带着你一路披荆斩棘，去一个你必须要去的地方</p></div><div class="tip warning faa-horizontal animated-hover"><p>去喜欢一个让你有动力的人吧，每天起来都觉得阳光万里</p></div><div class="tip warning faa-horizontal animated-hover"><p>要每天过得充实，不管别人是否认同，也不管他们是否在意，这世上有那么多人，余生还长，总有人懂得欣赏</p></div><div class="tip warning faa-horizontal animated-hover"><p>还有爬起来的力气，就不要让自己躺在地上太久。路的尽头不见得跟想象中一样，但你得走过去看看</p></div><div class="tip warning faa-horizontal animated-hover"><p>我们都不是为了别人准备的，我们是为了自己准备的</p></div><div class="tip warning faa-horizontal animated-hover"><p>我们有自己要走的路，要去的地方，陪伴在身旁的，是跟我们同行的那一个</p></div><div class="tip warning faa-horizontal animated-hover"><p>其实不是的，人变老不是从心开始的，是从你觉得累开始的。一次力不从心，两次力不从心，于是你的心也跟着放弃了。世上那么多放弃，其实都是一句“我累了”</p></div><div class="tip warning faa-horizontal animated-hover"><p>因为生活还是那样，它只是静静地在这儿看着你，等着你走出改变的第一步。那么，你有没有改变的勇气？</p></div><div class="tip warning faa-horizontal animated-hover"><p>不要改变你的热血，你的真诚，你的努力。亲爱的，成长不是变得面目全非，而是保留住重要的东西奋力前行</p></div><div class="tip warning faa-horizontal animated-hover"><p>如果自由的代价是孤独，那便接受它。因为你还有两件事可以做：变优秀，和等那个人出现</p></div><div class="tip warning faa-horizontal animated-hover"><p>如果没有时差就好了，我喜欢你的时候，你恰好喜欢我</p></div><div class="tip warning faa-horizontal animated-hover"><p>我们寻找过去的味道、气味，我们再走过那些街道、风景，只不过为了心里的执念。执念的事做完了，想不通的也就过去了</p></div><div class="tip warning faa-horizontal animated-hover"><p>他用尽全部力气安慰她，却没有办法说那句，我喜欢你。喜欢是一种多么贵重的东西，贵重到所有人面对自己喜欢的人，都说不出口</p></div><div class="tip warning faa-horizontal animated-hover"><p>人们想要的从来不是真相。他们只要绘声绘色，他们只要故事好听</p></div><div class="tip warning faa-horizontal animated-hover"><p>都说两个人相处，只有两种可能性，要么成为朋友，要么成为恋人</p></div><div class="tip warning faa-horizontal animated-hover"><p>我们的心事都像一封永远不会寄出去的信，写的是寻人启事，却没有收件人</p></div><div class="tip warning faa-horizontal animated-hover"><p>“有些人觉得爱就是性，是婚姻，是清晨六点的吻和一堆孩子，或许爱就是这样，莱斯特小姐，但你知道我怎么想吗？我觉得爱是想要触碰却又收回手”</p></div><div class="tip warning faa-horizontal animated-hover"><p>你不知道在什么时候，你也成为过别人的力量</p></div><div class="tip warning faa-horizontal animated-hover"><p>冷漠毫无成本，显得善良多么脆弱</p></div><div class="tip warning faa-horizontal animated-hover"><p>等天亮，等释怀，等安慰，等晴天，这世上几乎人人都在等</p></div><div class="tip warning faa-horizontal animated-hover"><p>有些事大可一个人做，只是我们缺少一个人做的勇气</p></div><div class="tip warning faa-horizontal animated-hover"><p>而等待也没什么难过的，如果你等的是日出，那它早晚会来；如果你等一个你也说不好什么时候会来的人和事，也没什么可怕，至少你可以边等边做自己喜欢的事。如果你知道你等的永远也不会来，那你会学会死心的。至于偶尔冒上心头的想念，就想念吧</p></div><div class="tip warning faa-horizontal animated-hover"><p>我不信成为别人喜欢的样子，我只想成为我自己</p></div>]]></content>
    
    
    <summary type="html">抱抱自己吧，谁不是宝宝呢</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="人文" scheme="https://agoni66.github.io/tags/%E4%BA%BA%E6%96%87/"/>
    
    <category term="温情" scheme="https://agoni66.github.io/tags/%E6%B8%A9%E6%83%85/"/>
    
    <category term="热学" scheme="https://agoni66.github.io/tags/%E7%83%AD%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>闪闪发光的人生</title>
    <link href="https://agoni66.github.io/posts/1000007.html"/>
    <id>https://agoni66.github.io/posts/1000007.html</id>
    <published>2024-09-12T08:00:00.000Z</published>
    <updated>2024-09-12T15:17:32.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="艾草团子🍡"><a href="#艾草团子🍡" class="headerlink" title="艾草团子🍡"></a>艾草团子🍡</h3><div class="tip home"><p>这种喜悦，就好像气泡酒中的泡泡一样，从我的胸腔中一涌而上，化作泪水溢出</p></div><div class="tip home"><p>气泡果汁里真的装了许多时令水果，就像只豪华的宝石盒子</p></div><div class="tip home"><p>她那么柔软、那么温暖，又散发着淡淡的甘甜气味，就好像刚出锅的寿甘团子</p></div><div class="tip home"><p>在土锅里煮上红豆，又在旁边的小炉子里用滚水焯艾草叶。眼见着滚水染上深深的绿色，仿佛把春天都凝聚在一锅之中。舒爽的香味弥漫开来，就好像置身于森林中</p></div><div class="tip home"><p>艾草团子厚墩墩的，呈现出复杂的风味——强劲且带着大地气息</p></div><h3 id="意式冰淇淋🍦"><a href="#意式冰淇淋🍦" class="headerlink" title="意式冰淇淋🍦"></a>意式冰淇淋🍦</h3><div class="tip home"><p>生命也是一样，一旦死去，就再也无法恢复原状</p></div><div class="tip home"><p>也许走上不同的人生路才是最好的</p></div><div class="tip home"><p>只要闭上眼睛，在心中默念“闪闪发光，闪闪发光”，心灵的晦暗之处就会出现星星，照亮四周</p></div><h3 id="珠芽饭🌱"><a href="#珠芽饭🌱" class="headerlink" title="珠芽饭🌱"></a>珠芽饭🌱</h3><div class="tip home"><p>寄居蟹小姐心中所萌生的好感，就如同植物从大地中抽出枝芽一样，毫不虚伪。自然不会说谎，也不会欺骗自己，会坦率地生，坦率地死</p></div><div class="tip home"><p>我们两个都是背着重壳行走的人，我们的天空也不总是那么晴朗，而我已经被你的温柔拯救了不知多少次</p></div><div class="tip home"><p>与其去追求已经失去的东西，不如好好珍惜现在掌心中拥有的东西</p></div><h3 id="蜂斗菜味噌"><a href="#蜂斗菜味噌" class="headerlink" title="蜂斗菜味噌"></a>蜂斗菜味噌</h3>]]></content>
    
    
    <summary type="html">闪闪发光 日本妻子</summary>
    
    
    
    <category term="读书笔记" scheme="https://agoni66.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="文学" scheme="https://agoni66.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
    <category term="日文" scheme="https://agoni66.github.io/tags/%E6%97%A5%E6%96%87/"/>
    
    <category term="烂尾" scheme="https://agoni66.github.io/tags/%E7%83%82%E5%B0%BE/"/>
    
  </entry>
  
  <entry>
    <title>DATABASE SYSTEM CONCEPTS-Chapter10 Storage and File Structure</title>
    <link href="https://agoni66.github.io/posts/1000115.html"/>
    <id>https://agoni66.github.io/posts/1000115.html</id>
    <published>2024-08-04T09:30:00.000Z</published>
    <updated>2024-10-05T02:09:16.531Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000111.html">Chapter1 Introduction</a></p></li><li><p>🦝<a href="https://agoni66.github.io/posts/1000112.html">Chapter2 Introduction to Relational Model</a></p></li><li><p>🐯<a href="https://agoni66.github.io/posts/1000113.html">Chapter3 Introduction to SQL</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000114.html">Chapter4 Intermediate SQL</a></p></li><li><p>🐷<a href="https://agoni66.github.io/posts/1000116.html">Chapter6 Formal Relational Query Languages</a></p></li><li><p>🐼<a href="https://agoni66.github.io/posts/1000117.html">Chapter7 Entity-Relationship Model</a> </p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000118.html">Chapter8 Relational Database Design</a></p></li><li><p>🐻<a href="https://agoni66.github.io/posts/1000115.html">Chapter10 Storage and File Structure</a> ⇦ 当前位置🪂</p></li></ol></div><h3 id="物理存储介质概述"><a href="#物理存储介质概述" class="headerlink" title="物理存储介质概述"></a>物理存储介质概述</h3><ul><li>高速缓冲存储器</li><li>主存储器</li><li>快闪存储器 电源关闭也可以保存数据</li><li>磁盘存储器</li><li>光学存储器</li><li>磁带存储器</li></ul><p><img src="../img/数据库系统概念/2.png" alt="2.png"></p><ul><li>基本存储 最快的存储介质（cache和主存）</li><li>辅助存储 基本存储的下一层介质</li><li>三级存储or脱机存储 最底层的介质</li><li>易失性存储 设备断电后将丢失所有内容</li><li>非易失性存储 设备断电后将不会丢失所有内容</li></ul><h3 id="磁盘和快闪存储器"><a href="#磁盘和快闪存储器" class="headerlink" title="磁盘和快闪存储器"></a>磁盘和快闪存储器</h3><p><img src="../img/数据库系统概念/3.png" alt="Untitled"></p><ul><li><strong>磁盘的物理特性</strong><ul><li>盘片</li><li>磁道</li><li>扇区 磁道写入和读出信息的最小单位</li><li>读写头 将信息磁化存储到扇区中</li><li>磁盘臂 所有读写头安装在上面一起移动</li><li>柱面 所有盘片的第几条磁道</li><li>磁盘控制器 计算机系统和实际的磁盘驱动器硬件之间的接口</li><li>坏扇区的重映射</li><li>存储区域网</li><li>独立磁盘冗余阵列</li><li>网络附加存储NAS</li></ul></li><li><strong>磁盘性能的度量</strong><ul><li>访问时间</li><li>寻道时间 平均寻道时间</li><li>旋转等待时间</li><li>数据传输率</li><li>平均故障时间</li></ul></li><li><strong>磁盘块访问的优化</strong><ul><li>虚拟地址≈快号</li><li>一个块是一个逻辑单元，包含固定数目的连续扇区</li><li>顺序访问</li><li>随机访问</li><li>缓冲(buffering)：从磁盘读取的块暂时存储在内存缓冲区</li><li>预读(read-ahead)：当一个磁盘块被访问时，相同磁道的连续块也读入内存缓冲区</li><li>调度(scheduling)：电梯算法</li><li>文件组织(file organization)</li><li>非易失性写缓冲区(nonvolatile write buffer)</li><li>日志磁盘：用于写顺序日志的磁盘，可以减少写等待时间</li></ul></li><li><strong>快闪存储</strong><ul><li>NOR快闪 允许随机访问内存中的单个字</li><li>NAND快闪 需要将整个数据页读取到主存储器</li><li>NAND快闪便宜，存储容量高，使用更广泛</li><li>闪存的写入：不能直接覆盖，先擦除再重写，擦除块</li><li>转换表：逻辑到物理的页面映射存储到内存的转换表</li><li>损耗均衡：在物理块中均匀分布擦除操作的原则，因为物理页可能擦除过多而损坏</li><li>混合硬盘驱动器：结合了小容量闪存存储器的硬盘系统</li></ul></li><li><p><strong>RAID</strong></p><ul><li>目的：存储需求增长，为了提高性能和可靠性，易于管理和操作</li><li>独立磁盘冗余阵列</li><li>冗余<ul><li>存储正常情况下不需要的额外信息，这些信息可用于故障时重建恢复</li><li>镜像：复制每一张磁盘</li></ul></li><li>并行<ul><li>数据拆分：提高传输速率的手段</li><li>比特级拆分：每个字节按比特分开，存储到多个磁盘上</li><li>块级拆分：将块拆分到多个磁盘上</li></ul></li><li>RAID级别</li></ul></li><li><p><img src="../img/数据库系统概念/4.png" alt="Untitled"></p><ul><li>RAID级别的选择<ul><li>所需的额外磁盘存储带来的花费</li><li>在I/O操作数量方面的性能需求</li><li>磁盘故障时的性能</li><li>数据重建过程中的性能</li></ul></li><li>软件RAID：不改变硬件层 只修改软件的RAID</li><li>硬件RAID：具有硬件支持的RAID</li></ul></li></ul><h3 id="第三级存储"><a href="#第三级存储" class="headerlink" title="第三级存储"></a>第三级存储</h3><ul><li>光盘</li><li>磁带<ul><li>数字音频磁带DAT：几个GB</li><li>字线性磁带DLT：10~40GB</li><li>Ultrium：100GB</li><li>Amp螺旋扫描磁带：330GB</li><li>数据传输率在每秒几到几十MB</li><li>自动磁带机：存放大量磁道，并有少量可用于安装磁带的动器</li></ul></li></ul><h3 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h3><ul><li>一个文件在逻辑上组织成为记录的一个序列</li><li>块：每个文件分成定长的存储单元，是存储分配和数据传输的基本单位</li><li>文件头：分配有一定数量的字节，包含有关文件的各种信息</li><li>定长记录<ul><li>假设记录大小是固定的。</li><li>每个文件只包含一种特定类型的记录。</li><li>不同的文件用于不同的关系</li><li>用空闲链表来存储空余空间</li></ul></li><li>变长记录<ul><li>插槽页头(Slotted page header)包含以下内容：<ul><li>记录条目的数量</li><li>块中空闲空间的结束位置</li><li>每个记录的位置和大小</li></ul></li><li>可以在页面内部移动记录，以保持它们的连续性，中间没有空白空间；页头中的条目必须更新</li><li>指针不应直接指向记录，而应指向页头中记录对应的条目</li></ul></li><li>文件的记录组织<ul><li>堆文件组织：一条记录可以放在文件中的有空间的任何地方（记录无顺序）</li><li>顺序文件组织：记录根据其搜索码的值顺序存储<ul><li>搜索码是任何一个属性或者属性的集合</li><li>重组：使记录在物流上顺序存放</li></ul></li><li>散列文件组织<ul><li>多表聚簇文件组织：在每一块中存储两个或者更多个关系的相关记录的文件结构</li></ul></li></ul></li></ul><h3 id="数据字典存储"><a href="#数据字典存储" class="headerlink" title="数据字典存储"></a>数据字典存储</h3><ul><li>元数据：关于数据的数据</li><li>数据字典：存储关系的关系模式和其他元数据</li><li>系统必须存储的信息类型<ul><li>关系的名字</li><li>每个关系中属性的名字</li><li>属性的域和长度</li><li>在数据库上定义的视图的名字和定义</li><li>完整性约束</li></ul></li></ul><h3 id="数据库缓冲区"><a href="#数据库缓冲区" class="headerlink" title="数据库缓冲区"></a>数据库缓冲区</h3><ul><li>缓冲区：主存储器中用于存储磁盘块拷贝的部分</li><li>缓冲区管理器：负责缓冲区空间分配的子系统<ul><li>为了使数据库系统能够从系统崩溃中恢复，限制一个块写回磁盘的时间是必要的</li><li>被钉住的块：不允许写回磁盘的块</li><li>块的强制写出</li></ul></li><li>缓冲区替换策略<ul><li>最近最少使用LRU</li><li>最近最常使用MRU</li></ul></li></ul>]]></content>
    
    
    <summary type="html">DATABASE SYSTEM CONCEPTS-Chapter10 Storage and File Structure</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://agoni66.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DATABASE SYSTEM CONCEPTS-Chapter8 Relational Database Design</title>
    <link href="https://agoni66.github.io/posts/1000118.html"/>
    <id>https://agoni66.github.io/posts/1000118.html</id>
    <published>2024-08-03T14:30:00.000Z</published>
    <updated>2024-10-05T02:09:18.642Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000111.html">Chapter1 Introduction</a></p></li><li><p>🦝<a href="https://agoni66.github.io/posts/1000112.html">Chapter2 Introduction to Relational Model</a></p></li><li><p>🐯<a href="https://agoni66.github.io/posts/1000113.html">Chapter3 Introduction to SQL</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000114.html">Chapter4 Intermediate SQL</a></p></li><li><p>🐷<a href="https://agoni66.github.io/posts/1000116.html">Chapter6 Formal Relational Query Languages</a></p></li><li><p>🐼<a href="https://agoni66.github.io/posts/1000117.html">Chapter7 Entity-Relationship Model</a> </p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000118.html">Chapter8 Relational Database Design</a> ⇦ 当前位置🪂</p></li><li><p>🐻<a href="https://agoni66.github.io/posts/1000115.html">Chapter10 Storage and File Structure</a></p></li></ol></div><h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><p>如果分解后无法重建原始信息，那么就是有损分解(Lossy Decomposition)，反之则为无损分解(Lossless-Join Decomposition)</p><blockquote><p>好的分解要做到无损分解和依赖保存</p><p>BCNF 分解可以保证无损，3NF 可以保证依赖保存，但是 3NF 无法保证没有冗余，因此需要在 BCNF 和 3NF 间权衡</p></blockquote><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><ul><li>如果一个域的元素都是不可分的单位，这个域是<strong>原子的</strong></li><li>一个关系模式R的所有属性的域都是原子的，这个关系模式属于<strong>第一范式(First Normal Form, 1NF)</strong></li><li>原子性实际上是与域的元素如何使用相关的属性，就是说我们怎么看待这个属性</li></ul><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><ul><li>函数依赖是对合法关系集合的约束条件</li><li>要求某个属性集合的值唯一确定另一个属性集合的值</li><li>定义为：$A\rightarrow B$<ul><li>$A$是模式$(A,B)$的超码</li><li>属性$A$的取值决定$B$的取值</li></ul></li><li>平凡函数依赖：$A\subseteq B$</li><li>完全函数依赖：$A$的任意真子集都推不出$B$</li><li>部分函数依赖：$A$的任意一个真子集可以推出$B$</li><li>非主码都完全函数依赖于主码的，这个关系模式属于<strong>第二范式(Second Normal Form, 2NF)</strong></li></ul><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><ul><li>闭包<ul><li>$F^{+}$表示所有能从函数依赖$F$中推出的函数依赖闭包</li><li>如果两个函数依赖集的闭包相等，那么我们就说这两个函数依赖集是等价的</li><li>性质<ul><li>自反性</li><li>扩充性</li><li>传递性</li></ul></li><li>附加规则<ul><li>并集规则</li><li>分解规则</li><li>伪传递规则</li></ul></li></ul></li><li>$A\rightarrow B~and~B\rightarrow C\Rightarrow A\rightarrow C$ 成为传递依赖</li><li>没有传递依赖的第二范式，这个关系模式属于<strong>第三范式(Third Normal Form, 3NF)</strong></li></ul><h3 id="BCNF范式"><a href="#BCNF范式" class="headerlink" title="BCNF范式"></a>BCNF范式</h3><ul><li>要验证一个属性$x$对于给定的$Ax\rightarrow B$是否冗余，如果$A\rightarrow B$成立，$x$就是冗余的</li><li>关系模式 $R$ 在 BCNF（Boyce-Codd 范式）中，如果对于$R$中的存在的所有函数依赖关系$F$，形式为$A\rightarrow B$，其中$A\subseteq R$且$B\subseteq R$，至少满足以下条件之一<ul><li>$A\subseteq B$</li><li>$A$是$R$的超键</li></ul></li><li>检查BCNF<ul><li>计算函数依赖的闭包$A^{+}$</li><li>验证是否满足$R\subseteq A^{+}$</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="note info no-icon flat"><p>🧡 <strong>范式之间的关系：</strong><br>第一范式(1NF)<br>非码的非平凡<br>↓ 消除非主属性对码的部分函数依赖<br>第二范式(2NF)<br>↓ 消除非主属性对码的传递函数依赖<br>第三范式(3NF)<br>↓ 消除主属性对码的部分和传递函数依赖<br>BC 范式(BCNF)<br>↓ 消除非平凡且非函数依赖的多值依赖<br>第四范式(4NF)<br>↓ 消除不是由候选码所蕴含的连接依赖<br>第五范式(5NF)</p></div>]]></content>
    
    
    <summary type="html">DATABASE SYSTEM CONCEPTS-Chapter8 Relational Database Design</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://agoni66.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DATABASE SYSTEM CONCEPTS-Chapter7 Entity-Relationship Model</title>
    <link href="https://agoni66.github.io/posts/1000117.html"/>
    <id>https://agoni66.github.io/posts/1000117.html</id>
    <published>2024-08-02T14:30:00.000Z</published>
    <updated>2024-10-05T02:09:20.776Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000111.html">Chapter1 Introduction</a></p></li><li><p>🦝<a href="https://agoni66.github.io/posts/1000112.html">Chapter2 Introduction to Relational Model</a></p></li><li><p>🐯<a href="https://agoni66.github.io/posts/1000113.html">Chapter3 Introduction to SQL</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000114.html">Chapter4 Intermediate SQL</a></p></li><li><p>🐷<a href="https://agoni66.github.io/posts/1000116.html">Chapter6 Formal Relational Query Languages</a></p></li><li><p>🐼<a href="https://agoni66.github.io/posts/1000117.html">Chapter7 Entity-Relationship Model</a> ⇦ 当前位置🪂</p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000118.html">Chapter8 Relational Database Design</a></p></li><li><p>🐻<a href="https://agoni66.github.io/posts/1000115.html">Chapter10 Storage and File Structure</a></p></li></ol></div><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><p><strong>实体</strong> 是现实世界中可区别于所有其他对象的一个事务，例如大学中的每个人</p><p><strong>实体集</strong> 是相同类型即具有相同属性的一个实体集合，例如大学中的所有人</p><p><strong>属性</strong> 每个实体的每个属性都有一个值</p><p><strong>联系</strong> 是指多个实体间的相互关联</p><p><strong>联系集</strong> 是相同类型联系的集合，是n≥2个实体集上的数学关系</p><p><strong>参与</strong> 实体集之间的关联，实体集$E_1,E_2,…,E_n$参与联系集$R$</p><p><strong>度</strong> 参与联系集的实体集的数目</p><p><strong>域</strong> 每个属性的可取值的集合</p><h3 id="属性分类"><a href="#属性分类" class="headerlink" title="属性分类"></a>属性分类</h3><ul><li>简单和复合<ul><li>简单不能划分为更小饿部分</li><li>复合比如说姓名可以划分为姓和名</li></ul></li><li>单值和多值</li><li>派生 这类属性的值可以从相关属性得出</li></ul><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p><strong>映射基数</strong> 标识一个实体通过联系集能关联的实体的个数</p><ul><li>一对一</li><li>一对多</li><li>多对一</li><li>多对多</li></ul><p><strong>参与约束</strong></p><ul><li>全部 实体集E对的每个实体都参与到联系集R的至少一个联系</li><li>部分 实体集E只有部分实体参与到联系集R的联系</li></ul><p><strong>码</strong> 唯一标识该实体</p><p><strong>基线约束</strong></p><p>→ 箭头指向 <strong><code>一</code></strong></p><p>— 横线指向 <strong><code>多</code></strong></p><blockquote><p>对于三元（或更高度）关系，我们最多允许从关系中有一个箭头出去，以表示基数约束</p></blockquote><h3 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h3><ul><li><strong>矩形</strong>表示实体集<ul><li>复合属性跟在简单属性下面，统一缩进格式</li></ul></li><li>菱形表示关系集</li><li><strong>实体矩形</strong>内列出属性</li><li><strong>下划线</strong>表示主键属性</li><li>非二次的联系集用多条线连接</li><li><strong>弱实体集</strong> 没有主码的实体集</li><li><strong>强实体集</strong> 有主码的实体集</li><li>弱实体集必须与<strong>标识实体集</strong>关联</li></ul><h3 id="关系模式的转化"><a href="#关系模式的转化" class="headerlink" title="关系模式的转化"></a>关系模式的转化</h3><ul><li>E-R图转化为一些关系模式的集合</li><li>强实体集：$(A_1,A_2,…,A_n)$，其中$A_1,A_2,…,A_n$是实体集内的属性</li><li>弱实体集：$(A_1,A_2,…,A_n,p)$，其中$A_1,A_2,…,A_n$是实体集内的属性,$p$是识别强实体集的主码</li><li>联系集：参与的所有实体集的主码的集合 + 自己的属性<ul><li>多对多 双方主码的并集为联系集的主码</li><li>一对多 多的主码为联系集的主码</li><li>一对一 任意的都可以</li></ul></li></ul><h3 id="设计问题"><a href="#设计问题" class="headerlink" title="设计问题"></a>设计问题</h3><span class='p blue'>用实体集还是用属性？</span><ul><li>用实体集比较灵活，可存储额外信息</li></ul><span class='p blue'>用实体集还是用联系集？</span><ul><li>不好说，更多的是用联系集表示实体之间的操作</li></ul><span class='p blue'>用二元关系集还是用n元关系集？</span><ul><li>可以用多个二元关系集表示n元关系集，但n元关系集清楚一些</li></ul><h3 id="扩展的E-R特性"><a href="#扩展的E-R特性" class="headerlink" title="扩展的E-R特性"></a>扩展的E-R特性</h3><p><strong>特化</strong></p><ul><li>自顶向下的设计过程</li><li>在实体集内部进行分组的过程，比如说person实体集分为employee和student</li></ul><p><strong>概化</strong></p><ul><li>自底向上的设计过程</li><li>将共享相同特征的多个实体集合并为一个较高层的实体集</li></ul><p>高层和低层实体集也称为<strong>超类</strong>（superclass）和<strong>子类</strong>（subclass）</p><p><strong>属性继承</strong></p><ul><li>高层实体集的属性被低层实体集继承</li><li>高层实体集所关联的所有属性和联系适用于它的所有低层实体集</li><li>低层实体集特有的性质仅适用于特定的低层实体集</li></ul><p><strong>概化上的约束</strong></p><ul><li>条件定义的</li><li>用户定义的</li><li>不相交：一个实体至多属于一个低层实体集</li><li>重叠：一个实体可以属于多个较低级别实体集</li><li>完全性约束<ul><li>全部概化或特化： 每次高层实体必须属于一个低层实体集</li><li>部分概化或特化：允许一些高层实体不属于任何低层实体集</li></ul></li></ul><p><strong>聚集</strong></p><p>使联系化为高层实体，并且可以参与联系</p><ul><li>将关系视为抽象实体</li><li>允许关系之间的关系</li><li>将关系抽象成新的实体，避免引入冗余</li></ul><p><strong>转为关系模式</strong></p><ul><li>方法一<ul><li>为高级实体形成一个模式</li><li>为每个低级实体集形成一个模式，包括上层实体集的主键和局部属性</li><li>缺点：获取有关员工的信息需要访问两个关系，即对应于低级别模式和高级别模式的关系</li></ul></li><li>方法二<ul><li>为每个实体集构建模式，包括所有本地和继承的属性</li><li>缺点：可能会冗余存储</li></ul></li></ul><h3 id="统一建模语言UML"><a href="#统一建模语言UML" class="headerlink" title="统一建模语言UML"></a>统一建模语言UML</h3><ul><li>类图：与E-R图类似</li><li>用况图：说明用户与系统之间的交互</li><li>活动图：说明系统不同部分之间的任务流</li><li>实现图：在软硬件说明系统的各组成部分以及它们之间的联系</li><li>关联：类比联系集</li></ul><h3 id="数据库设计的其他方面"><a href="#数据库设计的其他方面" class="headerlink" title="数据库设计的其他方面"></a>数据库设计的其他方面</h3><ul><li>数据约束：自动的一致性保持</li><li>使用需求：查询、性能：吞吐量和响应时间</li><li>授权需求</li><li>数据流、工作流</li></ul>]]></content>
    
    
    <summary type="html">DATABASE SYSTEM CONCEPTS-Chapter7 Entity-Relationship Model</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://agoni66.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DATABASE SYSTEM CONCEPTS-Chapter6 Formal Relational Query Languages</title>
    <link href="https://agoni66.github.io/posts/1000116.html"/>
    <id>https://agoni66.github.io/posts/1000116.html</id>
    <published>2024-08-01T14:30:00.000Z</published>
    <updated>2024-10-05T02:09:24.210Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000111.html">Chapter1 Introduction</a> </p></li><li><p>🦝<a href="https://agoni66.github.io/posts/1000112.html">Chapter2 Introduction to Relational Model</a></p></li><li><p>🐯<a href="https://agoni66.github.io/posts/1000113.html">Chapter3 Introduction to SQL</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000114.html">Chapter4 Intermediate SQL</a></p></li><li><p>🐷<a href="https://agoni66.github.io/posts/1000116.html">Chapter6 Formal Relational Query Languages</a> ⇦ 当前位置🪂</p></li><li><p>🐼<a href="https://agoni66.github.io/posts/1000117.html">Chapter7 Entity-Relationship Model</a> </p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000118.html">Chapter8 Relational Database Design</a></p></li><li><p>🐻<a href="https://agoni66.github.io/posts/1000115.html">Chapter10 Storage and File Structure</a></p></li></ol></div><h2 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h2><p>关系代数是一种过程化查询语言</p><p>一元运算：对一个关系进行运算</p><p>二元运算：对两个关系进行运算</p><ul><li>选择 σ  $\sigma _{p}\left( R\right)$$$\sigma _{p}\left( r\right) =\left\{  t~| t\in r~and~p\left( t\right) \right\}$$</li><li>投影 π  <script type="math/tex; mode=display">\prod a_{1},\ldots ,a_{n}\left( R\right)</script></li><li>笛卡尔积 x$$r\times s= \{ t,q~| t\in r~and~q\in s\}$$</li><li>自然连接 ⋈</li><li>重命名 ρ<ul><li>$\rho _{x}\left( R\right)$ 表示把关系R重命名为x</li><li>$P<em>{x\left( A_1\ldots ,A</em>{n}\right) }\left( R\right)$</li></ul></li><li>集合差 -$$r\cup S=\left\{  t~| t\in r ~or~ t\in s\right\}$$</li><li>集合交 ∩$$r\cap  S=\left\{  t~| t\in r ~and~ t\in s\right\}$$</li></ul>]]></content>
    
    
    <summary type="html">DATABASE SYSTEM CONCEPTS-Chapter6 Formal Relational Query Languages</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://agoni66.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DATABASE SYSTEM CONCEPTS-Chapter4 Intermediate SQL</title>
    <link href="https://agoni66.github.io/posts/1000114.html"/>
    <id>https://agoni66.github.io/posts/1000114.html</id>
    <published>2024-07-31T14:30:00.000Z</published>
    <updated>2024-10-03T07:01:13.454Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000111.html">Chapter1 Introduction</a></p></li><li><p>🦝<a href="https://agoni66.github.io/posts/1000112.html">Chapter2 Introduction to Relational Model</a></p></li><li><p>🐯<a href="https://agoni66.github.io/posts/1000113.html">Chapter3 Introduction to SQL</a></p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000114.html">Chapter4 Intermediate SQL</a> ⇦ 当前位置🪂</p></li><li><p>🐷<a href="https://agoni66.github.io/posts/1000116.html">Chapter6 Formal Relational Query Languages</a></p></li><li><p>🐼<a href="https://agoni66.github.io/posts/1000117.html">Chapter7 Entity-Relationship Model</a> </p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000118.html">Chapter8 Relational Database Design</a></p></li><li><p>🐻<a href="https://agoni66.github.io/posts/1000115.html">Chapter10 Storage and File Structure</a></p></li></ol></div><h3 id="连接条件"><a href="#连接条件" class="headerlink" title="连接条件"></a>连接条件</h3><p><code>on</code></p><p>在on语句后写具体的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">join</span> takes <span class="keyword">on</span> student.ID <span class="operator">=</span> takes.ID;</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student,takes <span class="keyword">where</span> student.ID <span class="operator">=</span> takes.ID;</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>外连接运算与自然连接运算类似，只不过通过在结果中创建空值的方式，保留了在连接中丢失的元组</p><ul><li>左外连接：left outer join，只保留左边这张表的元组</li><li>右外连接：right outer join，只保留右边那张表的元组</li><li>全外连接：full outer join，保留出现在关系中全部的元组</li><li>内连接：inner join，不保留未匹配元组</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">natural</span> <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> takes;</span><br></pre></td></tr></table></figure><p><strong>左外连接和右外连接是对称的</strong></p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_name <span class="keyword">as</span> (查询表达式)</span><br></pre></td></tr></table></figure><p>例如，需要访问instructor关系中除salary之外的所有数据的职员</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> faculty <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> ID, name, dept_name</span><br><span class="line"><span class="keyword">from</span> instructor;</span><br></pre></td></tr></table></figure><p><strong>一般不允许对视图关系进行修改</strong></p><p>视图更新可能存在问题，比如在插入数据时，如果视图的属性列少于基本表，那么可能会出现以下两种情况</p><ol><li>拒绝插入</li><li>向基本表中插入元组，未赋值的属性值为null</li></ol><p>删除视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_name</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务(transaction)由查询语句(select)和更新语句(update)的序列组成</p><ul><li>commit work：提交当前事务，将事务所做的更新在数据库中长久保存</li><li>rollback work：回滚当前事务，撤销该事务中所有SQL语句对数据库的更新</li></ul><p>一旦事务执行了commit work，就不能通过rollback work撤销了</p><p>一个较好的选择是，允许多条SQL语句包含在关键字<code>begin atomic……end</code>之间，这些SQL语句构成单一事务</p><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><ul><li>主码约束</li><li>not null</li><li>unique</li><li>check</li><li>参照完整性</li></ul><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p><code>default</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s</span><br><span class="line">(</span><br><span class="line">sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">sno <span class="type">char</span>(<span class="number">5</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="create-table-的拓展"><a href="#create-table-的拓展" class="headerlink" title="create table 的拓展"></a>create table 的拓展</h3><p>创建与现有表的模式相同的表</p><p>例如，创建一个与instructor具有相同模式的新表temp_instructor</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> temp_instructor <span class="keyword">like</span> instructor;</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>SQL标准包括<code>select</code> <code>insert</code> <code>update</code> <code>delete</code> </p><p><code>grant</code>语句用来授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 表级权限 <span class="keyword">on</span> 关系名或视图名 <span class="keyword">to</span> 用户<span class="operator">/</span>角色列表</span><br></pre></td></tr></table></figure><p>例如，授予数据库用户Amit和Satoshi在department关系上的select权限，授予数据库用户Amit和Satoshi在department关系的budget属性上的update权限，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> department <span class="keyword">to</span> Amit,Satoshi;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">update</span>(budget) <span class="keyword">on</span> department <span class="keyword">to</span> Amit,Satoshi;</span><br></pre></td></tr></table></figure><p><code>revoke</code>语句用来收回权限</p><p>例如，收回授予数据库用户Amit和Satoshi在department关系上的select权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> student <span class="keyword">to</span> Amit,Satoshi;</span><br></pre></td></tr></table></figure><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>在数据库中建立角色集，并授予每个角色一定的权限，然后将角色分配给用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> role instructor;</span><br></pre></td></tr></table></figure><p>角色可以授予给用户，也可以授予给其他角色</p>]]></content>
    
    
    <summary type="html">DATABASE SYSTEM CONCEPTS-Chapter4 Intermediate SQL</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://agoni66.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>DATABASE SYSTEM CONCEPTS-Chapter3 Introduction to SQL</title>
    <link href="https://agoni66.github.io/posts/1000113.html"/>
    <id>https://agoni66.github.io/posts/1000113.html</id>
    <published>2024-07-30T14:30:00.000Z</published>
    <updated>2024-10-03T07:00:57.309Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue no-icon flat"><p><font size="4"><b>数据库系统概念导航🚀🚀🚀</b></font></p><ol><li><p>🐻‍❄️<a href="https://agoni66.github.io/posts/1000111.html">Chapter1 Introduction</a> </p></li><li><p>🦝<a href="https://agoni66.github.io/posts/1000112.html">Chapter2 Introduction to Relational Model</a></p></li><li><p>🐯<a href="https://agoni66.github.io/posts/1000113.html">Chapter3 Introduction to SQL</a> ⇦ 当前位置🪂</p></li><li><p>🐱<a href="https://agoni66.github.io/posts/1000114.html">Chapter4 Intermediate SQL</a></p></li><li><p>🐷<a href="https://agoni66.github.io/posts/1000116.html">Chapter6 Formal Relational Query Languages</a></p></li><li><p>🐼<a href="https://agoni66.github.io/posts/1000117.html">Chapter7 Entity-Relationship Model</a> </p></li><li><p>🐨<a href="https://agoni66.github.io/posts/1000118.html">Chapter8 Relational Database Design</a></p></li><li><p>🐻<a href="https://agoni66.github.io/posts/1000115.html">Chapter10 Storage and File Structure</a></p></li></ol></div><h3 id="SQL-数据定义语言（-data-definition-language-DDL）"><a href="#SQL-数据定义语言（-data-definition-language-DDL）" class="headerlink" title="SQL 数据定义语言（ data-definition language ,DDL）"></a>SQL 数据定义语言（ data-definition language ,DDL）</h3><ul><li>每个关系的模式</li><li>每个属性关联的值域</li><li>完整性约束</li><li>每个关系要维护的索引集合</li><li>每个关系的安全性和授权信息</li><li>每个关系在磁盘上的物理存储结构</li></ul><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><div class="table-container"><table><thead><tr><th>语法</th><th>语义</th></tr></thead><tbody><tr><td>char(n)</td><td>指定长度n的字符串</td></tr><tr><td>varchar(n)</td><td>最大长度n的字符串</td></tr><tr><td>int</td><td>整形</td></tr><tr><td>smallint</td><td>小整数</td></tr><tr><td>float(n)</td><td>精度至少是n位浮点数</td></tr><tr><td>numeric(p,d)</td><td>定点数，p长度、d精度</td></tr></tbody></table></div><p>每种类型都可能包含一个空值</p><h3 id="基本模式定义"><a href="#基本模式定义" class="headerlink" title="基本模式定义"></a>基本模式定义</h3><p><strong>创建</strong></p><p>创建一个department关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line">dept_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">building <span class="type">varchar</span>(<span class="number">15</span>),</span><br><span class="line">budget <span class="type">numeric</span>(<span class="number">12</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">primary</span> key(dept_name));</span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><p>插入一个名叫Smith的生物教师，其id为10211，工资为6000</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> instructor <span class="keyword">values</span>(</span><br><span class="line"><span class="number">10211</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Biology&#x27;</span>, <span class="number">6000</span>);</span><br></pre></td></tr></table></figure><p><strong>更新</strong></p><p>所有教师的工资将增长5%</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> instructor</span><br><span class="line"><span class="keyword">set</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.05</span></span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><p>删除元组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> ...</span><br></pre></td></tr></table></figure><p>删除关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> r;</span><br></pre></td></tr></table></figure><p><strong>增加</strong></p><p>为关系增加/删除属性 A属性名 D属性的域</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> r <span class="keyword">add</span> A D;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> r <span class="keyword">delete</span> A;</span><br></pre></td></tr></table></figure><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><ul><li>primary key( ) 主码属性必须非空且唯一</li><li>foreign key( ) references table 外码约束</li><li>not null 不允许空值</li></ul><h3 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a>SQL查询</h3><p><code>select</code> <code>from</code> <code>where</code></p><ul><li>单关系查询</li><li>多关系查询</li><li>自然连接 <code>natural join</code></li><li>更名运算<code>as</code></li><li>字符串运算<ul><li><code>like</code></li><li><code>%</code> 任意匹配多个字符</li><li><code>_</code> 任意匹配一个字符</li><li><code>\</code> 转义字符</li></ul></li><li><code>*</code> 所有的属性</li><li>次序<ul><li><code>order by</code></li><li><code>desc</code> 降序</li><li><code>asc</code> 升序</li></ul></li><li>集合运算<ul><li>union 并运算 自动去重（不想就union all）</li><li>intersect 交运算 自动去重（不想就intersect all）</li><li>except 差运算</li></ul></li><li>聚集函数<ul><li><code>avg</code> 平均值</li><li><code>min</code> 最小值</li><li><code>max</code> 最大值</li><li><code>sum</code> 总和</li><li><code>count</code> 计数</li></ul></li><li>分组聚集<code>group by</code><ul><li>group by子句中所有属性相同的元组将分为一个组</li></ul></li><li>having子句<ul><li>聚集函数后只能使用having子句</li><li>having子句应用在group by子句上</li></ul></li><li>嵌套子查询<ul><li>至少比某一个大 <code>&gt;some</code></li><li>至少比某一个小 <code>&lt;some</code></li><li><code>=some</code> 就是 <code>in</code></li><li>比所有都大 <code>&gt;all</code></li><li>比所有都小 <code>&lt;all</code></li><li><code>unique</code> 没有重复元素返回true</li><li><code>exists</code> 子查询非空返回true</li></ul></li></ul>]]></content>
    
    
    <summary type="html">DATABASE SYSTEM CONCEPTS-Chapter3 Introduction to SQL</summary>
    
    
    
    <category term="期末复习" scheme="https://agoni66.github.io/categories/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://agoni66.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
